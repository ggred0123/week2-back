// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Sex {
  MALE
  FEMALE
}

enum MadCampStatus {
  InCamp
  OutCamp
}

enum PreferredAlcohol {
  Beer
  Wine
  Cocktail
  Mixed
  Soju
  SoftDrink
  None
}

model User {
  id           Int       @id @default(autoincrement())
  universityId Int       @map("university_id")
  name         String    
  major        String
  alcoholLevel Int       @default(0)
  // preferredAlcohol는 UserPreferredAlcohol를 통해 다대다 관계로 저장됨
  madCampStatus MadCampStatus 
  email        String    @unique
  password     String
  sex          Sex       @default(MALE)
  mbtiId       Int       @map("mbti_id")
  classId      Int       @map("class_id")
  imageUrl     String?   @map("image_url")
  refreshToken String?   @map("refresh_token")
  birthday     DateTime
  createdAt    DateTime  @default(now()) @map("created_at")

  meeting Meeting[]
  meetingJoinUser MeetingJoinUser[]
  preferredAlcohol UserPreferredAlcohol[]
  codingInfo UserCodingInfo[]
  reply Reply[]
  communityContent CommunityContent[]
  callerUserMatching UserMatching[] @relation("CallerRelation")
  calleeUserMatching UserMatching[] @relation("CalleeRelation")
  
  university University @relation(fields: [universityId], references: [id])
  mbti Mbti @relation(fields: [mbtiId], references: [id])

  


  @@map("user")
}

model UserCodingInfo {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  codingLanguageId Int @map("coding_language_id")
  codingFieldId Int @map("coding_field_id")
  codingLevel Int   
  createdAt DateTime @default(now()) @map("created_at")


  codingLanguage CodingLanguage @relation(fields: [codingLanguageId], references: [id])
  user User @relation(fields: [userId], references: [id])
  codingField CodingField @relation(fields: [codingFieldId], references: [id])
  @@map("user_coding")
}

model CodingField {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")

  user UserCodingInfo[]


  @@map("coding_field")
}

model CodingLanguage {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")

  user UserCodingInfo[]


  @@map("coding_language")
}

model Mbti {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")

  user User[]


  @@map("mbti")
}

model UserPreferredAlcohol {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  alcoholId Int      @map("alcohol_id")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])
  alcohol Alcohol @relation(fields: [alcoholId], references: [id])


  @@map("user_preferred_alcohol")
}


model Alcohol {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")

  user UserPreferredAlcohol[]


  @@map("alcohol")
}


model University {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")

  user User[]

  @@map("university")
}

model UserMatching {
  id        Int      @id @default(autoincrement())
  callerUserId    Int      @map("caller_user_id")
  calleeUserId    Int      @map("callee_user_id")
  comment String
  matchingCategoryId Int @map("matching_category_id")
  createdAt DateTime @default(now()) @map("created_at")

  callerUser User @relation(fields: [callerUserId], references: [id], name: "CallerRelation")
  calleeUser User @relation(fields: [calleeUserId], references: [id], name: "CalleeRelation")
  matchingCategory MatchingCategory @relation(fields: [matchingCategoryId], references: [id])
  @@map("user_matching")
}

model MatchingCategory {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")

  user UserMatching[]

  @@map("matching_category")
}


model Category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")

  
  meeting Meeting[]

  @@map("category")
}

model Meeting {
  id          Int      @id @default(autoincrement())
  hostId      Int      @map("host_id")
  categoryId  Int      @map("category_id")
  meetingImageUrl String? @map("meeting_image_url")
  location String
  title       String
  keyword     String
  description String
  maxPeople   Int      @map("max_people")
  startTime   DateTime @map("start_time")
  endTime     DateTime @map("end_time")
  createdAt   DateTime @default(now()) @map("created_at")

  meetingJoinUser MeetingJoinUser[]

  host     User     @relation(fields: [hostId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])



  @@map("meeting")
}


model MeetingJoinUser {
  id        Int      @id @default(autoincrement())
  meetingId Int      @map("meeting_id")
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  meeting Meeting @relation(fields: [meetingId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([meetingId, userId])

  @@map("meeting_join_user")
}

model Community {
  id        Int      @id @default(autoincrement())
  title      String

  createdAt DateTime @default(now()) @map("created_at")
  communityContent CommunityContent[]
  @@map("community")
}

model CommunityContent {
  id        Int      @id @default(autoincrement())
  communityId Int @map("community_id")
  writedUserId Int @map("user_id")
  title String
  content String
  likeCount Int @default(0)
  contentImageUrl String? @map("content_image_url")
  createdAt DateTime @default(now()) @map("created_at")

  reply Reply[]
  writedUser User @relation(fields: [writedUserId], references: [id])

  community Community @relation(fields: [communityId], references: [id])
  @@map("community_content")
}


model Reply {
  id        Int      @id @default(autoincrement())
  communityContentId Int @map("community_content_id")
  userId Int @map("user_id")
  content String
  createdAt DateTime @default(now()) @map("created_at")

  communityContent CommunityContent @relation(fields: [communityContentId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("reply")
}



