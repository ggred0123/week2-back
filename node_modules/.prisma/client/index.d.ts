
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Mbti
 * 
 */
export type Mbti = $Result.DefaultSelection<Prisma.$MbtiPayload>
/**
 * Model Alcohol
 * 
 */
export type Alcohol = $Result.DefaultSelection<Prisma.$AlcoholPayload>
/**
 * Model University
 * 
 */
export type University = $Result.DefaultSelection<Prisma.$UniversityPayload>
/**
 * Model UserMatching
 * 
 */
export type UserMatching = $Result.DefaultSelection<Prisma.$UserMatchingPayload>
/**
 * Model MatchingCategory
 * 
 */
export type MatchingCategory = $Result.DefaultSelection<Prisma.$MatchingCategoryPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Meeting
 * 
 */
export type Meeting = $Result.DefaultSelection<Prisma.$MeetingPayload>
/**
 * Model MeetingJoinUser
 * 
 */
export type MeetingJoinUser = $Result.DefaultSelection<Prisma.$MeetingJoinUserPayload>
/**
 * Model Community
 * 
 */
export type Community = $Result.DefaultSelection<Prisma.$CommunityPayload>
/**
 * Model CommunityContent
 * 
 */
export type CommunityContent = $Result.DefaultSelection<Prisma.$CommunityContentPayload>
/**
 * Model Reply
 * 
 */
export type Reply = $Result.DefaultSelection<Prisma.$ReplyPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const MadCampStatus: {
  InCamp: 'InCamp',
  OutCamp: 'OutCamp'
};

export type MadCampStatus = (typeof MadCampStatus)[keyof typeof MadCampStatus]


export const Sex: {
  MALE: 'MALE',
  FEMALE: 'FEMALE'
};

export type Sex = (typeof Sex)[keyof typeof Sex]


export const RegistrationStatus: {
  TEMPORARY: 'TEMPORARY',
  COMPLETED: 'COMPLETED'
};

export type RegistrationStatus = (typeof RegistrationStatus)[keyof typeof RegistrationStatus]

}

export type MadCampStatus = $Enums.MadCampStatus

export const MadCampStatus: typeof $Enums.MadCampStatus

export type Sex = $Enums.Sex

export const Sex: typeof $Enums.Sex

export type RegistrationStatus = $Enums.RegistrationStatus

export const RegistrationStatus: typeof $Enums.RegistrationStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.mbti`: Exposes CRUD operations for the **Mbti** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mbtis
    * const mbtis = await prisma.mbti.findMany()
    * ```
    */
  get mbti(): Prisma.MbtiDelegate<ExtArgs>;

  /**
   * `prisma.alcohol`: Exposes CRUD operations for the **Alcohol** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alcohol
    * const alcohol = await prisma.alcohol.findMany()
    * ```
    */
  get alcohol(): Prisma.AlcoholDelegate<ExtArgs>;

  /**
   * `prisma.university`: Exposes CRUD operations for the **University** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Universities
    * const universities = await prisma.university.findMany()
    * ```
    */
  get university(): Prisma.UniversityDelegate<ExtArgs>;

  /**
   * `prisma.userMatching`: Exposes CRUD operations for the **UserMatching** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserMatchings
    * const userMatchings = await prisma.userMatching.findMany()
    * ```
    */
  get userMatching(): Prisma.UserMatchingDelegate<ExtArgs>;

  /**
   * `prisma.matchingCategory`: Exposes CRUD operations for the **MatchingCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MatchingCategories
    * const matchingCategories = await prisma.matchingCategory.findMany()
    * ```
    */
  get matchingCategory(): Prisma.MatchingCategoryDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.meeting`: Exposes CRUD operations for the **Meeting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Meetings
    * const meetings = await prisma.meeting.findMany()
    * ```
    */
  get meeting(): Prisma.MeetingDelegate<ExtArgs>;

  /**
   * `prisma.meetingJoinUser`: Exposes CRUD operations for the **MeetingJoinUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MeetingJoinUsers
    * const meetingJoinUsers = await prisma.meetingJoinUser.findMany()
    * ```
    */
  get meetingJoinUser(): Prisma.MeetingJoinUserDelegate<ExtArgs>;

  /**
   * `prisma.community`: Exposes CRUD operations for the **Community** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Communities
    * const communities = await prisma.community.findMany()
    * ```
    */
  get community(): Prisma.CommunityDelegate<ExtArgs>;

  /**
   * `prisma.communityContent`: Exposes CRUD operations for the **CommunityContent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CommunityContents
    * const communityContents = await prisma.communityContent.findMany()
    * ```
    */
  get communityContent(): Prisma.CommunityContentDelegate<ExtArgs>;

  /**
   * `prisma.reply`: Exposes CRUD operations for the **Reply** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Replies
    * const replies = await prisma.reply.findMany()
    * ```
    */
  get reply(): Prisma.ReplyDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.19.1
   * Query Engine version: 69d742ee20b815d88e17e54db4a2a7a3b30324e3
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Mbti: 'Mbti',
    Alcohol: 'Alcohol',
    University: 'University',
    UserMatching: 'UserMatching',
    MatchingCategory: 'MatchingCategory',
    Category: 'Category',
    Meeting: 'Meeting',
    MeetingJoinUser: 'MeetingJoinUser',
    Community: 'Community',
    CommunityContent: 'CommunityContent',
    Reply: 'Reply'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "mbti" | "alcohol" | "university" | "userMatching" | "matchingCategory" | "category" | "meeting" | "meetingJoinUser" | "community" | "communityContent" | "reply"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Mbti: {
        payload: Prisma.$MbtiPayload<ExtArgs>
        fields: Prisma.MbtiFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MbtiFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MbtiPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MbtiFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MbtiPayload>
          }
          findFirst: {
            args: Prisma.MbtiFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MbtiPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MbtiFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MbtiPayload>
          }
          findMany: {
            args: Prisma.MbtiFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MbtiPayload>[]
          }
          create: {
            args: Prisma.MbtiCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MbtiPayload>
          }
          createMany: {
            args: Prisma.MbtiCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MbtiCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MbtiPayload>[]
          }
          delete: {
            args: Prisma.MbtiDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MbtiPayload>
          }
          update: {
            args: Prisma.MbtiUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MbtiPayload>
          }
          deleteMany: {
            args: Prisma.MbtiDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MbtiUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MbtiUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MbtiPayload>
          }
          aggregate: {
            args: Prisma.MbtiAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMbti>
          }
          groupBy: {
            args: Prisma.MbtiGroupByArgs<ExtArgs>
            result: $Utils.Optional<MbtiGroupByOutputType>[]
          }
          count: {
            args: Prisma.MbtiCountArgs<ExtArgs>
            result: $Utils.Optional<MbtiCountAggregateOutputType> | number
          }
        }
      }
      Alcohol: {
        payload: Prisma.$AlcoholPayload<ExtArgs>
        fields: Prisma.AlcoholFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlcoholFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlcoholPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlcoholFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlcoholPayload>
          }
          findFirst: {
            args: Prisma.AlcoholFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlcoholPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlcoholFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlcoholPayload>
          }
          findMany: {
            args: Prisma.AlcoholFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlcoholPayload>[]
          }
          create: {
            args: Prisma.AlcoholCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlcoholPayload>
          }
          createMany: {
            args: Prisma.AlcoholCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AlcoholCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlcoholPayload>[]
          }
          delete: {
            args: Prisma.AlcoholDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlcoholPayload>
          }
          update: {
            args: Prisma.AlcoholUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlcoholPayload>
          }
          deleteMany: {
            args: Prisma.AlcoholDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlcoholUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AlcoholUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlcoholPayload>
          }
          aggregate: {
            args: Prisma.AlcoholAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlcohol>
          }
          groupBy: {
            args: Prisma.AlcoholGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlcoholGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlcoholCountArgs<ExtArgs>
            result: $Utils.Optional<AlcoholCountAggregateOutputType> | number
          }
        }
      }
      University: {
        payload: Prisma.$UniversityPayload<ExtArgs>
        fields: Prisma.UniversityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UniversityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UniversityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>
          }
          findFirst: {
            args: Prisma.UniversityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UniversityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>
          }
          findMany: {
            args: Prisma.UniversityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>[]
          }
          create: {
            args: Prisma.UniversityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>
          }
          createMany: {
            args: Prisma.UniversityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UniversityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>[]
          }
          delete: {
            args: Prisma.UniversityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>
          }
          update: {
            args: Prisma.UniversityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>
          }
          deleteMany: {
            args: Prisma.UniversityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UniversityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UniversityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>
          }
          aggregate: {
            args: Prisma.UniversityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUniversity>
          }
          groupBy: {
            args: Prisma.UniversityGroupByArgs<ExtArgs>
            result: $Utils.Optional<UniversityGroupByOutputType>[]
          }
          count: {
            args: Prisma.UniversityCountArgs<ExtArgs>
            result: $Utils.Optional<UniversityCountAggregateOutputType> | number
          }
        }
      }
      UserMatching: {
        payload: Prisma.$UserMatchingPayload<ExtArgs>
        fields: Prisma.UserMatchingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserMatchingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMatchingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserMatchingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMatchingPayload>
          }
          findFirst: {
            args: Prisma.UserMatchingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMatchingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserMatchingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMatchingPayload>
          }
          findMany: {
            args: Prisma.UserMatchingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMatchingPayload>[]
          }
          create: {
            args: Prisma.UserMatchingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMatchingPayload>
          }
          createMany: {
            args: Prisma.UserMatchingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserMatchingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMatchingPayload>[]
          }
          delete: {
            args: Prisma.UserMatchingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMatchingPayload>
          }
          update: {
            args: Prisma.UserMatchingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMatchingPayload>
          }
          deleteMany: {
            args: Prisma.UserMatchingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserMatchingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserMatchingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMatchingPayload>
          }
          aggregate: {
            args: Prisma.UserMatchingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserMatching>
          }
          groupBy: {
            args: Prisma.UserMatchingGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserMatchingGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserMatchingCountArgs<ExtArgs>
            result: $Utils.Optional<UserMatchingCountAggregateOutputType> | number
          }
        }
      }
      MatchingCategory: {
        payload: Prisma.$MatchingCategoryPayload<ExtArgs>
        fields: Prisma.MatchingCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatchingCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchingCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatchingCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchingCategoryPayload>
          }
          findFirst: {
            args: Prisma.MatchingCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchingCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatchingCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchingCategoryPayload>
          }
          findMany: {
            args: Prisma.MatchingCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchingCategoryPayload>[]
          }
          create: {
            args: Prisma.MatchingCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchingCategoryPayload>
          }
          createMany: {
            args: Prisma.MatchingCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MatchingCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchingCategoryPayload>[]
          }
          delete: {
            args: Prisma.MatchingCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchingCategoryPayload>
          }
          update: {
            args: Prisma.MatchingCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchingCategoryPayload>
          }
          deleteMany: {
            args: Prisma.MatchingCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MatchingCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MatchingCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchingCategoryPayload>
          }
          aggregate: {
            args: Prisma.MatchingCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMatchingCategory>
          }
          groupBy: {
            args: Prisma.MatchingCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<MatchingCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatchingCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<MatchingCategoryCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Meeting: {
        payload: Prisma.$MeetingPayload<ExtArgs>
        fields: Prisma.MeetingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MeetingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MeetingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPayload>
          }
          findFirst: {
            args: Prisma.MeetingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MeetingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPayload>
          }
          findMany: {
            args: Prisma.MeetingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPayload>[]
          }
          create: {
            args: Prisma.MeetingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPayload>
          }
          createMany: {
            args: Prisma.MeetingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MeetingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPayload>[]
          }
          delete: {
            args: Prisma.MeetingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPayload>
          }
          update: {
            args: Prisma.MeetingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPayload>
          }
          deleteMany: {
            args: Prisma.MeetingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MeetingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MeetingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPayload>
          }
          aggregate: {
            args: Prisma.MeetingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMeeting>
          }
          groupBy: {
            args: Prisma.MeetingGroupByArgs<ExtArgs>
            result: $Utils.Optional<MeetingGroupByOutputType>[]
          }
          count: {
            args: Prisma.MeetingCountArgs<ExtArgs>
            result: $Utils.Optional<MeetingCountAggregateOutputType> | number
          }
        }
      }
      MeetingJoinUser: {
        payload: Prisma.$MeetingJoinUserPayload<ExtArgs>
        fields: Prisma.MeetingJoinUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MeetingJoinUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingJoinUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MeetingJoinUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingJoinUserPayload>
          }
          findFirst: {
            args: Prisma.MeetingJoinUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingJoinUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MeetingJoinUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingJoinUserPayload>
          }
          findMany: {
            args: Prisma.MeetingJoinUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingJoinUserPayload>[]
          }
          create: {
            args: Prisma.MeetingJoinUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingJoinUserPayload>
          }
          createMany: {
            args: Prisma.MeetingJoinUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MeetingJoinUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingJoinUserPayload>[]
          }
          delete: {
            args: Prisma.MeetingJoinUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingJoinUserPayload>
          }
          update: {
            args: Prisma.MeetingJoinUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingJoinUserPayload>
          }
          deleteMany: {
            args: Prisma.MeetingJoinUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MeetingJoinUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MeetingJoinUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingJoinUserPayload>
          }
          aggregate: {
            args: Prisma.MeetingJoinUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMeetingJoinUser>
          }
          groupBy: {
            args: Prisma.MeetingJoinUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<MeetingJoinUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.MeetingJoinUserCountArgs<ExtArgs>
            result: $Utils.Optional<MeetingJoinUserCountAggregateOutputType> | number
          }
        }
      }
      Community: {
        payload: Prisma.$CommunityPayload<ExtArgs>
        fields: Prisma.CommunityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommunityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommunityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>
          }
          findFirst: {
            args: Prisma.CommunityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommunityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>
          }
          findMany: {
            args: Prisma.CommunityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>[]
          }
          create: {
            args: Prisma.CommunityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>
          }
          createMany: {
            args: Prisma.CommunityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommunityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>[]
          }
          delete: {
            args: Prisma.CommunityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>
          }
          update: {
            args: Prisma.CommunityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>
          }
          deleteMany: {
            args: Prisma.CommunityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommunityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommunityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>
          }
          aggregate: {
            args: Prisma.CommunityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommunity>
          }
          groupBy: {
            args: Prisma.CommunityGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommunityGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommunityCountArgs<ExtArgs>
            result: $Utils.Optional<CommunityCountAggregateOutputType> | number
          }
        }
      }
      CommunityContent: {
        payload: Prisma.$CommunityContentPayload<ExtArgs>
        fields: Prisma.CommunityContentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommunityContentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityContentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommunityContentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityContentPayload>
          }
          findFirst: {
            args: Prisma.CommunityContentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityContentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommunityContentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityContentPayload>
          }
          findMany: {
            args: Prisma.CommunityContentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityContentPayload>[]
          }
          create: {
            args: Prisma.CommunityContentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityContentPayload>
          }
          createMany: {
            args: Prisma.CommunityContentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommunityContentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityContentPayload>[]
          }
          delete: {
            args: Prisma.CommunityContentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityContentPayload>
          }
          update: {
            args: Prisma.CommunityContentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityContentPayload>
          }
          deleteMany: {
            args: Prisma.CommunityContentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommunityContentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommunityContentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityContentPayload>
          }
          aggregate: {
            args: Prisma.CommunityContentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommunityContent>
          }
          groupBy: {
            args: Prisma.CommunityContentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommunityContentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommunityContentCountArgs<ExtArgs>
            result: $Utils.Optional<CommunityContentCountAggregateOutputType> | number
          }
        }
      }
      Reply: {
        payload: Prisma.$ReplyPayload<ExtArgs>
        fields: Prisma.ReplyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReplyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReplyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReplyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReplyPayload>
          }
          findFirst: {
            args: Prisma.ReplyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReplyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReplyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReplyPayload>
          }
          findMany: {
            args: Prisma.ReplyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReplyPayload>[]
          }
          create: {
            args: Prisma.ReplyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReplyPayload>
          }
          createMany: {
            args: Prisma.ReplyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReplyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReplyPayload>[]
          }
          delete: {
            args: Prisma.ReplyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReplyPayload>
          }
          update: {
            args: Prisma.ReplyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReplyPayload>
          }
          deleteMany: {
            args: Prisma.ReplyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReplyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReplyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReplyPayload>
          }
          aggregate: {
            args: Prisma.ReplyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReply>
          }
          groupBy: {
            args: Prisma.ReplyGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReplyGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReplyCountArgs<ExtArgs>
            result: $Utils.Optional<ReplyCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    meeting: number
    meetingJoinUser: number
    reply: number
    communityContent: number
    callerUserMatching: number
    calleeUserMatching: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meeting?: boolean | UserCountOutputTypeCountMeetingArgs
    meetingJoinUser?: boolean | UserCountOutputTypeCountMeetingJoinUserArgs
    reply?: boolean | UserCountOutputTypeCountReplyArgs
    communityContent?: boolean | UserCountOutputTypeCountCommunityContentArgs
    callerUserMatching?: boolean | UserCountOutputTypeCountCallerUserMatchingArgs
    calleeUserMatching?: boolean | UserCountOutputTypeCountCalleeUserMatchingArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMeetingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMeetingJoinUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetingJoinUserWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReplyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReplyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommunityContentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommunityContentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCallerUserMatchingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserMatchingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCalleeUserMatchingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserMatchingWhereInput
  }


  /**
   * Count Type MbtiCountOutputType
   */

  export type MbtiCountOutputType = {
    user: number
  }

  export type MbtiCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | MbtiCountOutputTypeCountUserArgs
  }

  // Custom InputTypes
  /**
   * MbtiCountOutputType without action
   */
  export type MbtiCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MbtiCountOutputType
     */
    select?: MbtiCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MbtiCountOutputType without action
   */
  export type MbtiCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type AlcoholCountOutputType
   */

  export type AlcoholCountOutputType = {
    user: number
  }

  export type AlcoholCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AlcoholCountOutputTypeCountUserArgs
  }

  // Custom InputTypes
  /**
   * AlcoholCountOutputType without action
   */
  export type AlcoholCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlcoholCountOutputType
     */
    select?: AlcoholCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AlcoholCountOutputType without action
   */
  export type AlcoholCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type UniversityCountOutputType
   */

  export type UniversityCountOutputType = {
    user: number
  }

  export type UniversityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UniversityCountOutputTypeCountUserArgs
  }

  // Custom InputTypes
  /**
   * UniversityCountOutputType without action
   */
  export type UniversityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UniversityCountOutputType
     */
    select?: UniversityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UniversityCountOutputType without action
   */
  export type UniversityCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type MatchingCategoryCountOutputType
   */

  export type MatchingCategoryCountOutputType = {
    user: number
  }

  export type MatchingCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | MatchingCategoryCountOutputTypeCountUserArgs
  }

  // Custom InputTypes
  /**
   * MatchingCategoryCountOutputType without action
   */
  export type MatchingCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingCategoryCountOutputType
     */
    select?: MatchingCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MatchingCategoryCountOutputType without action
   */
  export type MatchingCategoryCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserMatchingWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    meeting: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meeting?: boolean | CategoryCountOutputTypeCountMeetingArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountMeetingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetingWhereInput
  }


  /**
   * Count Type MeetingCountOutputType
   */

  export type MeetingCountOutputType = {
    meetingJoinUser: number
  }

  export type MeetingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meetingJoinUser?: boolean | MeetingCountOutputTypeCountMeetingJoinUserArgs
  }

  // Custom InputTypes
  /**
   * MeetingCountOutputType without action
   */
  export type MeetingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingCountOutputType
     */
    select?: MeetingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MeetingCountOutputType without action
   */
  export type MeetingCountOutputTypeCountMeetingJoinUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetingJoinUserWhereInput
  }


  /**
   * Count Type CommunityCountOutputType
   */

  export type CommunityCountOutputType = {
    communityContent: number
  }

  export type CommunityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    communityContent?: boolean | CommunityCountOutputTypeCountCommunityContentArgs
  }

  // Custom InputTypes
  /**
   * CommunityCountOutputType without action
   */
  export type CommunityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityCountOutputType
     */
    select?: CommunityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommunityCountOutputType without action
   */
  export type CommunityCountOutputTypeCountCommunityContentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommunityContentWhereInput
  }


  /**
   * Count Type CommunityContentCountOutputType
   */

  export type CommunityContentCountOutputType = {
    reply: number
  }

  export type CommunityContentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reply?: boolean | CommunityContentCountOutputTypeCountReplyArgs
  }

  // Custom InputTypes
  /**
   * CommunityContentCountOutputType without action
   */
  export type CommunityContentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityContentCountOutputType
     */
    select?: CommunityContentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommunityContentCountOutputType without action
   */
  export type CommunityContentCountOutputTypeCountReplyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReplyWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    universityId: number | null
    alcoholLevel: number | null
    mbtiId: number | null
    classId: number | null
    preferredAlcoholId: number | null
    leadershipLevel: number | null
    programmingLevel: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    universityId: number | null
    alcoholLevel: number | null
    mbtiId: number | null
    classId: number | null
    preferredAlcoholId: number | null
    leadershipLevel: number | null
    programmingLevel: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    universityId: number | null
    name: string | null
    major: string | null
    alcoholLevel: number | null
    madCampStatus: $Enums.MadCampStatus | null
    email: string | null
    sex: $Enums.Sex | null
    mbtiId: number | null
    classId: number | null
    imageUrl: string | null
    preferredAlcoholId: number | null
    leadershipLevel: number | null
    refreshToken: string | null
    birthday: Date | null
    registrationStatus: $Enums.RegistrationStatus | null
    programmingLevel: number | null
    programmingField: string | null
    programmingLanguage: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    universityId: number | null
    name: string | null
    major: string | null
    alcoholLevel: number | null
    madCampStatus: $Enums.MadCampStatus | null
    email: string | null
    sex: $Enums.Sex | null
    mbtiId: number | null
    classId: number | null
    imageUrl: string | null
    preferredAlcoholId: number | null
    leadershipLevel: number | null
    refreshToken: string | null
    birthday: Date | null
    registrationStatus: $Enums.RegistrationStatus | null
    programmingLevel: number | null
    programmingField: string | null
    programmingLanguage: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    universityId: number
    name: number
    major: number
    alcoholLevel: number
    madCampStatus: number
    email: number
    sex: number
    mbtiId: number
    classId: number
    imageUrl: number
    preferredAlcoholId: number
    leadershipLevel: number
    refreshToken: number
    birthday: number
    registrationStatus: number
    programmingLevel: number
    programmingField: number
    programmingLanguage: number
    createdAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    universityId?: true
    alcoholLevel?: true
    mbtiId?: true
    classId?: true
    preferredAlcoholId?: true
    leadershipLevel?: true
    programmingLevel?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    universityId?: true
    alcoholLevel?: true
    mbtiId?: true
    classId?: true
    preferredAlcoholId?: true
    leadershipLevel?: true
    programmingLevel?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    universityId?: true
    name?: true
    major?: true
    alcoholLevel?: true
    madCampStatus?: true
    email?: true
    sex?: true
    mbtiId?: true
    classId?: true
    imageUrl?: true
    preferredAlcoholId?: true
    leadershipLevel?: true
    refreshToken?: true
    birthday?: true
    registrationStatus?: true
    programmingLevel?: true
    programmingField?: true
    programmingLanguage?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    universityId?: true
    name?: true
    major?: true
    alcoholLevel?: true
    madCampStatus?: true
    email?: true
    sex?: true
    mbtiId?: true
    classId?: true
    imageUrl?: true
    preferredAlcoholId?: true
    leadershipLevel?: true
    refreshToken?: true
    birthday?: true
    registrationStatus?: true
    programmingLevel?: true
    programmingField?: true
    programmingLanguage?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    universityId?: true
    name?: true
    major?: true
    alcoholLevel?: true
    madCampStatus?: true
    email?: true
    sex?: true
    mbtiId?: true
    classId?: true
    imageUrl?: true
    preferredAlcoholId?: true
    leadershipLevel?: true
    refreshToken?: true
    birthday?: true
    registrationStatus?: true
    programmingLevel?: true
    programmingField?: true
    programmingLanguage?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    universityId: number
    name: string
    major: string
    alcoholLevel: number
    madCampStatus: $Enums.MadCampStatus
    email: string
    sex: $Enums.Sex
    mbtiId: number
    classId: number
    imageUrl: string | null
    preferredAlcoholId: number
    leadershipLevel: number
    refreshToken: string | null
    birthday: Date
    registrationStatus: $Enums.RegistrationStatus
    programmingLevel: number
    programmingField: string
    programmingLanguage: string
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    universityId?: boolean
    name?: boolean
    major?: boolean
    alcoholLevel?: boolean
    madCampStatus?: boolean
    email?: boolean
    sex?: boolean
    mbtiId?: boolean
    classId?: boolean
    imageUrl?: boolean
    preferredAlcoholId?: boolean
    leadershipLevel?: boolean
    refreshToken?: boolean
    birthday?: boolean
    registrationStatus?: boolean
    programmingLevel?: boolean
    programmingField?: boolean
    programmingLanguage?: boolean
    createdAt?: boolean
    meeting?: boolean | User$meetingArgs<ExtArgs>
    meetingJoinUser?: boolean | User$meetingJoinUserArgs<ExtArgs>
    reply?: boolean | User$replyArgs<ExtArgs>
    communityContent?: boolean | User$communityContentArgs<ExtArgs>
    callerUserMatching?: boolean | User$callerUserMatchingArgs<ExtArgs>
    calleeUserMatching?: boolean | User$calleeUserMatchingArgs<ExtArgs>
    preferredAlcohol?: boolean | AlcoholDefaultArgs<ExtArgs>
    university?: boolean | UniversityDefaultArgs<ExtArgs>
    mbti?: boolean | MbtiDefaultArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    universityId?: boolean
    name?: boolean
    major?: boolean
    alcoholLevel?: boolean
    madCampStatus?: boolean
    email?: boolean
    sex?: boolean
    mbtiId?: boolean
    classId?: boolean
    imageUrl?: boolean
    preferredAlcoholId?: boolean
    leadershipLevel?: boolean
    refreshToken?: boolean
    birthday?: boolean
    registrationStatus?: boolean
    programmingLevel?: boolean
    programmingField?: boolean
    programmingLanguage?: boolean
    createdAt?: boolean
    preferredAlcohol?: boolean | AlcoholDefaultArgs<ExtArgs>
    university?: boolean | UniversityDefaultArgs<ExtArgs>
    mbti?: boolean | MbtiDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    universityId?: boolean
    name?: boolean
    major?: boolean
    alcoholLevel?: boolean
    madCampStatus?: boolean
    email?: boolean
    sex?: boolean
    mbtiId?: boolean
    classId?: boolean
    imageUrl?: boolean
    preferredAlcoholId?: boolean
    leadershipLevel?: boolean
    refreshToken?: boolean
    birthday?: boolean
    registrationStatus?: boolean
    programmingLevel?: boolean
    programmingField?: boolean
    programmingLanguage?: boolean
    createdAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meeting?: boolean | User$meetingArgs<ExtArgs>
    meetingJoinUser?: boolean | User$meetingJoinUserArgs<ExtArgs>
    reply?: boolean | User$replyArgs<ExtArgs>
    communityContent?: boolean | User$communityContentArgs<ExtArgs>
    callerUserMatching?: boolean | User$callerUserMatchingArgs<ExtArgs>
    calleeUserMatching?: boolean | User$calleeUserMatchingArgs<ExtArgs>
    preferredAlcohol?: boolean | AlcoholDefaultArgs<ExtArgs>
    university?: boolean | UniversityDefaultArgs<ExtArgs>
    mbti?: boolean | MbtiDefaultArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    preferredAlcohol?: boolean | AlcoholDefaultArgs<ExtArgs>
    university?: boolean | UniversityDefaultArgs<ExtArgs>
    mbti?: boolean | MbtiDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      meeting: Prisma.$MeetingPayload<ExtArgs>[]
      meetingJoinUser: Prisma.$MeetingJoinUserPayload<ExtArgs>[]
      reply: Prisma.$ReplyPayload<ExtArgs>[]
      communityContent: Prisma.$CommunityContentPayload<ExtArgs>[]
      callerUserMatching: Prisma.$UserMatchingPayload<ExtArgs>[]
      calleeUserMatching: Prisma.$UserMatchingPayload<ExtArgs>[]
      preferredAlcohol: Prisma.$AlcoholPayload<ExtArgs>
      university: Prisma.$UniversityPayload<ExtArgs>
      mbti: Prisma.$MbtiPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      universityId: number
      name: string
      major: string
      alcoholLevel: number
      madCampStatus: $Enums.MadCampStatus
      email: string
      sex: $Enums.Sex
      mbtiId: number
      classId: number
      imageUrl: string | null
      preferredAlcoholId: number
      leadershipLevel: number
      refreshToken: string | null
      birthday: Date
      registrationStatus: $Enums.RegistrationStatus
      programmingLevel: number
      programmingField: string
      programmingLanguage: string
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meeting<T extends User$meetingArgs<ExtArgs> = {}>(args?: Subset<T, User$meetingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "findMany"> | Null>
    meetingJoinUser<T extends User$meetingJoinUserArgs<ExtArgs> = {}>(args?: Subset<T, User$meetingJoinUserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingJoinUserPayload<ExtArgs>, T, "findMany"> | Null>
    reply<T extends User$replyArgs<ExtArgs> = {}>(args?: Subset<T, User$replyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "findMany"> | Null>
    communityContent<T extends User$communityContentArgs<ExtArgs> = {}>(args?: Subset<T, User$communityContentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunityContentPayload<ExtArgs>, T, "findMany"> | Null>
    callerUserMatching<T extends User$callerUserMatchingArgs<ExtArgs> = {}>(args?: Subset<T, User$callerUserMatchingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMatchingPayload<ExtArgs>, T, "findMany"> | Null>
    calleeUserMatching<T extends User$calleeUserMatchingArgs<ExtArgs> = {}>(args?: Subset<T, User$calleeUserMatchingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMatchingPayload<ExtArgs>, T, "findMany"> | Null>
    preferredAlcohol<T extends AlcoholDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AlcoholDefaultArgs<ExtArgs>>): Prisma__AlcoholClient<$Result.GetResult<Prisma.$AlcoholPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    university<T extends UniversityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UniversityDefaultArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    mbti<T extends MbtiDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MbtiDefaultArgs<ExtArgs>>): Prisma__MbtiClient<$Result.GetResult<Prisma.$MbtiPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly universityId: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly major: FieldRef<"User", 'String'>
    readonly alcoholLevel: FieldRef<"User", 'Int'>
    readonly madCampStatus: FieldRef<"User", 'MadCampStatus'>
    readonly email: FieldRef<"User", 'String'>
    readonly sex: FieldRef<"User", 'Sex'>
    readonly mbtiId: FieldRef<"User", 'Int'>
    readonly classId: FieldRef<"User", 'Int'>
    readonly imageUrl: FieldRef<"User", 'String'>
    readonly preferredAlcoholId: FieldRef<"User", 'Int'>
    readonly leadershipLevel: FieldRef<"User", 'Int'>
    readonly refreshToken: FieldRef<"User", 'String'>
    readonly birthday: FieldRef<"User", 'DateTime'>
    readonly registrationStatus: FieldRef<"User", 'RegistrationStatus'>
    readonly programmingLevel: FieldRef<"User", 'Int'>
    readonly programmingField: FieldRef<"User", 'String'>
    readonly programmingLanguage: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.meeting
   */
  export type User$meetingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingInclude<ExtArgs> | null
    where?: MeetingWhereInput
    orderBy?: MeetingOrderByWithRelationInput | MeetingOrderByWithRelationInput[]
    cursor?: MeetingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeetingScalarFieldEnum | MeetingScalarFieldEnum[]
  }

  /**
   * User.meetingJoinUser
   */
  export type User$meetingJoinUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingJoinUser
     */
    select?: MeetingJoinUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingJoinUserInclude<ExtArgs> | null
    where?: MeetingJoinUserWhereInput
    orderBy?: MeetingJoinUserOrderByWithRelationInput | MeetingJoinUserOrderByWithRelationInput[]
    cursor?: MeetingJoinUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeetingJoinUserScalarFieldEnum | MeetingJoinUserScalarFieldEnum[]
  }

  /**
   * User.reply
   */
  export type User$replyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyInclude<ExtArgs> | null
    where?: ReplyWhereInput
    orderBy?: ReplyOrderByWithRelationInput | ReplyOrderByWithRelationInput[]
    cursor?: ReplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReplyScalarFieldEnum | ReplyScalarFieldEnum[]
  }

  /**
   * User.communityContent
   */
  export type User$communityContentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityContent
     */
    select?: CommunityContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityContentInclude<ExtArgs> | null
    where?: CommunityContentWhereInput
    orderBy?: CommunityContentOrderByWithRelationInput | CommunityContentOrderByWithRelationInput[]
    cursor?: CommunityContentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommunityContentScalarFieldEnum | CommunityContentScalarFieldEnum[]
  }

  /**
   * User.callerUserMatching
   */
  export type User$callerUserMatchingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatching
     */
    select?: UserMatchingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchingInclude<ExtArgs> | null
    where?: UserMatchingWhereInput
    orderBy?: UserMatchingOrderByWithRelationInput | UserMatchingOrderByWithRelationInput[]
    cursor?: UserMatchingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserMatchingScalarFieldEnum | UserMatchingScalarFieldEnum[]
  }

  /**
   * User.calleeUserMatching
   */
  export type User$calleeUserMatchingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatching
     */
    select?: UserMatchingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchingInclude<ExtArgs> | null
    where?: UserMatchingWhereInput
    orderBy?: UserMatchingOrderByWithRelationInput | UserMatchingOrderByWithRelationInput[]
    cursor?: UserMatchingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserMatchingScalarFieldEnum | UserMatchingScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Mbti
   */

  export type AggregateMbti = {
    _count: MbtiCountAggregateOutputType | null
    _avg: MbtiAvgAggregateOutputType | null
    _sum: MbtiSumAggregateOutputType | null
    _min: MbtiMinAggregateOutputType | null
    _max: MbtiMaxAggregateOutputType | null
  }

  export type MbtiAvgAggregateOutputType = {
    id: number | null
  }

  export type MbtiSumAggregateOutputType = {
    id: number | null
  }

  export type MbtiMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
  }

  export type MbtiMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
  }

  export type MbtiCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    _all: number
  }


  export type MbtiAvgAggregateInputType = {
    id?: true
  }

  export type MbtiSumAggregateInputType = {
    id?: true
  }

  export type MbtiMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type MbtiMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type MbtiCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    _all?: true
  }

  export type MbtiAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mbti to aggregate.
     */
    where?: MbtiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mbtis to fetch.
     */
    orderBy?: MbtiOrderByWithRelationInput | MbtiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MbtiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mbtis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mbtis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Mbtis
    **/
    _count?: true | MbtiCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MbtiAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MbtiSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MbtiMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MbtiMaxAggregateInputType
  }

  export type GetMbtiAggregateType<T extends MbtiAggregateArgs> = {
        [P in keyof T & keyof AggregateMbti]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMbti[P]>
      : GetScalarType<T[P], AggregateMbti[P]>
  }




  export type MbtiGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MbtiWhereInput
    orderBy?: MbtiOrderByWithAggregationInput | MbtiOrderByWithAggregationInput[]
    by: MbtiScalarFieldEnum[] | MbtiScalarFieldEnum
    having?: MbtiScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MbtiCountAggregateInputType | true
    _avg?: MbtiAvgAggregateInputType
    _sum?: MbtiSumAggregateInputType
    _min?: MbtiMinAggregateInputType
    _max?: MbtiMaxAggregateInputType
  }

  export type MbtiGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    _count: MbtiCountAggregateOutputType | null
    _avg: MbtiAvgAggregateOutputType | null
    _sum: MbtiSumAggregateOutputType | null
    _min: MbtiMinAggregateOutputType | null
    _max: MbtiMaxAggregateOutputType | null
  }

  type GetMbtiGroupByPayload<T extends MbtiGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MbtiGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MbtiGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MbtiGroupByOutputType[P]>
            : GetScalarType<T[P], MbtiGroupByOutputType[P]>
        }
      >
    >


  export type MbtiSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    user?: boolean | Mbti$userArgs<ExtArgs>
    _count?: boolean | MbtiCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mbti"]>

  export type MbtiSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["mbti"]>

  export type MbtiSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }

  export type MbtiInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Mbti$userArgs<ExtArgs>
    _count?: boolean | MbtiCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MbtiIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MbtiPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Mbti"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createdAt: Date
    }, ExtArgs["result"]["mbti"]>
    composites: {}
  }

  type MbtiGetPayload<S extends boolean | null | undefined | MbtiDefaultArgs> = $Result.GetResult<Prisma.$MbtiPayload, S>

  type MbtiCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MbtiFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MbtiCountAggregateInputType | true
    }

  export interface MbtiDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Mbti'], meta: { name: 'Mbti' } }
    /**
     * Find zero or one Mbti that matches the filter.
     * @param {MbtiFindUniqueArgs} args - Arguments to find a Mbti
     * @example
     * // Get one Mbti
     * const mbti = await prisma.mbti.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MbtiFindUniqueArgs>(args: SelectSubset<T, MbtiFindUniqueArgs<ExtArgs>>): Prisma__MbtiClient<$Result.GetResult<Prisma.$MbtiPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Mbti that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MbtiFindUniqueOrThrowArgs} args - Arguments to find a Mbti
     * @example
     * // Get one Mbti
     * const mbti = await prisma.mbti.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MbtiFindUniqueOrThrowArgs>(args: SelectSubset<T, MbtiFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MbtiClient<$Result.GetResult<Prisma.$MbtiPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Mbti that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MbtiFindFirstArgs} args - Arguments to find a Mbti
     * @example
     * // Get one Mbti
     * const mbti = await prisma.mbti.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MbtiFindFirstArgs>(args?: SelectSubset<T, MbtiFindFirstArgs<ExtArgs>>): Prisma__MbtiClient<$Result.GetResult<Prisma.$MbtiPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Mbti that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MbtiFindFirstOrThrowArgs} args - Arguments to find a Mbti
     * @example
     * // Get one Mbti
     * const mbti = await prisma.mbti.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MbtiFindFirstOrThrowArgs>(args?: SelectSubset<T, MbtiFindFirstOrThrowArgs<ExtArgs>>): Prisma__MbtiClient<$Result.GetResult<Prisma.$MbtiPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Mbtis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MbtiFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mbtis
     * const mbtis = await prisma.mbti.findMany()
     * 
     * // Get first 10 Mbtis
     * const mbtis = await prisma.mbti.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mbtiWithIdOnly = await prisma.mbti.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MbtiFindManyArgs>(args?: SelectSubset<T, MbtiFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MbtiPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Mbti.
     * @param {MbtiCreateArgs} args - Arguments to create a Mbti.
     * @example
     * // Create one Mbti
     * const Mbti = await prisma.mbti.create({
     *   data: {
     *     // ... data to create a Mbti
     *   }
     * })
     * 
     */
    create<T extends MbtiCreateArgs>(args: SelectSubset<T, MbtiCreateArgs<ExtArgs>>): Prisma__MbtiClient<$Result.GetResult<Prisma.$MbtiPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Mbtis.
     * @param {MbtiCreateManyArgs} args - Arguments to create many Mbtis.
     * @example
     * // Create many Mbtis
     * const mbti = await prisma.mbti.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MbtiCreateManyArgs>(args?: SelectSubset<T, MbtiCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Mbtis and returns the data saved in the database.
     * @param {MbtiCreateManyAndReturnArgs} args - Arguments to create many Mbtis.
     * @example
     * // Create many Mbtis
     * const mbti = await prisma.mbti.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Mbtis and only return the `id`
     * const mbtiWithIdOnly = await prisma.mbti.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MbtiCreateManyAndReturnArgs>(args?: SelectSubset<T, MbtiCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MbtiPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Mbti.
     * @param {MbtiDeleteArgs} args - Arguments to delete one Mbti.
     * @example
     * // Delete one Mbti
     * const Mbti = await prisma.mbti.delete({
     *   where: {
     *     // ... filter to delete one Mbti
     *   }
     * })
     * 
     */
    delete<T extends MbtiDeleteArgs>(args: SelectSubset<T, MbtiDeleteArgs<ExtArgs>>): Prisma__MbtiClient<$Result.GetResult<Prisma.$MbtiPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Mbti.
     * @param {MbtiUpdateArgs} args - Arguments to update one Mbti.
     * @example
     * // Update one Mbti
     * const mbti = await prisma.mbti.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MbtiUpdateArgs>(args: SelectSubset<T, MbtiUpdateArgs<ExtArgs>>): Prisma__MbtiClient<$Result.GetResult<Prisma.$MbtiPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Mbtis.
     * @param {MbtiDeleteManyArgs} args - Arguments to filter Mbtis to delete.
     * @example
     * // Delete a few Mbtis
     * const { count } = await prisma.mbti.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MbtiDeleteManyArgs>(args?: SelectSubset<T, MbtiDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mbtis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MbtiUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mbtis
     * const mbti = await prisma.mbti.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MbtiUpdateManyArgs>(args: SelectSubset<T, MbtiUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Mbti.
     * @param {MbtiUpsertArgs} args - Arguments to update or create a Mbti.
     * @example
     * // Update or create a Mbti
     * const mbti = await prisma.mbti.upsert({
     *   create: {
     *     // ... data to create a Mbti
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mbti we want to update
     *   }
     * })
     */
    upsert<T extends MbtiUpsertArgs>(args: SelectSubset<T, MbtiUpsertArgs<ExtArgs>>): Prisma__MbtiClient<$Result.GetResult<Prisma.$MbtiPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Mbtis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MbtiCountArgs} args - Arguments to filter Mbtis to count.
     * @example
     * // Count the number of Mbtis
     * const count = await prisma.mbti.count({
     *   where: {
     *     // ... the filter for the Mbtis we want to count
     *   }
     * })
    **/
    count<T extends MbtiCountArgs>(
      args?: Subset<T, MbtiCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MbtiCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mbti.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MbtiAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MbtiAggregateArgs>(args: Subset<T, MbtiAggregateArgs>): Prisma.PrismaPromise<GetMbtiAggregateType<T>>

    /**
     * Group by Mbti.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MbtiGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MbtiGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MbtiGroupByArgs['orderBy'] }
        : { orderBy?: MbtiGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MbtiGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMbtiGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Mbti model
   */
  readonly fields: MbtiFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Mbti.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MbtiClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Mbti$userArgs<ExtArgs> = {}>(args?: Subset<T, Mbti$userArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Mbti model
   */ 
  interface MbtiFieldRefs {
    readonly id: FieldRef<"Mbti", 'Int'>
    readonly name: FieldRef<"Mbti", 'String'>
    readonly createdAt: FieldRef<"Mbti", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Mbti findUnique
   */
  export type MbtiFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mbti
     */
    select?: MbtiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MbtiInclude<ExtArgs> | null
    /**
     * Filter, which Mbti to fetch.
     */
    where: MbtiWhereUniqueInput
  }

  /**
   * Mbti findUniqueOrThrow
   */
  export type MbtiFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mbti
     */
    select?: MbtiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MbtiInclude<ExtArgs> | null
    /**
     * Filter, which Mbti to fetch.
     */
    where: MbtiWhereUniqueInput
  }

  /**
   * Mbti findFirst
   */
  export type MbtiFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mbti
     */
    select?: MbtiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MbtiInclude<ExtArgs> | null
    /**
     * Filter, which Mbti to fetch.
     */
    where?: MbtiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mbtis to fetch.
     */
    orderBy?: MbtiOrderByWithRelationInput | MbtiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mbtis.
     */
    cursor?: MbtiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mbtis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mbtis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mbtis.
     */
    distinct?: MbtiScalarFieldEnum | MbtiScalarFieldEnum[]
  }

  /**
   * Mbti findFirstOrThrow
   */
  export type MbtiFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mbti
     */
    select?: MbtiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MbtiInclude<ExtArgs> | null
    /**
     * Filter, which Mbti to fetch.
     */
    where?: MbtiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mbtis to fetch.
     */
    orderBy?: MbtiOrderByWithRelationInput | MbtiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mbtis.
     */
    cursor?: MbtiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mbtis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mbtis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mbtis.
     */
    distinct?: MbtiScalarFieldEnum | MbtiScalarFieldEnum[]
  }

  /**
   * Mbti findMany
   */
  export type MbtiFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mbti
     */
    select?: MbtiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MbtiInclude<ExtArgs> | null
    /**
     * Filter, which Mbtis to fetch.
     */
    where?: MbtiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mbtis to fetch.
     */
    orderBy?: MbtiOrderByWithRelationInput | MbtiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Mbtis.
     */
    cursor?: MbtiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mbtis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mbtis.
     */
    skip?: number
    distinct?: MbtiScalarFieldEnum | MbtiScalarFieldEnum[]
  }

  /**
   * Mbti create
   */
  export type MbtiCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mbti
     */
    select?: MbtiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MbtiInclude<ExtArgs> | null
    /**
     * The data needed to create a Mbti.
     */
    data: XOR<MbtiCreateInput, MbtiUncheckedCreateInput>
  }

  /**
   * Mbti createMany
   */
  export type MbtiCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Mbtis.
     */
    data: MbtiCreateManyInput | MbtiCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Mbti createManyAndReturn
   */
  export type MbtiCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mbti
     */
    select?: MbtiSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Mbtis.
     */
    data: MbtiCreateManyInput | MbtiCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Mbti update
   */
  export type MbtiUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mbti
     */
    select?: MbtiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MbtiInclude<ExtArgs> | null
    /**
     * The data needed to update a Mbti.
     */
    data: XOR<MbtiUpdateInput, MbtiUncheckedUpdateInput>
    /**
     * Choose, which Mbti to update.
     */
    where: MbtiWhereUniqueInput
  }

  /**
   * Mbti updateMany
   */
  export type MbtiUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Mbtis.
     */
    data: XOR<MbtiUpdateManyMutationInput, MbtiUncheckedUpdateManyInput>
    /**
     * Filter which Mbtis to update
     */
    where?: MbtiWhereInput
  }

  /**
   * Mbti upsert
   */
  export type MbtiUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mbti
     */
    select?: MbtiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MbtiInclude<ExtArgs> | null
    /**
     * The filter to search for the Mbti to update in case it exists.
     */
    where: MbtiWhereUniqueInput
    /**
     * In case the Mbti found by the `where` argument doesn't exist, create a new Mbti with this data.
     */
    create: XOR<MbtiCreateInput, MbtiUncheckedCreateInput>
    /**
     * In case the Mbti was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MbtiUpdateInput, MbtiUncheckedUpdateInput>
  }

  /**
   * Mbti delete
   */
  export type MbtiDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mbti
     */
    select?: MbtiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MbtiInclude<ExtArgs> | null
    /**
     * Filter which Mbti to delete.
     */
    where: MbtiWhereUniqueInput
  }

  /**
   * Mbti deleteMany
   */
  export type MbtiDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mbtis to delete
     */
    where?: MbtiWhereInput
  }

  /**
   * Mbti.user
   */
  export type Mbti$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Mbti without action
   */
  export type MbtiDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mbti
     */
    select?: MbtiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MbtiInclude<ExtArgs> | null
  }


  /**
   * Model Alcohol
   */

  export type AggregateAlcohol = {
    _count: AlcoholCountAggregateOutputType | null
    _avg: AlcoholAvgAggregateOutputType | null
    _sum: AlcoholSumAggregateOutputType | null
    _min: AlcoholMinAggregateOutputType | null
    _max: AlcoholMaxAggregateOutputType | null
  }

  export type AlcoholAvgAggregateOutputType = {
    id: number | null
  }

  export type AlcoholSumAggregateOutputType = {
    id: number | null
  }

  export type AlcoholMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
  }

  export type AlcoholMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
  }

  export type AlcoholCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    _all: number
  }


  export type AlcoholAvgAggregateInputType = {
    id?: true
  }

  export type AlcoholSumAggregateInputType = {
    id?: true
  }

  export type AlcoholMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type AlcoholMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type AlcoholCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    _all?: true
  }

  export type AlcoholAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alcohol to aggregate.
     */
    where?: AlcoholWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alcohol to fetch.
     */
    orderBy?: AlcoholOrderByWithRelationInput | AlcoholOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlcoholWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alcohol from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alcohol.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Alcohol
    **/
    _count?: true | AlcoholCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlcoholAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlcoholSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlcoholMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlcoholMaxAggregateInputType
  }

  export type GetAlcoholAggregateType<T extends AlcoholAggregateArgs> = {
        [P in keyof T & keyof AggregateAlcohol]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlcohol[P]>
      : GetScalarType<T[P], AggregateAlcohol[P]>
  }




  export type AlcoholGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlcoholWhereInput
    orderBy?: AlcoholOrderByWithAggregationInput | AlcoholOrderByWithAggregationInput[]
    by: AlcoholScalarFieldEnum[] | AlcoholScalarFieldEnum
    having?: AlcoholScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlcoholCountAggregateInputType | true
    _avg?: AlcoholAvgAggregateInputType
    _sum?: AlcoholSumAggregateInputType
    _min?: AlcoholMinAggregateInputType
    _max?: AlcoholMaxAggregateInputType
  }

  export type AlcoholGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    _count: AlcoholCountAggregateOutputType | null
    _avg: AlcoholAvgAggregateOutputType | null
    _sum: AlcoholSumAggregateOutputType | null
    _min: AlcoholMinAggregateOutputType | null
    _max: AlcoholMaxAggregateOutputType | null
  }

  type GetAlcoholGroupByPayload<T extends AlcoholGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlcoholGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlcoholGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlcoholGroupByOutputType[P]>
            : GetScalarType<T[P], AlcoholGroupByOutputType[P]>
        }
      >
    >


  export type AlcoholSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    user?: boolean | Alcohol$userArgs<ExtArgs>
    _count?: boolean | AlcoholCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alcohol"]>

  export type AlcoholSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["alcohol"]>

  export type AlcoholSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }

  export type AlcoholInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Alcohol$userArgs<ExtArgs>
    _count?: boolean | AlcoholCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AlcoholIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AlcoholPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Alcohol"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createdAt: Date
    }, ExtArgs["result"]["alcohol"]>
    composites: {}
  }

  type AlcoholGetPayload<S extends boolean | null | undefined | AlcoholDefaultArgs> = $Result.GetResult<Prisma.$AlcoholPayload, S>

  type AlcoholCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AlcoholFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AlcoholCountAggregateInputType | true
    }

  export interface AlcoholDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Alcohol'], meta: { name: 'Alcohol' } }
    /**
     * Find zero or one Alcohol that matches the filter.
     * @param {AlcoholFindUniqueArgs} args - Arguments to find a Alcohol
     * @example
     * // Get one Alcohol
     * const alcohol = await prisma.alcohol.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlcoholFindUniqueArgs>(args: SelectSubset<T, AlcoholFindUniqueArgs<ExtArgs>>): Prisma__AlcoholClient<$Result.GetResult<Prisma.$AlcoholPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Alcohol that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AlcoholFindUniqueOrThrowArgs} args - Arguments to find a Alcohol
     * @example
     * // Get one Alcohol
     * const alcohol = await prisma.alcohol.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlcoholFindUniqueOrThrowArgs>(args: SelectSubset<T, AlcoholFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlcoholClient<$Result.GetResult<Prisma.$AlcoholPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Alcohol that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlcoholFindFirstArgs} args - Arguments to find a Alcohol
     * @example
     * // Get one Alcohol
     * const alcohol = await prisma.alcohol.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlcoholFindFirstArgs>(args?: SelectSubset<T, AlcoholFindFirstArgs<ExtArgs>>): Prisma__AlcoholClient<$Result.GetResult<Prisma.$AlcoholPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Alcohol that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlcoholFindFirstOrThrowArgs} args - Arguments to find a Alcohol
     * @example
     * // Get one Alcohol
     * const alcohol = await prisma.alcohol.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlcoholFindFirstOrThrowArgs>(args?: SelectSubset<T, AlcoholFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlcoholClient<$Result.GetResult<Prisma.$AlcoholPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Alcohol that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlcoholFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alcohol
     * const alcohol = await prisma.alcohol.findMany()
     * 
     * // Get first 10 Alcohol
     * const alcohol = await prisma.alcohol.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alcoholWithIdOnly = await prisma.alcohol.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlcoholFindManyArgs>(args?: SelectSubset<T, AlcoholFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlcoholPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Alcohol.
     * @param {AlcoholCreateArgs} args - Arguments to create a Alcohol.
     * @example
     * // Create one Alcohol
     * const Alcohol = await prisma.alcohol.create({
     *   data: {
     *     // ... data to create a Alcohol
     *   }
     * })
     * 
     */
    create<T extends AlcoholCreateArgs>(args: SelectSubset<T, AlcoholCreateArgs<ExtArgs>>): Prisma__AlcoholClient<$Result.GetResult<Prisma.$AlcoholPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Alcohol.
     * @param {AlcoholCreateManyArgs} args - Arguments to create many Alcohol.
     * @example
     * // Create many Alcohol
     * const alcohol = await prisma.alcohol.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlcoholCreateManyArgs>(args?: SelectSubset<T, AlcoholCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Alcohol and returns the data saved in the database.
     * @param {AlcoholCreateManyAndReturnArgs} args - Arguments to create many Alcohol.
     * @example
     * // Create many Alcohol
     * const alcohol = await prisma.alcohol.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Alcohol and only return the `id`
     * const alcoholWithIdOnly = await prisma.alcohol.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AlcoholCreateManyAndReturnArgs>(args?: SelectSubset<T, AlcoholCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlcoholPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Alcohol.
     * @param {AlcoholDeleteArgs} args - Arguments to delete one Alcohol.
     * @example
     * // Delete one Alcohol
     * const Alcohol = await prisma.alcohol.delete({
     *   where: {
     *     // ... filter to delete one Alcohol
     *   }
     * })
     * 
     */
    delete<T extends AlcoholDeleteArgs>(args: SelectSubset<T, AlcoholDeleteArgs<ExtArgs>>): Prisma__AlcoholClient<$Result.GetResult<Prisma.$AlcoholPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Alcohol.
     * @param {AlcoholUpdateArgs} args - Arguments to update one Alcohol.
     * @example
     * // Update one Alcohol
     * const alcohol = await prisma.alcohol.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlcoholUpdateArgs>(args: SelectSubset<T, AlcoholUpdateArgs<ExtArgs>>): Prisma__AlcoholClient<$Result.GetResult<Prisma.$AlcoholPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Alcohol.
     * @param {AlcoholDeleteManyArgs} args - Arguments to filter Alcohol to delete.
     * @example
     * // Delete a few Alcohol
     * const { count } = await prisma.alcohol.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlcoholDeleteManyArgs>(args?: SelectSubset<T, AlcoholDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alcohol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlcoholUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alcohol
     * const alcohol = await prisma.alcohol.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlcoholUpdateManyArgs>(args: SelectSubset<T, AlcoholUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Alcohol.
     * @param {AlcoholUpsertArgs} args - Arguments to update or create a Alcohol.
     * @example
     * // Update or create a Alcohol
     * const alcohol = await prisma.alcohol.upsert({
     *   create: {
     *     // ... data to create a Alcohol
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alcohol we want to update
     *   }
     * })
     */
    upsert<T extends AlcoholUpsertArgs>(args: SelectSubset<T, AlcoholUpsertArgs<ExtArgs>>): Prisma__AlcoholClient<$Result.GetResult<Prisma.$AlcoholPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Alcohol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlcoholCountArgs} args - Arguments to filter Alcohol to count.
     * @example
     * // Count the number of Alcohol
     * const count = await prisma.alcohol.count({
     *   where: {
     *     // ... the filter for the Alcohol we want to count
     *   }
     * })
    **/
    count<T extends AlcoholCountArgs>(
      args?: Subset<T, AlcoholCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlcoholCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alcohol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlcoholAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlcoholAggregateArgs>(args: Subset<T, AlcoholAggregateArgs>): Prisma.PrismaPromise<GetAlcoholAggregateType<T>>

    /**
     * Group by Alcohol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlcoholGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlcoholGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlcoholGroupByArgs['orderBy'] }
        : { orderBy?: AlcoholGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlcoholGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlcoholGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Alcohol model
   */
  readonly fields: AlcoholFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Alcohol.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlcoholClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Alcohol$userArgs<ExtArgs> = {}>(args?: Subset<T, Alcohol$userArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Alcohol model
   */ 
  interface AlcoholFieldRefs {
    readonly id: FieldRef<"Alcohol", 'Int'>
    readonly name: FieldRef<"Alcohol", 'String'>
    readonly createdAt: FieldRef<"Alcohol", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Alcohol findUnique
   */
  export type AlcoholFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alcohol
     */
    select?: AlcoholSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlcoholInclude<ExtArgs> | null
    /**
     * Filter, which Alcohol to fetch.
     */
    where: AlcoholWhereUniqueInput
  }

  /**
   * Alcohol findUniqueOrThrow
   */
  export type AlcoholFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alcohol
     */
    select?: AlcoholSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlcoholInclude<ExtArgs> | null
    /**
     * Filter, which Alcohol to fetch.
     */
    where: AlcoholWhereUniqueInput
  }

  /**
   * Alcohol findFirst
   */
  export type AlcoholFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alcohol
     */
    select?: AlcoholSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlcoholInclude<ExtArgs> | null
    /**
     * Filter, which Alcohol to fetch.
     */
    where?: AlcoholWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alcohol to fetch.
     */
    orderBy?: AlcoholOrderByWithRelationInput | AlcoholOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alcohol.
     */
    cursor?: AlcoholWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alcohol from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alcohol.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alcohol.
     */
    distinct?: AlcoholScalarFieldEnum | AlcoholScalarFieldEnum[]
  }

  /**
   * Alcohol findFirstOrThrow
   */
  export type AlcoholFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alcohol
     */
    select?: AlcoholSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlcoholInclude<ExtArgs> | null
    /**
     * Filter, which Alcohol to fetch.
     */
    where?: AlcoholWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alcohol to fetch.
     */
    orderBy?: AlcoholOrderByWithRelationInput | AlcoholOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alcohol.
     */
    cursor?: AlcoholWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alcohol from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alcohol.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alcohol.
     */
    distinct?: AlcoholScalarFieldEnum | AlcoholScalarFieldEnum[]
  }

  /**
   * Alcohol findMany
   */
  export type AlcoholFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alcohol
     */
    select?: AlcoholSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlcoholInclude<ExtArgs> | null
    /**
     * Filter, which Alcohol to fetch.
     */
    where?: AlcoholWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alcohol to fetch.
     */
    orderBy?: AlcoholOrderByWithRelationInput | AlcoholOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Alcohol.
     */
    cursor?: AlcoholWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alcohol from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alcohol.
     */
    skip?: number
    distinct?: AlcoholScalarFieldEnum | AlcoholScalarFieldEnum[]
  }

  /**
   * Alcohol create
   */
  export type AlcoholCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alcohol
     */
    select?: AlcoholSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlcoholInclude<ExtArgs> | null
    /**
     * The data needed to create a Alcohol.
     */
    data: XOR<AlcoholCreateInput, AlcoholUncheckedCreateInput>
  }

  /**
   * Alcohol createMany
   */
  export type AlcoholCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Alcohol.
     */
    data: AlcoholCreateManyInput | AlcoholCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Alcohol createManyAndReturn
   */
  export type AlcoholCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alcohol
     */
    select?: AlcoholSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Alcohol.
     */
    data: AlcoholCreateManyInput | AlcoholCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Alcohol update
   */
  export type AlcoholUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alcohol
     */
    select?: AlcoholSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlcoholInclude<ExtArgs> | null
    /**
     * The data needed to update a Alcohol.
     */
    data: XOR<AlcoholUpdateInput, AlcoholUncheckedUpdateInput>
    /**
     * Choose, which Alcohol to update.
     */
    where: AlcoholWhereUniqueInput
  }

  /**
   * Alcohol updateMany
   */
  export type AlcoholUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Alcohol.
     */
    data: XOR<AlcoholUpdateManyMutationInput, AlcoholUncheckedUpdateManyInput>
    /**
     * Filter which Alcohol to update
     */
    where?: AlcoholWhereInput
  }

  /**
   * Alcohol upsert
   */
  export type AlcoholUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alcohol
     */
    select?: AlcoholSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlcoholInclude<ExtArgs> | null
    /**
     * The filter to search for the Alcohol to update in case it exists.
     */
    where: AlcoholWhereUniqueInput
    /**
     * In case the Alcohol found by the `where` argument doesn't exist, create a new Alcohol with this data.
     */
    create: XOR<AlcoholCreateInput, AlcoholUncheckedCreateInput>
    /**
     * In case the Alcohol was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlcoholUpdateInput, AlcoholUncheckedUpdateInput>
  }

  /**
   * Alcohol delete
   */
  export type AlcoholDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alcohol
     */
    select?: AlcoholSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlcoholInclude<ExtArgs> | null
    /**
     * Filter which Alcohol to delete.
     */
    where: AlcoholWhereUniqueInput
  }

  /**
   * Alcohol deleteMany
   */
  export type AlcoholDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alcohol to delete
     */
    where?: AlcoholWhereInput
  }

  /**
   * Alcohol.user
   */
  export type Alcohol$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Alcohol without action
   */
  export type AlcoholDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alcohol
     */
    select?: AlcoholSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlcoholInclude<ExtArgs> | null
  }


  /**
   * Model University
   */

  export type AggregateUniversity = {
    _count: UniversityCountAggregateOutputType | null
    _avg: UniversityAvgAggregateOutputType | null
    _sum: UniversitySumAggregateOutputType | null
    _min: UniversityMinAggregateOutputType | null
    _max: UniversityMaxAggregateOutputType | null
  }

  export type UniversityAvgAggregateOutputType = {
    id: number | null
  }

  export type UniversitySumAggregateOutputType = {
    id: number | null
  }

  export type UniversityMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
  }

  export type UniversityMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
  }

  export type UniversityCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    _all: number
  }


  export type UniversityAvgAggregateInputType = {
    id?: true
  }

  export type UniversitySumAggregateInputType = {
    id?: true
  }

  export type UniversityMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type UniversityMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type UniversityCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    _all?: true
  }

  export type UniversityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which University to aggregate.
     */
    where?: UniversityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Universities to fetch.
     */
    orderBy?: UniversityOrderByWithRelationInput | UniversityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UniversityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Universities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Universities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Universities
    **/
    _count?: true | UniversityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UniversityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UniversitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UniversityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UniversityMaxAggregateInputType
  }

  export type GetUniversityAggregateType<T extends UniversityAggregateArgs> = {
        [P in keyof T & keyof AggregateUniversity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUniversity[P]>
      : GetScalarType<T[P], AggregateUniversity[P]>
  }




  export type UniversityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UniversityWhereInput
    orderBy?: UniversityOrderByWithAggregationInput | UniversityOrderByWithAggregationInput[]
    by: UniversityScalarFieldEnum[] | UniversityScalarFieldEnum
    having?: UniversityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UniversityCountAggregateInputType | true
    _avg?: UniversityAvgAggregateInputType
    _sum?: UniversitySumAggregateInputType
    _min?: UniversityMinAggregateInputType
    _max?: UniversityMaxAggregateInputType
  }

  export type UniversityGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    _count: UniversityCountAggregateOutputType | null
    _avg: UniversityAvgAggregateOutputType | null
    _sum: UniversitySumAggregateOutputType | null
    _min: UniversityMinAggregateOutputType | null
    _max: UniversityMaxAggregateOutputType | null
  }

  type GetUniversityGroupByPayload<T extends UniversityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UniversityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UniversityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UniversityGroupByOutputType[P]>
            : GetScalarType<T[P], UniversityGroupByOutputType[P]>
        }
      >
    >


  export type UniversitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    user?: boolean | University$userArgs<ExtArgs>
    _count?: boolean | UniversityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["university"]>

  export type UniversitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["university"]>

  export type UniversitySelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }

  export type UniversityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | University$userArgs<ExtArgs>
    _count?: boolean | UniversityCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UniversityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UniversityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "University"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createdAt: Date
    }, ExtArgs["result"]["university"]>
    composites: {}
  }

  type UniversityGetPayload<S extends boolean | null | undefined | UniversityDefaultArgs> = $Result.GetResult<Prisma.$UniversityPayload, S>

  type UniversityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UniversityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UniversityCountAggregateInputType | true
    }

  export interface UniversityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['University'], meta: { name: 'University' } }
    /**
     * Find zero or one University that matches the filter.
     * @param {UniversityFindUniqueArgs} args - Arguments to find a University
     * @example
     * // Get one University
     * const university = await prisma.university.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UniversityFindUniqueArgs>(args: SelectSubset<T, UniversityFindUniqueArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one University that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UniversityFindUniqueOrThrowArgs} args - Arguments to find a University
     * @example
     * // Get one University
     * const university = await prisma.university.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UniversityFindUniqueOrThrowArgs>(args: SelectSubset<T, UniversityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first University that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityFindFirstArgs} args - Arguments to find a University
     * @example
     * // Get one University
     * const university = await prisma.university.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UniversityFindFirstArgs>(args?: SelectSubset<T, UniversityFindFirstArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first University that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityFindFirstOrThrowArgs} args - Arguments to find a University
     * @example
     * // Get one University
     * const university = await prisma.university.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UniversityFindFirstOrThrowArgs>(args?: SelectSubset<T, UniversityFindFirstOrThrowArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Universities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Universities
     * const universities = await prisma.university.findMany()
     * 
     * // Get first 10 Universities
     * const universities = await prisma.university.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const universityWithIdOnly = await prisma.university.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UniversityFindManyArgs>(args?: SelectSubset<T, UniversityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a University.
     * @param {UniversityCreateArgs} args - Arguments to create a University.
     * @example
     * // Create one University
     * const University = await prisma.university.create({
     *   data: {
     *     // ... data to create a University
     *   }
     * })
     * 
     */
    create<T extends UniversityCreateArgs>(args: SelectSubset<T, UniversityCreateArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Universities.
     * @param {UniversityCreateManyArgs} args - Arguments to create many Universities.
     * @example
     * // Create many Universities
     * const university = await prisma.university.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UniversityCreateManyArgs>(args?: SelectSubset<T, UniversityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Universities and returns the data saved in the database.
     * @param {UniversityCreateManyAndReturnArgs} args - Arguments to create many Universities.
     * @example
     * // Create many Universities
     * const university = await prisma.university.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Universities and only return the `id`
     * const universityWithIdOnly = await prisma.university.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UniversityCreateManyAndReturnArgs>(args?: SelectSubset<T, UniversityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a University.
     * @param {UniversityDeleteArgs} args - Arguments to delete one University.
     * @example
     * // Delete one University
     * const University = await prisma.university.delete({
     *   where: {
     *     // ... filter to delete one University
     *   }
     * })
     * 
     */
    delete<T extends UniversityDeleteArgs>(args: SelectSubset<T, UniversityDeleteArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one University.
     * @param {UniversityUpdateArgs} args - Arguments to update one University.
     * @example
     * // Update one University
     * const university = await prisma.university.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UniversityUpdateArgs>(args: SelectSubset<T, UniversityUpdateArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Universities.
     * @param {UniversityDeleteManyArgs} args - Arguments to filter Universities to delete.
     * @example
     * // Delete a few Universities
     * const { count } = await prisma.university.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UniversityDeleteManyArgs>(args?: SelectSubset<T, UniversityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Universities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Universities
     * const university = await prisma.university.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UniversityUpdateManyArgs>(args: SelectSubset<T, UniversityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one University.
     * @param {UniversityUpsertArgs} args - Arguments to update or create a University.
     * @example
     * // Update or create a University
     * const university = await prisma.university.upsert({
     *   create: {
     *     // ... data to create a University
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the University we want to update
     *   }
     * })
     */
    upsert<T extends UniversityUpsertArgs>(args: SelectSubset<T, UniversityUpsertArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Universities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityCountArgs} args - Arguments to filter Universities to count.
     * @example
     * // Count the number of Universities
     * const count = await prisma.university.count({
     *   where: {
     *     // ... the filter for the Universities we want to count
     *   }
     * })
    **/
    count<T extends UniversityCountArgs>(
      args?: Subset<T, UniversityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UniversityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a University.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UniversityAggregateArgs>(args: Subset<T, UniversityAggregateArgs>): Prisma.PrismaPromise<GetUniversityAggregateType<T>>

    /**
     * Group by University.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UniversityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UniversityGroupByArgs['orderBy'] }
        : { orderBy?: UniversityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UniversityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUniversityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the University model
   */
  readonly fields: UniversityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for University.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UniversityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends University$userArgs<ExtArgs> = {}>(args?: Subset<T, University$userArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the University model
   */ 
  interface UniversityFieldRefs {
    readonly id: FieldRef<"University", 'Int'>
    readonly name: FieldRef<"University", 'String'>
    readonly createdAt: FieldRef<"University", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * University findUnique
   */
  export type UniversityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * Filter, which University to fetch.
     */
    where: UniversityWhereUniqueInput
  }

  /**
   * University findUniqueOrThrow
   */
  export type UniversityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * Filter, which University to fetch.
     */
    where: UniversityWhereUniqueInput
  }

  /**
   * University findFirst
   */
  export type UniversityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * Filter, which University to fetch.
     */
    where?: UniversityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Universities to fetch.
     */
    orderBy?: UniversityOrderByWithRelationInput | UniversityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Universities.
     */
    cursor?: UniversityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Universities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Universities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Universities.
     */
    distinct?: UniversityScalarFieldEnum | UniversityScalarFieldEnum[]
  }

  /**
   * University findFirstOrThrow
   */
  export type UniversityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * Filter, which University to fetch.
     */
    where?: UniversityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Universities to fetch.
     */
    orderBy?: UniversityOrderByWithRelationInput | UniversityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Universities.
     */
    cursor?: UniversityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Universities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Universities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Universities.
     */
    distinct?: UniversityScalarFieldEnum | UniversityScalarFieldEnum[]
  }

  /**
   * University findMany
   */
  export type UniversityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * Filter, which Universities to fetch.
     */
    where?: UniversityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Universities to fetch.
     */
    orderBy?: UniversityOrderByWithRelationInput | UniversityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Universities.
     */
    cursor?: UniversityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Universities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Universities.
     */
    skip?: number
    distinct?: UniversityScalarFieldEnum | UniversityScalarFieldEnum[]
  }

  /**
   * University create
   */
  export type UniversityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * The data needed to create a University.
     */
    data: XOR<UniversityCreateInput, UniversityUncheckedCreateInput>
  }

  /**
   * University createMany
   */
  export type UniversityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Universities.
     */
    data: UniversityCreateManyInput | UniversityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * University createManyAndReturn
   */
  export type UniversityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Universities.
     */
    data: UniversityCreateManyInput | UniversityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * University update
   */
  export type UniversityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * The data needed to update a University.
     */
    data: XOR<UniversityUpdateInput, UniversityUncheckedUpdateInput>
    /**
     * Choose, which University to update.
     */
    where: UniversityWhereUniqueInput
  }

  /**
   * University updateMany
   */
  export type UniversityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Universities.
     */
    data: XOR<UniversityUpdateManyMutationInput, UniversityUncheckedUpdateManyInput>
    /**
     * Filter which Universities to update
     */
    where?: UniversityWhereInput
  }

  /**
   * University upsert
   */
  export type UniversityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * The filter to search for the University to update in case it exists.
     */
    where: UniversityWhereUniqueInput
    /**
     * In case the University found by the `where` argument doesn't exist, create a new University with this data.
     */
    create: XOR<UniversityCreateInput, UniversityUncheckedCreateInput>
    /**
     * In case the University was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UniversityUpdateInput, UniversityUncheckedUpdateInput>
  }

  /**
   * University delete
   */
  export type UniversityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * Filter which University to delete.
     */
    where: UniversityWhereUniqueInput
  }

  /**
   * University deleteMany
   */
  export type UniversityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Universities to delete
     */
    where?: UniversityWhereInput
  }

  /**
   * University.user
   */
  export type University$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * University without action
   */
  export type UniversityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityInclude<ExtArgs> | null
  }


  /**
   * Model UserMatching
   */

  export type AggregateUserMatching = {
    _count: UserMatchingCountAggregateOutputType | null
    _avg: UserMatchingAvgAggregateOutputType | null
    _sum: UserMatchingSumAggregateOutputType | null
    _min: UserMatchingMinAggregateOutputType | null
    _max: UserMatchingMaxAggregateOutputType | null
  }

  export type UserMatchingAvgAggregateOutputType = {
    id: number | null
    callerUserId: number | null
    calleeUserId: number | null
    matchingCategoryId: number | null
  }

  export type UserMatchingSumAggregateOutputType = {
    id: number | null
    callerUserId: number | null
    calleeUserId: number | null
    matchingCategoryId: number | null
  }

  export type UserMatchingMinAggregateOutputType = {
    id: number | null
    callerUserId: number | null
    calleeUserId: number | null
    comment: string | null
    matchingCategoryId: number | null
    createdAt: Date | null
  }

  export type UserMatchingMaxAggregateOutputType = {
    id: number | null
    callerUserId: number | null
    calleeUserId: number | null
    comment: string | null
    matchingCategoryId: number | null
    createdAt: Date | null
  }

  export type UserMatchingCountAggregateOutputType = {
    id: number
    callerUserId: number
    calleeUserId: number
    comment: number
    matchingCategoryId: number
    createdAt: number
    _all: number
  }


  export type UserMatchingAvgAggregateInputType = {
    id?: true
    callerUserId?: true
    calleeUserId?: true
    matchingCategoryId?: true
  }

  export type UserMatchingSumAggregateInputType = {
    id?: true
    callerUserId?: true
    calleeUserId?: true
    matchingCategoryId?: true
  }

  export type UserMatchingMinAggregateInputType = {
    id?: true
    callerUserId?: true
    calleeUserId?: true
    comment?: true
    matchingCategoryId?: true
    createdAt?: true
  }

  export type UserMatchingMaxAggregateInputType = {
    id?: true
    callerUserId?: true
    calleeUserId?: true
    comment?: true
    matchingCategoryId?: true
    createdAt?: true
  }

  export type UserMatchingCountAggregateInputType = {
    id?: true
    callerUserId?: true
    calleeUserId?: true
    comment?: true
    matchingCategoryId?: true
    createdAt?: true
    _all?: true
  }

  export type UserMatchingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserMatching to aggregate.
     */
    where?: UserMatchingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMatchings to fetch.
     */
    orderBy?: UserMatchingOrderByWithRelationInput | UserMatchingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserMatchingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMatchings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMatchings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserMatchings
    **/
    _count?: true | UserMatchingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserMatchingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserMatchingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMatchingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMatchingMaxAggregateInputType
  }

  export type GetUserMatchingAggregateType<T extends UserMatchingAggregateArgs> = {
        [P in keyof T & keyof AggregateUserMatching]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserMatching[P]>
      : GetScalarType<T[P], AggregateUserMatching[P]>
  }




  export type UserMatchingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserMatchingWhereInput
    orderBy?: UserMatchingOrderByWithAggregationInput | UserMatchingOrderByWithAggregationInput[]
    by: UserMatchingScalarFieldEnum[] | UserMatchingScalarFieldEnum
    having?: UserMatchingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserMatchingCountAggregateInputType | true
    _avg?: UserMatchingAvgAggregateInputType
    _sum?: UserMatchingSumAggregateInputType
    _min?: UserMatchingMinAggregateInputType
    _max?: UserMatchingMaxAggregateInputType
  }

  export type UserMatchingGroupByOutputType = {
    id: number
    callerUserId: number
    calleeUserId: number
    comment: string
    matchingCategoryId: number
    createdAt: Date
    _count: UserMatchingCountAggregateOutputType | null
    _avg: UserMatchingAvgAggregateOutputType | null
    _sum: UserMatchingSumAggregateOutputType | null
    _min: UserMatchingMinAggregateOutputType | null
    _max: UserMatchingMaxAggregateOutputType | null
  }

  type GetUserMatchingGroupByPayload<T extends UserMatchingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserMatchingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserMatchingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserMatchingGroupByOutputType[P]>
            : GetScalarType<T[P], UserMatchingGroupByOutputType[P]>
        }
      >
    >


  export type UserMatchingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    callerUserId?: boolean
    calleeUserId?: boolean
    comment?: boolean
    matchingCategoryId?: boolean
    createdAt?: boolean
    callerUser?: boolean | UserDefaultArgs<ExtArgs>
    calleeUser?: boolean | UserDefaultArgs<ExtArgs>
    matchingCategory?: boolean | MatchingCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userMatching"]>

  export type UserMatchingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    callerUserId?: boolean
    calleeUserId?: boolean
    comment?: boolean
    matchingCategoryId?: boolean
    createdAt?: boolean
    callerUser?: boolean | UserDefaultArgs<ExtArgs>
    calleeUser?: boolean | UserDefaultArgs<ExtArgs>
    matchingCategory?: boolean | MatchingCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userMatching"]>

  export type UserMatchingSelectScalar = {
    id?: boolean
    callerUserId?: boolean
    calleeUserId?: boolean
    comment?: boolean
    matchingCategoryId?: boolean
    createdAt?: boolean
  }

  export type UserMatchingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    callerUser?: boolean | UserDefaultArgs<ExtArgs>
    calleeUser?: boolean | UserDefaultArgs<ExtArgs>
    matchingCategory?: boolean | MatchingCategoryDefaultArgs<ExtArgs>
  }
  export type UserMatchingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    callerUser?: boolean | UserDefaultArgs<ExtArgs>
    calleeUser?: boolean | UserDefaultArgs<ExtArgs>
    matchingCategory?: boolean | MatchingCategoryDefaultArgs<ExtArgs>
  }

  export type $UserMatchingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserMatching"
    objects: {
      callerUser: Prisma.$UserPayload<ExtArgs>
      calleeUser: Prisma.$UserPayload<ExtArgs>
      matchingCategory: Prisma.$MatchingCategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      callerUserId: number
      calleeUserId: number
      comment: string
      matchingCategoryId: number
      createdAt: Date
    }, ExtArgs["result"]["userMatching"]>
    composites: {}
  }

  type UserMatchingGetPayload<S extends boolean | null | undefined | UserMatchingDefaultArgs> = $Result.GetResult<Prisma.$UserMatchingPayload, S>

  type UserMatchingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserMatchingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserMatchingCountAggregateInputType | true
    }

  export interface UserMatchingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserMatching'], meta: { name: 'UserMatching' } }
    /**
     * Find zero or one UserMatching that matches the filter.
     * @param {UserMatchingFindUniqueArgs} args - Arguments to find a UserMatching
     * @example
     * // Get one UserMatching
     * const userMatching = await prisma.userMatching.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserMatchingFindUniqueArgs>(args: SelectSubset<T, UserMatchingFindUniqueArgs<ExtArgs>>): Prisma__UserMatchingClient<$Result.GetResult<Prisma.$UserMatchingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserMatching that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserMatchingFindUniqueOrThrowArgs} args - Arguments to find a UserMatching
     * @example
     * // Get one UserMatching
     * const userMatching = await prisma.userMatching.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserMatchingFindUniqueOrThrowArgs>(args: SelectSubset<T, UserMatchingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserMatchingClient<$Result.GetResult<Prisma.$UserMatchingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserMatching that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMatchingFindFirstArgs} args - Arguments to find a UserMatching
     * @example
     * // Get one UserMatching
     * const userMatching = await prisma.userMatching.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserMatchingFindFirstArgs>(args?: SelectSubset<T, UserMatchingFindFirstArgs<ExtArgs>>): Prisma__UserMatchingClient<$Result.GetResult<Prisma.$UserMatchingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserMatching that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMatchingFindFirstOrThrowArgs} args - Arguments to find a UserMatching
     * @example
     * // Get one UserMatching
     * const userMatching = await prisma.userMatching.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserMatchingFindFirstOrThrowArgs>(args?: SelectSubset<T, UserMatchingFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserMatchingClient<$Result.GetResult<Prisma.$UserMatchingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserMatchings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMatchingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserMatchings
     * const userMatchings = await prisma.userMatching.findMany()
     * 
     * // Get first 10 UserMatchings
     * const userMatchings = await prisma.userMatching.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userMatchingWithIdOnly = await prisma.userMatching.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserMatchingFindManyArgs>(args?: SelectSubset<T, UserMatchingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMatchingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserMatching.
     * @param {UserMatchingCreateArgs} args - Arguments to create a UserMatching.
     * @example
     * // Create one UserMatching
     * const UserMatching = await prisma.userMatching.create({
     *   data: {
     *     // ... data to create a UserMatching
     *   }
     * })
     * 
     */
    create<T extends UserMatchingCreateArgs>(args: SelectSubset<T, UserMatchingCreateArgs<ExtArgs>>): Prisma__UserMatchingClient<$Result.GetResult<Prisma.$UserMatchingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserMatchings.
     * @param {UserMatchingCreateManyArgs} args - Arguments to create many UserMatchings.
     * @example
     * // Create many UserMatchings
     * const userMatching = await prisma.userMatching.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserMatchingCreateManyArgs>(args?: SelectSubset<T, UserMatchingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserMatchings and returns the data saved in the database.
     * @param {UserMatchingCreateManyAndReturnArgs} args - Arguments to create many UserMatchings.
     * @example
     * // Create many UserMatchings
     * const userMatching = await prisma.userMatching.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserMatchings and only return the `id`
     * const userMatchingWithIdOnly = await prisma.userMatching.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserMatchingCreateManyAndReturnArgs>(args?: SelectSubset<T, UserMatchingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMatchingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserMatching.
     * @param {UserMatchingDeleteArgs} args - Arguments to delete one UserMatching.
     * @example
     * // Delete one UserMatching
     * const UserMatching = await prisma.userMatching.delete({
     *   where: {
     *     // ... filter to delete one UserMatching
     *   }
     * })
     * 
     */
    delete<T extends UserMatchingDeleteArgs>(args: SelectSubset<T, UserMatchingDeleteArgs<ExtArgs>>): Prisma__UserMatchingClient<$Result.GetResult<Prisma.$UserMatchingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserMatching.
     * @param {UserMatchingUpdateArgs} args - Arguments to update one UserMatching.
     * @example
     * // Update one UserMatching
     * const userMatching = await prisma.userMatching.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserMatchingUpdateArgs>(args: SelectSubset<T, UserMatchingUpdateArgs<ExtArgs>>): Prisma__UserMatchingClient<$Result.GetResult<Prisma.$UserMatchingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserMatchings.
     * @param {UserMatchingDeleteManyArgs} args - Arguments to filter UserMatchings to delete.
     * @example
     * // Delete a few UserMatchings
     * const { count } = await prisma.userMatching.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserMatchingDeleteManyArgs>(args?: SelectSubset<T, UserMatchingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserMatchings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMatchingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserMatchings
     * const userMatching = await prisma.userMatching.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserMatchingUpdateManyArgs>(args: SelectSubset<T, UserMatchingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserMatching.
     * @param {UserMatchingUpsertArgs} args - Arguments to update or create a UserMatching.
     * @example
     * // Update or create a UserMatching
     * const userMatching = await prisma.userMatching.upsert({
     *   create: {
     *     // ... data to create a UserMatching
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserMatching we want to update
     *   }
     * })
     */
    upsert<T extends UserMatchingUpsertArgs>(args: SelectSubset<T, UserMatchingUpsertArgs<ExtArgs>>): Prisma__UserMatchingClient<$Result.GetResult<Prisma.$UserMatchingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserMatchings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMatchingCountArgs} args - Arguments to filter UserMatchings to count.
     * @example
     * // Count the number of UserMatchings
     * const count = await prisma.userMatching.count({
     *   where: {
     *     // ... the filter for the UserMatchings we want to count
     *   }
     * })
    **/
    count<T extends UserMatchingCountArgs>(
      args?: Subset<T, UserMatchingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserMatchingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserMatching.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMatchingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserMatchingAggregateArgs>(args: Subset<T, UserMatchingAggregateArgs>): Prisma.PrismaPromise<GetUserMatchingAggregateType<T>>

    /**
     * Group by UserMatching.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMatchingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserMatchingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserMatchingGroupByArgs['orderBy'] }
        : { orderBy?: UserMatchingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserMatchingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserMatchingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserMatching model
   */
  readonly fields: UserMatchingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserMatching.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserMatchingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    callerUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    calleeUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    matchingCategory<T extends MatchingCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MatchingCategoryDefaultArgs<ExtArgs>>): Prisma__MatchingCategoryClient<$Result.GetResult<Prisma.$MatchingCategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserMatching model
   */ 
  interface UserMatchingFieldRefs {
    readonly id: FieldRef<"UserMatching", 'Int'>
    readonly callerUserId: FieldRef<"UserMatching", 'Int'>
    readonly calleeUserId: FieldRef<"UserMatching", 'Int'>
    readonly comment: FieldRef<"UserMatching", 'String'>
    readonly matchingCategoryId: FieldRef<"UserMatching", 'Int'>
    readonly createdAt: FieldRef<"UserMatching", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserMatching findUnique
   */
  export type UserMatchingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatching
     */
    select?: UserMatchingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchingInclude<ExtArgs> | null
    /**
     * Filter, which UserMatching to fetch.
     */
    where: UserMatchingWhereUniqueInput
  }

  /**
   * UserMatching findUniqueOrThrow
   */
  export type UserMatchingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatching
     */
    select?: UserMatchingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchingInclude<ExtArgs> | null
    /**
     * Filter, which UserMatching to fetch.
     */
    where: UserMatchingWhereUniqueInput
  }

  /**
   * UserMatching findFirst
   */
  export type UserMatchingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatching
     */
    select?: UserMatchingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchingInclude<ExtArgs> | null
    /**
     * Filter, which UserMatching to fetch.
     */
    where?: UserMatchingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMatchings to fetch.
     */
    orderBy?: UserMatchingOrderByWithRelationInput | UserMatchingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserMatchings.
     */
    cursor?: UserMatchingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMatchings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMatchings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserMatchings.
     */
    distinct?: UserMatchingScalarFieldEnum | UserMatchingScalarFieldEnum[]
  }

  /**
   * UserMatching findFirstOrThrow
   */
  export type UserMatchingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatching
     */
    select?: UserMatchingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchingInclude<ExtArgs> | null
    /**
     * Filter, which UserMatching to fetch.
     */
    where?: UserMatchingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMatchings to fetch.
     */
    orderBy?: UserMatchingOrderByWithRelationInput | UserMatchingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserMatchings.
     */
    cursor?: UserMatchingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMatchings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMatchings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserMatchings.
     */
    distinct?: UserMatchingScalarFieldEnum | UserMatchingScalarFieldEnum[]
  }

  /**
   * UserMatching findMany
   */
  export type UserMatchingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatching
     */
    select?: UserMatchingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchingInclude<ExtArgs> | null
    /**
     * Filter, which UserMatchings to fetch.
     */
    where?: UserMatchingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMatchings to fetch.
     */
    orderBy?: UserMatchingOrderByWithRelationInput | UserMatchingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserMatchings.
     */
    cursor?: UserMatchingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMatchings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMatchings.
     */
    skip?: number
    distinct?: UserMatchingScalarFieldEnum | UserMatchingScalarFieldEnum[]
  }

  /**
   * UserMatching create
   */
  export type UserMatchingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatching
     */
    select?: UserMatchingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchingInclude<ExtArgs> | null
    /**
     * The data needed to create a UserMatching.
     */
    data: XOR<UserMatchingCreateInput, UserMatchingUncheckedCreateInput>
  }

  /**
   * UserMatching createMany
   */
  export type UserMatchingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserMatchings.
     */
    data: UserMatchingCreateManyInput | UserMatchingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserMatching createManyAndReturn
   */
  export type UserMatchingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatching
     */
    select?: UserMatchingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserMatchings.
     */
    data: UserMatchingCreateManyInput | UserMatchingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserMatching update
   */
  export type UserMatchingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatching
     */
    select?: UserMatchingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchingInclude<ExtArgs> | null
    /**
     * The data needed to update a UserMatching.
     */
    data: XOR<UserMatchingUpdateInput, UserMatchingUncheckedUpdateInput>
    /**
     * Choose, which UserMatching to update.
     */
    where: UserMatchingWhereUniqueInput
  }

  /**
   * UserMatching updateMany
   */
  export type UserMatchingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserMatchings.
     */
    data: XOR<UserMatchingUpdateManyMutationInput, UserMatchingUncheckedUpdateManyInput>
    /**
     * Filter which UserMatchings to update
     */
    where?: UserMatchingWhereInput
  }

  /**
   * UserMatching upsert
   */
  export type UserMatchingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatching
     */
    select?: UserMatchingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchingInclude<ExtArgs> | null
    /**
     * The filter to search for the UserMatching to update in case it exists.
     */
    where: UserMatchingWhereUniqueInput
    /**
     * In case the UserMatching found by the `where` argument doesn't exist, create a new UserMatching with this data.
     */
    create: XOR<UserMatchingCreateInput, UserMatchingUncheckedCreateInput>
    /**
     * In case the UserMatching was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserMatchingUpdateInput, UserMatchingUncheckedUpdateInput>
  }

  /**
   * UserMatching delete
   */
  export type UserMatchingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatching
     */
    select?: UserMatchingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchingInclude<ExtArgs> | null
    /**
     * Filter which UserMatching to delete.
     */
    where: UserMatchingWhereUniqueInput
  }

  /**
   * UserMatching deleteMany
   */
  export type UserMatchingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserMatchings to delete
     */
    where?: UserMatchingWhereInput
  }

  /**
   * UserMatching without action
   */
  export type UserMatchingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatching
     */
    select?: UserMatchingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchingInclude<ExtArgs> | null
  }


  /**
   * Model MatchingCategory
   */

  export type AggregateMatchingCategory = {
    _count: MatchingCategoryCountAggregateOutputType | null
    _avg: MatchingCategoryAvgAggregateOutputType | null
    _sum: MatchingCategorySumAggregateOutputType | null
    _min: MatchingCategoryMinAggregateOutputType | null
    _max: MatchingCategoryMaxAggregateOutputType | null
  }

  export type MatchingCategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type MatchingCategorySumAggregateOutputType = {
    id: number | null
  }

  export type MatchingCategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
  }

  export type MatchingCategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
  }

  export type MatchingCategoryCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    _all: number
  }


  export type MatchingCategoryAvgAggregateInputType = {
    id?: true
  }

  export type MatchingCategorySumAggregateInputType = {
    id?: true
  }

  export type MatchingCategoryMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type MatchingCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type MatchingCategoryCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    _all?: true
  }

  export type MatchingCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchingCategory to aggregate.
     */
    where?: MatchingCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchingCategories to fetch.
     */
    orderBy?: MatchingCategoryOrderByWithRelationInput | MatchingCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchingCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchingCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchingCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MatchingCategories
    **/
    _count?: true | MatchingCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatchingCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatchingCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchingCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchingCategoryMaxAggregateInputType
  }

  export type GetMatchingCategoryAggregateType<T extends MatchingCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateMatchingCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatchingCategory[P]>
      : GetScalarType<T[P], AggregateMatchingCategory[P]>
  }




  export type MatchingCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchingCategoryWhereInput
    orderBy?: MatchingCategoryOrderByWithAggregationInput | MatchingCategoryOrderByWithAggregationInput[]
    by: MatchingCategoryScalarFieldEnum[] | MatchingCategoryScalarFieldEnum
    having?: MatchingCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchingCategoryCountAggregateInputType | true
    _avg?: MatchingCategoryAvgAggregateInputType
    _sum?: MatchingCategorySumAggregateInputType
    _min?: MatchingCategoryMinAggregateInputType
    _max?: MatchingCategoryMaxAggregateInputType
  }

  export type MatchingCategoryGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    _count: MatchingCategoryCountAggregateOutputType | null
    _avg: MatchingCategoryAvgAggregateOutputType | null
    _sum: MatchingCategorySumAggregateOutputType | null
    _min: MatchingCategoryMinAggregateOutputType | null
    _max: MatchingCategoryMaxAggregateOutputType | null
  }

  type GetMatchingCategoryGroupByPayload<T extends MatchingCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchingCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchingCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchingCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], MatchingCategoryGroupByOutputType[P]>
        }
      >
    >


  export type MatchingCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    user?: boolean | MatchingCategory$userArgs<ExtArgs>
    _count?: boolean | MatchingCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matchingCategory"]>

  export type MatchingCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["matchingCategory"]>

  export type MatchingCategorySelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }

  export type MatchingCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | MatchingCategory$userArgs<ExtArgs>
    _count?: boolean | MatchingCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MatchingCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MatchingCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MatchingCategory"
    objects: {
      user: Prisma.$UserMatchingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createdAt: Date
    }, ExtArgs["result"]["matchingCategory"]>
    composites: {}
  }

  type MatchingCategoryGetPayload<S extends boolean | null | undefined | MatchingCategoryDefaultArgs> = $Result.GetResult<Prisma.$MatchingCategoryPayload, S>

  type MatchingCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MatchingCategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MatchingCategoryCountAggregateInputType | true
    }

  export interface MatchingCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MatchingCategory'], meta: { name: 'MatchingCategory' } }
    /**
     * Find zero or one MatchingCategory that matches the filter.
     * @param {MatchingCategoryFindUniqueArgs} args - Arguments to find a MatchingCategory
     * @example
     * // Get one MatchingCategory
     * const matchingCategory = await prisma.matchingCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MatchingCategoryFindUniqueArgs>(args: SelectSubset<T, MatchingCategoryFindUniqueArgs<ExtArgs>>): Prisma__MatchingCategoryClient<$Result.GetResult<Prisma.$MatchingCategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MatchingCategory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MatchingCategoryFindUniqueOrThrowArgs} args - Arguments to find a MatchingCategory
     * @example
     * // Get one MatchingCategory
     * const matchingCategory = await prisma.matchingCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MatchingCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, MatchingCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MatchingCategoryClient<$Result.GetResult<Prisma.$MatchingCategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MatchingCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchingCategoryFindFirstArgs} args - Arguments to find a MatchingCategory
     * @example
     * // Get one MatchingCategory
     * const matchingCategory = await prisma.matchingCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MatchingCategoryFindFirstArgs>(args?: SelectSubset<T, MatchingCategoryFindFirstArgs<ExtArgs>>): Prisma__MatchingCategoryClient<$Result.GetResult<Prisma.$MatchingCategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MatchingCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchingCategoryFindFirstOrThrowArgs} args - Arguments to find a MatchingCategory
     * @example
     * // Get one MatchingCategory
     * const matchingCategory = await prisma.matchingCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MatchingCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, MatchingCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__MatchingCategoryClient<$Result.GetResult<Prisma.$MatchingCategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MatchingCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchingCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MatchingCategories
     * const matchingCategories = await prisma.matchingCategory.findMany()
     * 
     * // Get first 10 MatchingCategories
     * const matchingCategories = await prisma.matchingCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchingCategoryWithIdOnly = await prisma.matchingCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MatchingCategoryFindManyArgs>(args?: SelectSubset<T, MatchingCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchingCategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MatchingCategory.
     * @param {MatchingCategoryCreateArgs} args - Arguments to create a MatchingCategory.
     * @example
     * // Create one MatchingCategory
     * const MatchingCategory = await prisma.matchingCategory.create({
     *   data: {
     *     // ... data to create a MatchingCategory
     *   }
     * })
     * 
     */
    create<T extends MatchingCategoryCreateArgs>(args: SelectSubset<T, MatchingCategoryCreateArgs<ExtArgs>>): Prisma__MatchingCategoryClient<$Result.GetResult<Prisma.$MatchingCategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MatchingCategories.
     * @param {MatchingCategoryCreateManyArgs} args - Arguments to create many MatchingCategories.
     * @example
     * // Create many MatchingCategories
     * const matchingCategory = await prisma.matchingCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MatchingCategoryCreateManyArgs>(args?: SelectSubset<T, MatchingCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MatchingCategories and returns the data saved in the database.
     * @param {MatchingCategoryCreateManyAndReturnArgs} args - Arguments to create many MatchingCategories.
     * @example
     * // Create many MatchingCategories
     * const matchingCategory = await prisma.matchingCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MatchingCategories and only return the `id`
     * const matchingCategoryWithIdOnly = await prisma.matchingCategory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MatchingCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, MatchingCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchingCategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MatchingCategory.
     * @param {MatchingCategoryDeleteArgs} args - Arguments to delete one MatchingCategory.
     * @example
     * // Delete one MatchingCategory
     * const MatchingCategory = await prisma.matchingCategory.delete({
     *   where: {
     *     // ... filter to delete one MatchingCategory
     *   }
     * })
     * 
     */
    delete<T extends MatchingCategoryDeleteArgs>(args: SelectSubset<T, MatchingCategoryDeleteArgs<ExtArgs>>): Prisma__MatchingCategoryClient<$Result.GetResult<Prisma.$MatchingCategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MatchingCategory.
     * @param {MatchingCategoryUpdateArgs} args - Arguments to update one MatchingCategory.
     * @example
     * // Update one MatchingCategory
     * const matchingCategory = await prisma.matchingCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MatchingCategoryUpdateArgs>(args: SelectSubset<T, MatchingCategoryUpdateArgs<ExtArgs>>): Prisma__MatchingCategoryClient<$Result.GetResult<Prisma.$MatchingCategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MatchingCategories.
     * @param {MatchingCategoryDeleteManyArgs} args - Arguments to filter MatchingCategories to delete.
     * @example
     * // Delete a few MatchingCategories
     * const { count } = await prisma.matchingCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MatchingCategoryDeleteManyArgs>(args?: SelectSubset<T, MatchingCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MatchingCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchingCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MatchingCategories
     * const matchingCategory = await prisma.matchingCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MatchingCategoryUpdateManyArgs>(args: SelectSubset<T, MatchingCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MatchingCategory.
     * @param {MatchingCategoryUpsertArgs} args - Arguments to update or create a MatchingCategory.
     * @example
     * // Update or create a MatchingCategory
     * const matchingCategory = await prisma.matchingCategory.upsert({
     *   create: {
     *     // ... data to create a MatchingCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MatchingCategory we want to update
     *   }
     * })
     */
    upsert<T extends MatchingCategoryUpsertArgs>(args: SelectSubset<T, MatchingCategoryUpsertArgs<ExtArgs>>): Prisma__MatchingCategoryClient<$Result.GetResult<Prisma.$MatchingCategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MatchingCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchingCategoryCountArgs} args - Arguments to filter MatchingCategories to count.
     * @example
     * // Count the number of MatchingCategories
     * const count = await prisma.matchingCategory.count({
     *   where: {
     *     // ... the filter for the MatchingCategories we want to count
     *   }
     * })
    **/
    count<T extends MatchingCategoryCountArgs>(
      args?: Subset<T, MatchingCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchingCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MatchingCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchingCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchingCategoryAggregateArgs>(args: Subset<T, MatchingCategoryAggregateArgs>): Prisma.PrismaPromise<GetMatchingCategoryAggregateType<T>>

    /**
     * Group by MatchingCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchingCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchingCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchingCategoryGroupByArgs['orderBy'] }
        : { orderBy?: MatchingCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchingCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchingCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MatchingCategory model
   */
  readonly fields: MatchingCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MatchingCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatchingCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends MatchingCategory$userArgs<ExtArgs> = {}>(args?: Subset<T, MatchingCategory$userArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMatchingPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MatchingCategory model
   */ 
  interface MatchingCategoryFieldRefs {
    readonly id: FieldRef<"MatchingCategory", 'Int'>
    readonly name: FieldRef<"MatchingCategory", 'String'>
    readonly createdAt: FieldRef<"MatchingCategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MatchingCategory findUnique
   */
  export type MatchingCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingCategory
     */
    select?: MatchingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchingCategoryInclude<ExtArgs> | null
    /**
     * Filter, which MatchingCategory to fetch.
     */
    where: MatchingCategoryWhereUniqueInput
  }

  /**
   * MatchingCategory findUniqueOrThrow
   */
  export type MatchingCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingCategory
     */
    select?: MatchingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchingCategoryInclude<ExtArgs> | null
    /**
     * Filter, which MatchingCategory to fetch.
     */
    where: MatchingCategoryWhereUniqueInput
  }

  /**
   * MatchingCategory findFirst
   */
  export type MatchingCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingCategory
     */
    select?: MatchingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchingCategoryInclude<ExtArgs> | null
    /**
     * Filter, which MatchingCategory to fetch.
     */
    where?: MatchingCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchingCategories to fetch.
     */
    orderBy?: MatchingCategoryOrderByWithRelationInput | MatchingCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchingCategories.
     */
    cursor?: MatchingCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchingCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchingCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchingCategories.
     */
    distinct?: MatchingCategoryScalarFieldEnum | MatchingCategoryScalarFieldEnum[]
  }

  /**
   * MatchingCategory findFirstOrThrow
   */
  export type MatchingCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingCategory
     */
    select?: MatchingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchingCategoryInclude<ExtArgs> | null
    /**
     * Filter, which MatchingCategory to fetch.
     */
    where?: MatchingCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchingCategories to fetch.
     */
    orderBy?: MatchingCategoryOrderByWithRelationInput | MatchingCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchingCategories.
     */
    cursor?: MatchingCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchingCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchingCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchingCategories.
     */
    distinct?: MatchingCategoryScalarFieldEnum | MatchingCategoryScalarFieldEnum[]
  }

  /**
   * MatchingCategory findMany
   */
  export type MatchingCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingCategory
     */
    select?: MatchingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchingCategoryInclude<ExtArgs> | null
    /**
     * Filter, which MatchingCategories to fetch.
     */
    where?: MatchingCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchingCategories to fetch.
     */
    orderBy?: MatchingCategoryOrderByWithRelationInput | MatchingCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MatchingCategories.
     */
    cursor?: MatchingCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchingCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchingCategories.
     */
    skip?: number
    distinct?: MatchingCategoryScalarFieldEnum | MatchingCategoryScalarFieldEnum[]
  }

  /**
   * MatchingCategory create
   */
  export type MatchingCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingCategory
     */
    select?: MatchingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchingCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a MatchingCategory.
     */
    data: XOR<MatchingCategoryCreateInput, MatchingCategoryUncheckedCreateInput>
  }

  /**
   * MatchingCategory createMany
   */
  export type MatchingCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MatchingCategories.
     */
    data: MatchingCategoryCreateManyInput | MatchingCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MatchingCategory createManyAndReturn
   */
  export type MatchingCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingCategory
     */
    select?: MatchingCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MatchingCategories.
     */
    data: MatchingCategoryCreateManyInput | MatchingCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MatchingCategory update
   */
  export type MatchingCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingCategory
     */
    select?: MatchingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchingCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a MatchingCategory.
     */
    data: XOR<MatchingCategoryUpdateInput, MatchingCategoryUncheckedUpdateInput>
    /**
     * Choose, which MatchingCategory to update.
     */
    where: MatchingCategoryWhereUniqueInput
  }

  /**
   * MatchingCategory updateMany
   */
  export type MatchingCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MatchingCategories.
     */
    data: XOR<MatchingCategoryUpdateManyMutationInput, MatchingCategoryUncheckedUpdateManyInput>
    /**
     * Filter which MatchingCategories to update
     */
    where?: MatchingCategoryWhereInput
  }

  /**
   * MatchingCategory upsert
   */
  export type MatchingCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingCategory
     */
    select?: MatchingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchingCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the MatchingCategory to update in case it exists.
     */
    where: MatchingCategoryWhereUniqueInput
    /**
     * In case the MatchingCategory found by the `where` argument doesn't exist, create a new MatchingCategory with this data.
     */
    create: XOR<MatchingCategoryCreateInput, MatchingCategoryUncheckedCreateInput>
    /**
     * In case the MatchingCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchingCategoryUpdateInput, MatchingCategoryUncheckedUpdateInput>
  }

  /**
   * MatchingCategory delete
   */
  export type MatchingCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingCategory
     */
    select?: MatchingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchingCategoryInclude<ExtArgs> | null
    /**
     * Filter which MatchingCategory to delete.
     */
    where: MatchingCategoryWhereUniqueInput
  }

  /**
   * MatchingCategory deleteMany
   */
  export type MatchingCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchingCategories to delete
     */
    where?: MatchingCategoryWhereInput
  }

  /**
   * MatchingCategory.user
   */
  export type MatchingCategory$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatching
     */
    select?: UserMatchingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchingInclude<ExtArgs> | null
    where?: UserMatchingWhereInput
    orderBy?: UserMatchingOrderByWithRelationInput | UserMatchingOrderByWithRelationInput[]
    cursor?: UserMatchingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserMatchingScalarFieldEnum | UserMatchingScalarFieldEnum[]
  }

  /**
   * MatchingCategory without action
   */
  export type MatchingCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingCategory
     */
    select?: MatchingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchingCategoryInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    meeting?: boolean | Category$meetingArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meeting?: boolean | Category$meetingArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      meeting: Prisma.$MeetingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createdAt: Date
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meeting<T extends Category$meetingArgs<ExtArgs> = {}>(args?: Subset<T, Category$meetingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'Int'>
    readonly name: FieldRef<"Category", 'String'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.meeting
   */
  export type Category$meetingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingInclude<ExtArgs> | null
    where?: MeetingWhereInput
    orderBy?: MeetingOrderByWithRelationInput | MeetingOrderByWithRelationInput[]
    cursor?: MeetingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeetingScalarFieldEnum | MeetingScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Meeting
   */

  export type AggregateMeeting = {
    _count: MeetingCountAggregateOutputType | null
    _avg: MeetingAvgAggregateOutputType | null
    _sum: MeetingSumAggregateOutputType | null
    _min: MeetingMinAggregateOutputType | null
    _max: MeetingMaxAggregateOutputType | null
  }

  export type MeetingAvgAggregateOutputType = {
    id: number | null
    hostId: number | null
    categoryId: number | null
    maxPeople: number | null
  }

  export type MeetingSumAggregateOutputType = {
    id: number | null
    hostId: number | null
    categoryId: number | null
    maxPeople: number | null
  }

  export type MeetingMinAggregateOutputType = {
    id: number | null
    hostId: number | null
    categoryId: number | null
    meetingImageUrl: string | null
    location: string | null
    title: string | null
    keyword: string | null
    description: string | null
    maxPeople: number | null
    startTime: Date | null
    endTime: Date | null
    createdAt: Date | null
  }

  export type MeetingMaxAggregateOutputType = {
    id: number | null
    hostId: number | null
    categoryId: number | null
    meetingImageUrl: string | null
    location: string | null
    title: string | null
    keyword: string | null
    description: string | null
    maxPeople: number | null
    startTime: Date | null
    endTime: Date | null
    createdAt: Date | null
  }

  export type MeetingCountAggregateOutputType = {
    id: number
    hostId: number
    categoryId: number
    meetingImageUrl: number
    location: number
    title: number
    keyword: number
    description: number
    maxPeople: number
    startTime: number
    endTime: number
    createdAt: number
    _all: number
  }


  export type MeetingAvgAggregateInputType = {
    id?: true
    hostId?: true
    categoryId?: true
    maxPeople?: true
  }

  export type MeetingSumAggregateInputType = {
    id?: true
    hostId?: true
    categoryId?: true
    maxPeople?: true
  }

  export type MeetingMinAggregateInputType = {
    id?: true
    hostId?: true
    categoryId?: true
    meetingImageUrl?: true
    location?: true
    title?: true
    keyword?: true
    description?: true
    maxPeople?: true
    startTime?: true
    endTime?: true
    createdAt?: true
  }

  export type MeetingMaxAggregateInputType = {
    id?: true
    hostId?: true
    categoryId?: true
    meetingImageUrl?: true
    location?: true
    title?: true
    keyword?: true
    description?: true
    maxPeople?: true
    startTime?: true
    endTime?: true
    createdAt?: true
  }

  export type MeetingCountAggregateInputType = {
    id?: true
    hostId?: true
    categoryId?: true
    meetingImageUrl?: true
    location?: true
    title?: true
    keyword?: true
    description?: true
    maxPeople?: true
    startTime?: true
    endTime?: true
    createdAt?: true
    _all?: true
  }

  export type MeetingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Meeting to aggregate.
     */
    where?: MeetingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meetings to fetch.
     */
    orderBy?: MeetingOrderByWithRelationInput | MeetingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeetingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meetings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meetings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Meetings
    **/
    _count?: true | MeetingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MeetingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MeetingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeetingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeetingMaxAggregateInputType
  }

  export type GetMeetingAggregateType<T extends MeetingAggregateArgs> = {
        [P in keyof T & keyof AggregateMeeting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeeting[P]>
      : GetScalarType<T[P], AggregateMeeting[P]>
  }




  export type MeetingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetingWhereInput
    orderBy?: MeetingOrderByWithAggregationInput | MeetingOrderByWithAggregationInput[]
    by: MeetingScalarFieldEnum[] | MeetingScalarFieldEnum
    having?: MeetingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeetingCountAggregateInputType | true
    _avg?: MeetingAvgAggregateInputType
    _sum?: MeetingSumAggregateInputType
    _min?: MeetingMinAggregateInputType
    _max?: MeetingMaxAggregateInputType
  }

  export type MeetingGroupByOutputType = {
    id: number
    hostId: number
    categoryId: number
    meetingImageUrl: string | null
    location: string
    title: string
    keyword: string
    description: string
    maxPeople: number
    startTime: Date
    endTime: Date
    createdAt: Date
    _count: MeetingCountAggregateOutputType | null
    _avg: MeetingAvgAggregateOutputType | null
    _sum: MeetingSumAggregateOutputType | null
    _min: MeetingMinAggregateOutputType | null
    _max: MeetingMaxAggregateOutputType | null
  }

  type GetMeetingGroupByPayload<T extends MeetingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MeetingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeetingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeetingGroupByOutputType[P]>
            : GetScalarType<T[P], MeetingGroupByOutputType[P]>
        }
      >
    >


  export type MeetingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hostId?: boolean
    categoryId?: boolean
    meetingImageUrl?: boolean
    location?: boolean
    title?: boolean
    keyword?: boolean
    description?: boolean
    maxPeople?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
    meetingJoinUser?: boolean | Meeting$meetingJoinUserArgs<ExtArgs>
    host?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    _count?: boolean | MeetingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meeting"]>

  export type MeetingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hostId?: boolean
    categoryId?: boolean
    meetingImageUrl?: boolean
    location?: boolean
    title?: boolean
    keyword?: boolean
    description?: boolean
    maxPeople?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
    host?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meeting"]>

  export type MeetingSelectScalar = {
    id?: boolean
    hostId?: boolean
    categoryId?: boolean
    meetingImageUrl?: boolean
    location?: boolean
    title?: boolean
    keyword?: boolean
    description?: boolean
    maxPeople?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
  }

  export type MeetingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meetingJoinUser?: boolean | Meeting$meetingJoinUserArgs<ExtArgs>
    host?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    _count?: boolean | MeetingCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MeetingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    host?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }

  export type $MeetingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Meeting"
    objects: {
      meetingJoinUser: Prisma.$MeetingJoinUserPayload<ExtArgs>[]
      host: Prisma.$UserPayload<ExtArgs>
      category: Prisma.$CategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      hostId: number
      categoryId: number
      meetingImageUrl: string | null
      location: string
      title: string
      keyword: string
      description: string
      maxPeople: number
      startTime: Date
      endTime: Date
      createdAt: Date
    }, ExtArgs["result"]["meeting"]>
    composites: {}
  }

  type MeetingGetPayload<S extends boolean | null | undefined | MeetingDefaultArgs> = $Result.GetResult<Prisma.$MeetingPayload, S>

  type MeetingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MeetingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MeetingCountAggregateInputType | true
    }

  export interface MeetingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Meeting'], meta: { name: 'Meeting' } }
    /**
     * Find zero or one Meeting that matches the filter.
     * @param {MeetingFindUniqueArgs} args - Arguments to find a Meeting
     * @example
     * // Get one Meeting
     * const meeting = await prisma.meeting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MeetingFindUniqueArgs>(args: SelectSubset<T, MeetingFindUniqueArgs<ExtArgs>>): Prisma__MeetingClient<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Meeting that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MeetingFindUniqueOrThrowArgs} args - Arguments to find a Meeting
     * @example
     * // Get one Meeting
     * const meeting = await prisma.meeting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MeetingFindUniqueOrThrowArgs>(args: SelectSubset<T, MeetingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MeetingClient<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Meeting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingFindFirstArgs} args - Arguments to find a Meeting
     * @example
     * // Get one Meeting
     * const meeting = await prisma.meeting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MeetingFindFirstArgs>(args?: SelectSubset<T, MeetingFindFirstArgs<ExtArgs>>): Prisma__MeetingClient<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Meeting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingFindFirstOrThrowArgs} args - Arguments to find a Meeting
     * @example
     * // Get one Meeting
     * const meeting = await prisma.meeting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MeetingFindFirstOrThrowArgs>(args?: SelectSubset<T, MeetingFindFirstOrThrowArgs<ExtArgs>>): Prisma__MeetingClient<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Meetings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Meetings
     * const meetings = await prisma.meeting.findMany()
     * 
     * // Get first 10 Meetings
     * const meetings = await prisma.meeting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meetingWithIdOnly = await prisma.meeting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MeetingFindManyArgs>(args?: SelectSubset<T, MeetingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Meeting.
     * @param {MeetingCreateArgs} args - Arguments to create a Meeting.
     * @example
     * // Create one Meeting
     * const Meeting = await prisma.meeting.create({
     *   data: {
     *     // ... data to create a Meeting
     *   }
     * })
     * 
     */
    create<T extends MeetingCreateArgs>(args: SelectSubset<T, MeetingCreateArgs<ExtArgs>>): Prisma__MeetingClient<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Meetings.
     * @param {MeetingCreateManyArgs} args - Arguments to create many Meetings.
     * @example
     * // Create many Meetings
     * const meeting = await prisma.meeting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MeetingCreateManyArgs>(args?: SelectSubset<T, MeetingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Meetings and returns the data saved in the database.
     * @param {MeetingCreateManyAndReturnArgs} args - Arguments to create many Meetings.
     * @example
     * // Create many Meetings
     * const meeting = await prisma.meeting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Meetings and only return the `id`
     * const meetingWithIdOnly = await prisma.meeting.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MeetingCreateManyAndReturnArgs>(args?: SelectSubset<T, MeetingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Meeting.
     * @param {MeetingDeleteArgs} args - Arguments to delete one Meeting.
     * @example
     * // Delete one Meeting
     * const Meeting = await prisma.meeting.delete({
     *   where: {
     *     // ... filter to delete one Meeting
     *   }
     * })
     * 
     */
    delete<T extends MeetingDeleteArgs>(args: SelectSubset<T, MeetingDeleteArgs<ExtArgs>>): Prisma__MeetingClient<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Meeting.
     * @param {MeetingUpdateArgs} args - Arguments to update one Meeting.
     * @example
     * // Update one Meeting
     * const meeting = await prisma.meeting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MeetingUpdateArgs>(args: SelectSubset<T, MeetingUpdateArgs<ExtArgs>>): Prisma__MeetingClient<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Meetings.
     * @param {MeetingDeleteManyArgs} args - Arguments to filter Meetings to delete.
     * @example
     * // Delete a few Meetings
     * const { count } = await prisma.meeting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MeetingDeleteManyArgs>(args?: SelectSubset<T, MeetingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Meetings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Meetings
     * const meeting = await prisma.meeting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MeetingUpdateManyArgs>(args: SelectSubset<T, MeetingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Meeting.
     * @param {MeetingUpsertArgs} args - Arguments to update or create a Meeting.
     * @example
     * // Update or create a Meeting
     * const meeting = await prisma.meeting.upsert({
     *   create: {
     *     // ... data to create a Meeting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Meeting we want to update
     *   }
     * })
     */
    upsert<T extends MeetingUpsertArgs>(args: SelectSubset<T, MeetingUpsertArgs<ExtArgs>>): Prisma__MeetingClient<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Meetings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingCountArgs} args - Arguments to filter Meetings to count.
     * @example
     * // Count the number of Meetings
     * const count = await prisma.meeting.count({
     *   where: {
     *     // ... the filter for the Meetings we want to count
     *   }
     * })
    **/
    count<T extends MeetingCountArgs>(
      args?: Subset<T, MeetingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeetingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Meeting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeetingAggregateArgs>(args: Subset<T, MeetingAggregateArgs>): Prisma.PrismaPromise<GetMeetingAggregateType<T>>

    /**
     * Group by Meeting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeetingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeetingGroupByArgs['orderBy'] }
        : { orderBy?: MeetingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeetingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Meeting model
   */
  readonly fields: MeetingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Meeting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MeetingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meetingJoinUser<T extends Meeting$meetingJoinUserArgs<ExtArgs> = {}>(args?: Subset<T, Meeting$meetingJoinUserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingJoinUserPayload<ExtArgs>, T, "findMany"> | Null>
    host<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Meeting model
   */ 
  interface MeetingFieldRefs {
    readonly id: FieldRef<"Meeting", 'Int'>
    readonly hostId: FieldRef<"Meeting", 'Int'>
    readonly categoryId: FieldRef<"Meeting", 'Int'>
    readonly meetingImageUrl: FieldRef<"Meeting", 'String'>
    readonly location: FieldRef<"Meeting", 'String'>
    readonly title: FieldRef<"Meeting", 'String'>
    readonly keyword: FieldRef<"Meeting", 'String'>
    readonly description: FieldRef<"Meeting", 'String'>
    readonly maxPeople: FieldRef<"Meeting", 'Int'>
    readonly startTime: FieldRef<"Meeting", 'DateTime'>
    readonly endTime: FieldRef<"Meeting", 'DateTime'>
    readonly createdAt: FieldRef<"Meeting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Meeting findUnique
   */
  export type MeetingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingInclude<ExtArgs> | null
    /**
     * Filter, which Meeting to fetch.
     */
    where: MeetingWhereUniqueInput
  }

  /**
   * Meeting findUniqueOrThrow
   */
  export type MeetingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingInclude<ExtArgs> | null
    /**
     * Filter, which Meeting to fetch.
     */
    where: MeetingWhereUniqueInput
  }

  /**
   * Meeting findFirst
   */
  export type MeetingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingInclude<ExtArgs> | null
    /**
     * Filter, which Meeting to fetch.
     */
    where?: MeetingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meetings to fetch.
     */
    orderBy?: MeetingOrderByWithRelationInput | MeetingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Meetings.
     */
    cursor?: MeetingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meetings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meetings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Meetings.
     */
    distinct?: MeetingScalarFieldEnum | MeetingScalarFieldEnum[]
  }

  /**
   * Meeting findFirstOrThrow
   */
  export type MeetingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingInclude<ExtArgs> | null
    /**
     * Filter, which Meeting to fetch.
     */
    where?: MeetingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meetings to fetch.
     */
    orderBy?: MeetingOrderByWithRelationInput | MeetingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Meetings.
     */
    cursor?: MeetingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meetings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meetings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Meetings.
     */
    distinct?: MeetingScalarFieldEnum | MeetingScalarFieldEnum[]
  }

  /**
   * Meeting findMany
   */
  export type MeetingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingInclude<ExtArgs> | null
    /**
     * Filter, which Meetings to fetch.
     */
    where?: MeetingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meetings to fetch.
     */
    orderBy?: MeetingOrderByWithRelationInput | MeetingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Meetings.
     */
    cursor?: MeetingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meetings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meetings.
     */
    skip?: number
    distinct?: MeetingScalarFieldEnum | MeetingScalarFieldEnum[]
  }

  /**
   * Meeting create
   */
  export type MeetingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingInclude<ExtArgs> | null
    /**
     * The data needed to create a Meeting.
     */
    data: XOR<MeetingCreateInput, MeetingUncheckedCreateInput>
  }

  /**
   * Meeting createMany
   */
  export type MeetingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Meetings.
     */
    data: MeetingCreateManyInput | MeetingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Meeting createManyAndReturn
   */
  export type MeetingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Meetings.
     */
    data: MeetingCreateManyInput | MeetingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Meeting update
   */
  export type MeetingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingInclude<ExtArgs> | null
    /**
     * The data needed to update a Meeting.
     */
    data: XOR<MeetingUpdateInput, MeetingUncheckedUpdateInput>
    /**
     * Choose, which Meeting to update.
     */
    where: MeetingWhereUniqueInput
  }

  /**
   * Meeting updateMany
   */
  export type MeetingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Meetings.
     */
    data: XOR<MeetingUpdateManyMutationInput, MeetingUncheckedUpdateManyInput>
    /**
     * Filter which Meetings to update
     */
    where?: MeetingWhereInput
  }

  /**
   * Meeting upsert
   */
  export type MeetingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingInclude<ExtArgs> | null
    /**
     * The filter to search for the Meeting to update in case it exists.
     */
    where: MeetingWhereUniqueInput
    /**
     * In case the Meeting found by the `where` argument doesn't exist, create a new Meeting with this data.
     */
    create: XOR<MeetingCreateInput, MeetingUncheckedCreateInput>
    /**
     * In case the Meeting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeetingUpdateInput, MeetingUncheckedUpdateInput>
  }

  /**
   * Meeting delete
   */
  export type MeetingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingInclude<ExtArgs> | null
    /**
     * Filter which Meeting to delete.
     */
    where: MeetingWhereUniqueInput
  }

  /**
   * Meeting deleteMany
   */
  export type MeetingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Meetings to delete
     */
    where?: MeetingWhereInput
  }

  /**
   * Meeting.meetingJoinUser
   */
  export type Meeting$meetingJoinUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingJoinUser
     */
    select?: MeetingJoinUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingJoinUserInclude<ExtArgs> | null
    where?: MeetingJoinUserWhereInput
    orderBy?: MeetingJoinUserOrderByWithRelationInput | MeetingJoinUserOrderByWithRelationInput[]
    cursor?: MeetingJoinUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeetingJoinUserScalarFieldEnum | MeetingJoinUserScalarFieldEnum[]
  }

  /**
   * Meeting without action
   */
  export type MeetingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingInclude<ExtArgs> | null
  }


  /**
   * Model MeetingJoinUser
   */

  export type AggregateMeetingJoinUser = {
    _count: MeetingJoinUserCountAggregateOutputType | null
    _avg: MeetingJoinUserAvgAggregateOutputType | null
    _sum: MeetingJoinUserSumAggregateOutputType | null
    _min: MeetingJoinUserMinAggregateOutputType | null
    _max: MeetingJoinUserMaxAggregateOutputType | null
  }

  export type MeetingJoinUserAvgAggregateOutputType = {
    id: number | null
    meetingId: number | null
    userId: number | null
  }

  export type MeetingJoinUserSumAggregateOutputType = {
    id: number | null
    meetingId: number | null
    userId: number | null
  }

  export type MeetingJoinUserMinAggregateOutputType = {
    id: number | null
    meetingId: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeetingJoinUserMaxAggregateOutputType = {
    id: number | null
    meetingId: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeetingJoinUserCountAggregateOutputType = {
    id: number
    meetingId: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MeetingJoinUserAvgAggregateInputType = {
    id?: true
    meetingId?: true
    userId?: true
  }

  export type MeetingJoinUserSumAggregateInputType = {
    id?: true
    meetingId?: true
    userId?: true
  }

  export type MeetingJoinUserMinAggregateInputType = {
    id?: true
    meetingId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeetingJoinUserMaxAggregateInputType = {
    id?: true
    meetingId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeetingJoinUserCountAggregateInputType = {
    id?: true
    meetingId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MeetingJoinUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeetingJoinUser to aggregate.
     */
    where?: MeetingJoinUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingJoinUsers to fetch.
     */
    orderBy?: MeetingJoinUserOrderByWithRelationInput | MeetingJoinUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeetingJoinUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingJoinUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingJoinUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MeetingJoinUsers
    **/
    _count?: true | MeetingJoinUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MeetingJoinUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MeetingJoinUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeetingJoinUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeetingJoinUserMaxAggregateInputType
  }

  export type GetMeetingJoinUserAggregateType<T extends MeetingJoinUserAggregateArgs> = {
        [P in keyof T & keyof AggregateMeetingJoinUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeetingJoinUser[P]>
      : GetScalarType<T[P], AggregateMeetingJoinUser[P]>
  }




  export type MeetingJoinUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetingJoinUserWhereInput
    orderBy?: MeetingJoinUserOrderByWithAggregationInput | MeetingJoinUserOrderByWithAggregationInput[]
    by: MeetingJoinUserScalarFieldEnum[] | MeetingJoinUserScalarFieldEnum
    having?: MeetingJoinUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeetingJoinUserCountAggregateInputType | true
    _avg?: MeetingJoinUserAvgAggregateInputType
    _sum?: MeetingJoinUserSumAggregateInputType
    _min?: MeetingJoinUserMinAggregateInputType
    _max?: MeetingJoinUserMaxAggregateInputType
  }

  export type MeetingJoinUserGroupByOutputType = {
    id: number
    meetingId: number
    userId: number
    createdAt: Date
    updatedAt: Date
    _count: MeetingJoinUserCountAggregateOutputType | null
    _avg: MeetingJoinUserAvgAggregateOutputType | null
    _sum: MeetingJoinUserSumAggregateOutputType | null
    _min: MeetingJoinUserMinAggregateOutputType | null
    _max: MeetingJoinUserMaxAggregateOutputType | null
  }

  type GetMeetingJoinUserGroupByPayload<T extends MeetingJoinUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MeetingJoinUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeetingJoinUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeetingJoinUserGroupByOutputType[P]>
            : GetScalarType<T[P], MeetingJoinUserGroupByOutputType[P]>
        }
      >
    >


  export type MeetingJoinUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    meetingId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meeting?: boolean | MeetingDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meetingJoinUser"]>

  export type MeetingJoinUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    meetingId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meeting?: boolean | MeetingDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meetingJoinUser"]>

  export type MeetingJoinUserSelectScalar = {
    id?: boolean
    meetingId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MeetingJoinUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meeting?: boolean | MeetingDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MeetingJoinUserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meeting?: boolean | MeetingDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MeetingJoinUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MeetingJoinUser"
    objects: {
      meeting: Prisma.$MeetingPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      meetingId: number
      userId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["meetingJoinUser"]>
    composites: {}
  }

  type MeetingJoinUserGetPayload<S extends boolean | null | undefined | MeetingJoinUserDefaultArgs> = $Result.GetResult<Prisma.$MeetingJoinUserPayload, S>

  type MeetingJoinUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MeetingJoinUserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MeetingJoinUserCountAggregateInputType | true
    }

  export interface MeetingJoinUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MeetingJoinUser'], meta: { name: 'MeetingJoinUser' } }
    /**
     * Find zero or one MeetingJoinUser that matches the filter.
     * @param {MeetingJoinUserFindUniqueArgs} args - Arguments to find a MeetingJoinUser
     * @example
     * // Get one MeetingJoinUser
     * const meetingJoinUser = await prisma.meetingJoinUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MeetingJoinUserFindUniqueArgs>(args: SelectSubset<T, MeetingJoinUserFindUniqueArgs<ExtArgs>>): Prisma__MeetingJoinUserClient<$Result.GetResult<Prisma.$MeetingJoinUserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MeetingJoinUser that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MeetingJoinUserFindUniqueOrThrowArgs} args - Arguments to find a MeetingJoinUser
     * @example
     * // Get one MeetingJoinUser
     * const meetingJoinUser = await prisma.meetingJoinUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MeetingJoinUserFindUniqueOrThrowArgs>(args: SelectSubset<T, MeetingJoinUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MeetingJoinUserClient<$Result.GetResult<Prisma.$MeetingJoinUserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MeetingJoinUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingJoinUserFindFirstArgs} args - Arguments to find a MeetingJoinUser
     * @example
     * // Get one MeetingJoinUser
     * const meetingJoinUser = await prisma.meetingJoinUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MeetingJoinUserFindFirstArgs>(args?: SelectSubset<T, MeetingJoinUserFindFirstArgs<ExtArgs>>): Prisma__MeetingJoinUserClient<$Result.GetResult<Prisma.$MeetingJoinUserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MeetingJoinUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingJoinUserFindFirstOrThrowArgs} args - Arguments to find a MeetingJoinUser
     * @example
     * // Get one MeetingJoinUser
     * const meetingJoinUser = await prisma.meetingJoinUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MeetingJoinUserFindFirstOrThrowArgs>(args?: SelectSubset<T, MeetingJoinUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__MeetingJoinUserClient<$Result.GetResult<Prisma.$MeetingJoinUserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MeetingJoinUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingJoinUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MeetingJoinUsers
     * const meetingJoinUsers = await prisma.meetingJoinUser.findMany()
     * 
     * // Get first 10 MeetingJoinUsers
     * const meetingJoinUsers = await prisma.meetingJoinUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meetingJoinUserWithIdOnly = await prisma.meetingJoinUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MeetingJoinUserFindManyArgs>(args?: SelectSubset<T, MeetingJoinUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingJoinUserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MeetingJoinUser.
     * @param {MeetingJoinUserCreateArgs} args - Arguments to create a MeetingJoinUser.
     * @example
     * // Create one MeetingJoinUser
     * const MeetingJoinUser = await prisma.meetingJoinUser.create({
     *   data: {
     *     // ... data to create a MeetingJoinUser
     *   }
     * })
     * 
     */
    create<T extends MeetingJoinUserCreateArgs>(args: SelectSubset<T, MeetingJoinUserCreateArgs<ExtArgs>>): Prisma__MeetingJoinUserClient<$Result.GetResult<Prisma.$MeetingJoinUserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MeetingJoinUsers.
     * @param {MeetingJoinUserCreateManyArgs} args - Arguments to create many MeetingJoinUsers.
     * @example
     * // Create many MeetingJoinUsers
     * const meetingJoinUser = await prisma.meetingJoinUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MeetingJoinUserCreateManyArgs>(args?: SelectSubset<T, MeetingJoinUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MeetingJoinUsers and returns the data saved in the database.
     * @param {MeetingJoinUserCreateManyAndReturnArgs} args - Arguments to create many MeetingJoinUsers.
     * @example
     * // Create many MeetingJoinUsers
     * const meetingJoinUser = await prisma.meetingJoinUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MeetingJoinUsers and only return the `id`
     * const meetingJoinUserWithIdOnly = await prisma.meetingJoinUser.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MeetingJoinUserCreateManyAndReturnArgs>(args?: SelectSubset<T, MeetingJoinUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingJoinUserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MeetingJoinUser.
     * @param {MeetingJoinUserDeleteArgs} args - Arguments to delete one MeetingJoinUser.
     * @example
     * // Delete one MeetingJoinUser
     * const MeetingJoinUser = await prisma.meetingJoinUser.delete({
     *   where: {
     *     // ... filter to delete one MeetingJoinUser
     *   }
     * })
     * 
     */
    delete<T extends MeetingJoinUserDeleteArgs>(args: SelectSubset<T, MeetingJoinUserDeleteArgs<ExtArgs>>): Prisma__MeetingJoinUserClient<$Result.GetResult<Prisma.$MeetingJoinUserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MeetingJoinUser.
     * @param {MeetingJoinUserUpdateArgs} args - Arguments to update one MeetingJoinUser.
     * @example
     * // Update one MeetingJoinUser
     * const meetingJoinUser = await prisma.meetingJoinUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MeetingJoinUserUpdateArgs>(args: SelectSubset<T, MeetingJoinUserUpdateArgs<ExtArgs>>): Prisma__MeetingJoinUserClient<$Result.GetResult<Prisma.$MeetingJoinUserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MeetingJoinUsers.
     * @param {MeetingJoinUserDeleteManyArgs} args - Arguments to filter MeetingJoinUsers to delete.
     * @example
     * // Delete a few MeetingJoinUsers
     * const { count } = await prisma.meetingJoinUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MeetingJoinUserDeleteManyArgs>(args?: SelectSubset<T, MeetingJoinUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MeetingJoinUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingJoinUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MeetingJoinUsers
     * const meetingJoinUser = await prisma.meetingJoinUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MeetingJoinUserUpdateManyArgs>(args: SelectSubset<T, MeetingJoinUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MeetingJoinUser.
     * @param {MeetingJoinUserUpsertArgs} args - Arguments to update or create a MeetingJoinUser.
     * @example
     * // Update or create a MeetingJoinUser
     * const meetingJoinUser = await prisma.meetingJoinUser.upsert({
     *   create: {
     *     // ... data to create a MeetingJoinUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MeetingJoinUser we want to update
     *   }
     * })
     */
    upsert<T extends MeetingJoinUserUpsertArgs>(args: SelectSubset<T, MeetingJoinUserUpsertArgs<ExtArgs>>): Prisma__MeetingJoinUserClient<$Result.GetResult<Prisma.$MeetingJoinUserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MeetingJoinUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingJoinUserCountArgs} args - Arguments to filter MeetingJoinUsers to count.
     * @example
     * // Count the number of MeetingJoinUsers
     * const count = await prisma.meetingJoinUser.count({
     *   where: {
     *     // ... the filter for the MeetingJoinUsers we want to count
     *   }
     * })
    **/
    count<T extends MeetingJoinUserCountArgs>(
      args?: Subset<T, MeetingJoinUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeetingJoinUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MeetingJoinUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingJoinUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeetingJoinUserAggregateArgs>(args: Subset<T, MeetingJoinUserAggregateArgs>): Prisma.PrismaPromise<GetMeetingJoinUserAggregateType<T>>

    /**
     * Group by MeetingJoinUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingJoinUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeetingJoinUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeetingJoinUserGroupByArgs['orderBy'] }
        : { orderBy?: MeetingJoinUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeetingJoinUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetingJoinUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MeetingJoinUser model
   */
  readonly fields: MeetingJoinUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MeetingJoinUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MeetingJoinUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meeting<T extends MeetingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MeetingDefaultArgs<ExtArgs>>): Prisma__MeetingClient<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MeetingJoinUser model
   */ 
  interface MeetingJoinUserFieldRefs {
    readonly id: FieldRef<"MeetingJoinUser", 'Int'>
    readonly meetingId: FieldRef<"MeetingJoinUser", 'Int'>
    readonly userId: FieldRef<"MeetingJoinUser", 'Int'>
    readonly createdAt: FieldRef<"MeetingJoinUser", 'DateTime'>
    readonly updatedAt: FieldRef<"MeetingJoinUser", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MeetingJoinUser findUnique
   */
  export type MeetingJoinUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingJoinUser
     */
    select?: MeetingJoinUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingJoinUserInclude<ExtArgs> | null
    /**
     * Filter, which MeetingJoinUser to fetch.
     */
    where: MeetingJoinUserWhereUniqueInput
  }

  /**
   * MeetingJoinUser findUniqueOrThrow
   */
  export type MeetingJoinUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingJoinUser
     */
    select?: MeetingJoinUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingJoinUserInclude<ExtArgs> | null
    /**
     * Filter, which MeetingJoinUser to fetch.
     */
    where: MeetingJoinUserWhereUniqueInput
  }

  /**
   * MeetingJoinUser findFirst
   */
  export type MeetingJoinUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingJoinUser
     */
    select?: MeetingJoinUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingJoinUserInclude<ExtArgs> | null
    /**
     * Filter, which MeetingJoinUser to fetch.
     */
    where?: MeetingJoinUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingJoinUsers to fetch.
     */
    orderBy?: MeetingJoinUserOrderByWithRelationInput | MeetingJoinUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetingJoinUsers.
     */
    cursor?: MeetingJoinUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingJoinUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingJoinUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetingJoinUsers.
     */
    distinct?: MeetingJoinUserScalarFieldEnum | MeetingJoinUserScalarFieldEnum[]
  }

  /**
   * MeetingJoinUser findFirstOrThrow
   */
  export type MeetingJoinUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingJoinUser
     */
    select?: MeetingJoinUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingJoinUserInclude<ExtArgs> | null
    /**
     * Filter, which MeetingJoinUser to fetch.
     */
    where?: MeetingJoinUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingJoinUsers to fetch.
     */
    orderBy?: MeetingJoinUserOrderByWithRelationInput | MeetingJoinUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetingJoinUsers.
     */
    cursor?: MeetingJoinUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingJoinUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingJoinUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetingJoinUsers.
     */
    distinct?: MeetingJoinUserScalarFieldEnum | MeetingJoinUserScalarFieldEnum[]
  }

  /**
   * MeetingJoinUser findMany
   */
  export type MeetingJoinUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingJoinUser
     */
    select?: MeetingJoinUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingJoinUserInclude<ExtArgs> | null
    /**
     * Filter, which MeetingJoinUsers to fetch.
     */
    where?: MeetingJoinUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingJoinUsers to fetch.
     */
    orderBy?: MeetingJoinUserOrderByWithRelationInput | MeetingJoinUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MeetingJoinUsers.
     */
    cursor?: MeetingJoinUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingJoinUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingJoinUsers.
     */
    skip?: number
    distinct?: MeetingJoinUserScalarFieldEnum | MeetingJoinUserScalarFieldEnum[]
  }

  /**
   * MeetingJoinUser create
   */
  export type MeetingJoinUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingJoinUser
     */
    select?: MeetingJoinUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingJoinUserInclude<ExtArgs> | null
    /**
     * The data needed to create a MeetingJoinUser.
     */
    data: XOR<MeetingJoinUserCreateInput, MeetingJoinUserUncheckedCreateInput>
  }

  /**
   * MeetingJoinUser createMany
   */
  export type MeetingJoinUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MeetingJoinUsers.
     */
    data: MeetingJoinUserCreateManyInput | MeetingJoinUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MeetingJoinUser createManyAndReturn
   */
  export type MeetingJoinUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingJoinUser
     */
    select?: MeetingJoinUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MeetingJoinUsers.
     */
    data: MeetingJoinUserCreateManyInput | MeetingJoinUserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingJoinUserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MeetingJoinUser update
   */
  export type MeetingJoinUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingJoinUser
     */
    select?: MeetingJoinUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingJoinUserInclude<ExtArgs> | null
    /**
     * The data needed to update a MeetingJoinUser.
     */
    data: XOR<MeetingJoinUserUpdateInput, MeetingJoinUserUncheckedUpdateInput>
    /**
     * Choose, which MeetingJoinUser to update.
     */
    where: MeetingJoinUserWhereUniqueInput
  }

  /**
   * MeetingJoinUser updateMany
   */
  export type MeetingJoinUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MeetingJoinUsers.
     */
    data: XOR<MeetingJoinUserUpdateManyMutationInput, MeetingJoinUserUncheckedUpdateManyInput>
    /**
     * Filter which MeetingJoinUsers to update
     */
    where?: MeetingJoinUserWhereInput
  }

  /**
   * MeetingJoinUser upsert
   */
  export type MeetingJoinUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingJoinUser
     */
    select?: MeetingJoinUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingJoinUserInclude<ExtArgs> | null
    /**
     * The filter to search for the MeetingJoinUser to update in case it exists.
     */
    where: MeetingJoinUserWhereUniqueInput
    /**
     * In case the MeetingJoinUser found by the `where` argument doesn't exist, create a new MeetingJoinUser with this data.
     */
    create: XOR<MeetingJoinUserCreateInput, MeetingJoinUserUncheckedCreateInput>
    /**
     * In case the MeetingJoinUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeetingJoinUserUpdateInput, MeetingJoinUserUncheckedUpdateInput>
  }

  /**
   * MeetingJoinUser delete
   */
  export type MeetingJoinUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingJoinUser
     */
    select?: MeetingJoinUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingJoinUserInclude<ExtArgs> | null
    /**
     * Filter which MeetingJoinUser to delete.
     */
    where: MeetingJoinUserWhereUniqueInput
  }

  /**
   * MeetingJoinUser deleteMany
   */
  export type MeetingJoinUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeetingJoinUsers to delete
     */
    where?: MeetingJoinUserWhereInput
  }

  /**
   * MeetingJoinUser without action
   */
  export type MeetingJoinUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingJoinUser
     */
    select?: MeetingJoinUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingJoinUserInclude<ExtArgs> | null
  }


  /**
   * Model Community
   */

  export type AggregateCommunity = {
    _count: CommunityCountAggregateOutputType | null
    _avg: CommunityAvgAggregateOutputType | null
    _sum: CommunitySumAggregateOutputType | null
    _min: CommunityMinAggregateOutputType | null
    _max: CommunityMaxAggregateOutputType | null
  }

  export type CommunityAvgAggregateOutputType = {
    id: number | null
  }

  export type CommunitySumAggregateOutputType = {
    id: number | null
  }

  export type CommunityMinAggregateOutputType = {
    id: number | null
    title: string | null
    createdAt: Date | null
  }

  export type CommunityMaxAggregateOutputType = {
    id: number | null
    title: string | null
    createdAt: Date | null
  }

  export type CommunityCountAggregateOutputType = {
    id: number
    title: number
    createdAt: number
    _all: number
  }


  export type CommunityAvgAggregateInputType = {
    id?: true
  }

  export type CommunitySumAggregateInputType = {
    id?: true
  }

  export type CommunityMinAggregateInputType = {
    id?: true
    title?: true
    createdAt?: true
  }

  export type CommunityMaxAggregateInputType = {
    id?: true
    title?: true
    createdAt?: true
  }

  export type CommunityCountAggregateInputType = {
    id?: true
    title?: true
    createdAt?: true
    _all?: true
  }

  export type CommunityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Community to aggregate.
     */
    where?: CommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communities to fetch.
     */
    orderBy?: CommunityOrderByWithRelationInput | CommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Communities
    **/
    _count?: true | CommunityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommunityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommunitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommunityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommunityMaxAggregateInputType
  }

  export type GetCommunityAggregateType<T extends CommunityAggregateArgs> = {
        [P in keyof T & keyof AggregateCommunity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommunity[P]>
      : GetScalarType<T[P], AggregateCommunity[P]>
  }




  export type CommunityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommunityWhereInput
    orderBy?: CommunityOrderByWithAggregationInput | CommunityOrderByWithAggregationInput[]
    by: CommunityScalarFieldEnum[] | CommunityScalarFieldEnum
    having?: CommunityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommunityCountAggregateInputType | true
    _avg?: CommunityAvgAggregateInputType
    _sum?: CommunitySumAggregateInputType
    _min?: CommunityMinAggregateInputType
    _max?: CommunityMaxAggregateInputType
  }

  export type CommunityGroupByOutputType = {
    id: number
    title: string
    createdAt: Date
    _count: CommunityCountAggregateOutputType | null
    _avg: CommunityAvgAggregateOutputType | null
    _sum: CommunitySumAggregateOutputType | null
    _min: CommunityMinAggregateOutputType | null
    _max: CommunityMaxAggregateOutputType | null
  }

  type GetCommunityGroupByPayload<T extends CommunityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommunityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommunityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommunityGroupByOutputType[P]>
            : GetScalarType<T[P], CommunityGroupByOutputType[P]>
        }
      >
    >


  export type CommunitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    createdAt?: boolean
    communityContent?: boolean | Community$communityContentArgs<ExtArgs>
    _count?: boolean | CommunityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["community"]>

  export type CommunitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["community"]>

  export type CommunitySelectScalar = {
    id?: boolean
    title?: boolean
    createdAt?: boolean
  }

  export type CommunityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    communityContent?: boolean | Community$communityContentArgs<ExtArgs>
    _count?: boolean | CommunityCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CommunityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CommunityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Community"
    objects: {
      communityContent: Prisma.$CommunityContentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      createdAt: Date
    }, ExtArgs["result"]["community"]>
    composites: {}
  }

  type CommunityGetPayload<S extends boolean | null | undefined | CommunityDefaultArgs> = $Result.GetResult<Prisma.$CommunityPayload, S>

  type CommunityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommunityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommunityCountAggregateInputType | true
    }

  export interface CommunityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Community'], meta: { name: 'Community' } }
    /**
     * Find zero or one Community that matches the filter.
     * @param {CommunityFindUniqueArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommunityFindUniqueArgs>(args: SelectSubset<T, CommunityFindUniqueArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Community that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommunityFindUniqueOrThrowArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommunityFindUniqueOrThrowArgs>(args: SelectSubset<T, CommunityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Community that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityFindFirstArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommunityFindFirstArgs>(args?: SelectSubset<T, CommunityFindFirstArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Community that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityFindFirstOrThrowArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommunityFindFirstOrThrowArgs>(args?: SelectSubset<T, CommunityFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Communities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Communities
     * const communities = await prisma.community.findMany()
     * 
     * // Get first 10 Communities
     * const communities = await prisma.community.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const communityWithIdOnly = await prisma.community.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommunityFindManyArgs>(args?: SelectSubset<T, CommunityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Community.
     * @param {CommunityCreateArgs} args - Arguments to create a Community.
     * @example
     * // Create one Community
     * const Community = await prisma.community.create({
     *   data: {
     *     // ... data to create a Community
     *   }
     * })
     * 
     */
    create<T extends CommunityCreateArgs>(args: SelectSubset<T, CommunityCreateArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Communities.
     * @param {CommunityCreateManyArgs} args - Arguments to create many Communities.
     * @example
     * // Create many Communities
     * const community = await prisma.community.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommunityCreateManyArgs>(args?: SelectSubset<T, CommunityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Communities and returns the data saved in the database.
     * @param {CommunityCreateManyAndReturnArgs} args - Arguments to create many Communities.
     * @example
     * // Create many Communities
     * const community = await prisma.community.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Communities and only return the `id`
     * const communityWithIdOnly = await prisma.community.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommunityCreateManyAndReturnArgs>(args?: SelectSubset<T, CommunityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Community.
     * @param {CommunityDeleteArgs} args - Arguments to delete one Community.
     * @example
     * // Delete one Community
     * const Community = await prisma.community.delete({
     *   where: {
     *     // ... filter to delete one Community
     *   }
     * })
     * 
     */
    delete<T extends CommunityDeleteArgs>(args: SelectSubset<T, CommunityDeleteArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Community.
     * @param {CommunityUpdateArgs} args - Arguments to update one Community.
     * @example
     * // Update one Community
     * const community = await prisma.community.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommunityUpdateArgs>(args: SelectSubset<T, CommunityUpdateArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Communities.
     * @param {CommunityDeleteManyArgs} args - Arguments to filter Communities to delete.
     * @example
     * // Delete a few Communities
     * const { count } = await prisma.community.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommunityDeleteManyArgs>(args?: SelectSubset<T, CommunityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Communities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Communities
     * const community = await prisma.community.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommunityUpdateManyArgs>(args: SelectSubset<T, CommunityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Community.
     * @param {CommunityUpsertArgs} args - Arguments to update or create a Community.
     * @example
     * // Update or create a Community
     * const community = await prisma.community.upsert({
     *   create: {
     *     // ... data to create a Community
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Community we want to update
     *   }
     * })
     */
    upsert<T extends CommunityUpsertArgs>(args: SelectSubset<T, CommunityUpsertArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Communities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityCountArgs} args - Arguments to filter Communities to count.
     * @example
     * // Count the number of Communities
     * const count = await prisma.community.count({
     *   where: {
     *     // ... the filter for the Communities we want to count
     *   }
     * })
    **/
    count<T extends CommunityCountArgs>(
      args?: Subset<T, CommunityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommunityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Community.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommunityAggregateArgs>(args: Subset<T, CommunityAggregateArgs>): Prisma.PrismaPromise<GetCommunityAggregateType<T>>

    /**
     * Group by Community.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommunityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommunityGroupByArgs['orderBy'] }
        : { orderBy?: CommunityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommunityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommunityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Community model
   */
  readonly fields: CommunityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Community.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommunityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    communityContent<T extends Community$communityContentArgs<ExtArgs> = {}>(args?: Subset<T, Community$communityContentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunityContentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Community model
   */ 
  interface CommunityFieldRefs {
    readonly id: FieldRef<"Community", 'Int'>
    readonly title: FieldRef<"Community", 'String'>
    readonly createdAt: FieldRef<"Community", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Community findUnique
   */
  export type CommunityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * Filter, which Community to fetch.
     */
    where: CommunityWhereUniqueInput
  }

  /**
   * Community findUniqueOrThrow
   */
  export type CommunityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * Filter, which Community to fetch.
     */
    where: CommunityWhereUniqueInput
  }

  /**
   * Community findFirst
   */
  export type CommunityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * Filter, which Community to fetch.
     */
    where?: CommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communities to fetch.
     */
    orderBy?: CommunityOrderByWithRelationInput | CommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Communities.
     */
    cursor?: CommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Communities.
     */
    distinct?: CommunityScalarFieldEnum | CommunityScalarFieldEnum[]
  }

  /**
   * Community findFirstOrThrow
   */
  export type CommunityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * Filter, which Community to fetch.
     */
    where?: CommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communities to fetch.
     */
    orderBy?: CommunityOrderByWithRelationInput | CommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Communities.
     */
    cursor?: CommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Communities.
     */
    distinct?: CommunityScalarFieldEnum | CommunityScalarFieldEnum[]
  }

  /**
   * Community findMany
   */
  export type CommunityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * Filter, which Communities to fetch.
     */
    where?: CommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communities to fetch.
     */
    orderBy?: CommunityOrderByWithRelationInput | CommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Communities.
     */
    cursor?: CommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communities.
     */
    skip?: number
    distinct?: CommunityScalarFieldEnum | CommunityScalarFieldEnum[]
  }

  /**
   * Community create
   */
  export type CommunityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * The data needed to create a Community.
     */
    data: XOR<CommunityCreateInput, CommunityUncheckedCreateInput>
  }

  /**
   * Community createMany
   */
  export type CommunityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Communities.
     */
    data: CommunityCreateManyInput | CommunityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Community createManyAndReturn
   */
  export type CommunityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Communities.
     */
    data: CommunityCreateManyInput | CommunityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Community update
   */
  export type CommunityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * The data needed to update a Community.
     */
    data: XOR<CommunityUpdateInput, CommunityUncheckedUpdateInput>
    /**
     * Choose, which Community to update.
     */
    where: CommunityWhereUniqueInput
  }

  /**
   * Community updateMany
   */
  export type CommunityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Communities.
     */
    data: XOR<CommunityUpdateManyMutationInput, CommunityUncheckedUpdateManyInput>
    /**
     * Filter which Communities to update
     */
    where?: CommunityWhereInput
  }

  /**
   * Community upsert
   */
  export type CommunityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * The filter to search for the Community to update in case it exists.
     */
    where: CommunityWhereUniqueInput
    /**
     * In case the Community found by the `where` argument doesn't exist, create a new Community with this data.
     */
    create: XOR<CommunityCreateInput, CommunityUncheckedCreateInput>
    /**
     * In case the Community was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommunityUpdateInput, CommunityUncheckedUpdateInput>
  }

  /**
   * Community delete
   */
  export type CommunityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * Filter which Community to delete.
     */
    where: CommunityWhereUniqueInput
  }

  /**
   * Community deleteMany
   */
  export type CommunityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Communities to delete
     */
    where?: CommunityWhereInput
  }

  /**
   * Community.communityContent
   */
  export type Community$communityContentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityContent
     */
    select?: CommunityContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityContentInclude<ExtArgs> | null
    where?: CommunityContentWhereInput
    orderBy?: CommunityContentOrderByWithRelationInput | CommunityContentOrderByWithRelationInput[]
    cursor?: CommunityContentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommunityContentScalarFieldEnum | CommunityContentScalarFieldEnum[]
  }

  /**
   * Community without action
   */
  export type CommunityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
  }


  /**
   * Model CommunityContent
   */

  export type AggregateCommunityContent = {
    _count: CommunityContentCountAggregateOutputType | null
    _avg: CommunityContentAvgAggregateOutputType | null
    _sum: CommunityContentSumAggregateOutputType | null
    _min: CommunityContentMinAggregateOutputType | null
    _max: CommunityContentMaxAggregateOutputType | null
  }

  export type CommunityContentAvgAggregateOutputType = {
    id: number | null
    communityId: number | null
    writedUserId: number | null
    likeCount: number | null
  }

  export type CommunityContentSumAggregateOutputType = {
    id: number | null
    communityId: number | null
    writedUserId: number | null
    likeCount: number | null
  }

  export type CommunityContentMinAggregateOutputType = {
    id: number | null
    communityId: number | null
    writedUserId: number | null
    title: string | null
    content: string | null
    likeCount: number | null
    contentImageUrl: string | null
    createdAt: Date | null
  }

  export type CommunityContentMaxAggregateOutputType = {
    id: number | null
    communityId: number | null
    writedUserId: number | null
    title: string | null
    content: string | null
    likeCount: number | null
    contentImageUrl: string | null
    createdAt: Date | null
  }

  export type CommunityContentCountAggregateOutputType = {
    id: number
    communityId: number
    writedUserId: number
    title: number
    content: number
    likeCount: number
    contentImageUrl: number
    createdAt: number
    _all: number
  }


  export type CommunityContentAvgAggregateInputType = {
    id?: true
    communityId?: true
    writedUserId?: true
    likeCount?: true
  }

  export type CommunityContentSumAggregateInputType = {
    id?: true
    communityId?: true
    writedUserId?: true
    likeCount?: true
  }

  export type CommunityContentMinAggregateInputType = {
    id?: true
    communityId?: true
    writedUserId?: true
    title?: true
    content?: true
    likeCount?: true
    contentImageUrl?: true
    createdAt?: true
  }

  export type CommunityContentMaxAggregateInputType = {
    id?: true
    communityId?: true
    writedUserId?: true
    title?: true
    content?: true
    likeCount?: true
    contentImageUrl?: true
    createdAt?: true
  }

  export type CommunityContentCountAggregateInputType = {
    id?: true
    communityId?: true
    writedUserId?: true
    title?: true
    content?: true
    likeCount?: true
    contentImageUrl?: true
    createdAt?: true
    _all?: true
  }

  export type CommunityContentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommunityContent to aggregate.
     */
    where?: CommunityContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommunityContents to fetch.
     */
    orderBy?: CommunityContentOrderByWithRelationInput | CommunityContentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommunityContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommunityContents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommunityContents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CommunityContents
    **/
    _count?: true | CommunityContentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommunityContentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommunityContentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommunityContentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommunityContentMaxAggregateInputType
  }

  export type GetCommunityContentAggregateType<T extends CommunityContentAggregateArgs> = {
        [P in keyof T & keyof AggregateCommunityContent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommunityContent[P]>
      : GetScalarType<T[P], AggregateCommunityContent[P]>
  }




  export type CommunityContentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommunityContentWhereInput
    orderBy?: CommunityContentOrderByWithAggregationInput | CommunityContentOrderByWithAggregationInput[]
    by: CommunityContentScalarFieldEnum[] | CommunityContentScalarFieldEnum
    having?: CommunityContentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommunityContentCountAggregateInputType | true
    _avg?: CommunityContentAvgAggregateInputType
    _sum?: CommunityContentSumAggregateInputType
    _min?: CommunityContentMinAggregateInputType
    _max?: CommunityContentMaxAggregateInputType
  }

  export type CommunityContentGroupByOutputType = {
    id: number
    communityId: number
    writedUserId: number
    title: string
    content: string
    likeCount: number
    contentImageUrl: string | null
    createdAt: Date
    _count: CommunityContentCountAggregateOutputType | null
    _avg: CommunityContentAvgAggregateOutputType | null
    _sum: CommunityContentSumAggregateOutputType | null
    _min: CommunityContentMinAggregateOutputType | null
    _max: CommunityContentMaxAggregateOutputType | null
  }

  type GetCommunityContentGroupByPayload<T extends CommunityContentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommunityContentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommunityContentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommunityContentGroupByOutputType[P]>
            : GetScalarType<T[P], CommunityContentGroupByOutputType[P]>
        }
      >
    >


  export type CommunityContentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    communityId?: boolean
    writedUserId?: boolean
    title?: boolean
    content?: boolean
    likeCount?: boolean
    contentImageUrl?: boolean
    createdAt?: boolean
    reply?: boolean | CommunityContent$replyArgs<ExtArgs>
    writedUser?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | CommunityDefaultArgs<ExtArgs>
    _count?: boolean | CommunityContentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["communityContent"]>

  export type CommunityContentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    communityId?: boolean
    writedUserId?: boolean
    title?: boolean
    content?: boolean
    likeCount?: boolean
    contentImageUrl?: boolean
    createdAt?: boolean
    writedUser?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | CommunityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["communityContent"]>

  export type CommunityContentSelectScalar = {
    id?: boolean
    communityId?: boolean
    writedUserId?: boolean
    title?: boolean
    content?: boolean
    likeCount?: boolean
    contentImageUrl?: boolean
    createdAt?: boolean
  }

  export type CommunityContentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reply?: boolean | CommunityContent$replyArgs<ExtArgs>
    writedUser?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | CommunityDefaultArgs<ExtArgs>
    _count?: boolean | CommunityContentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CommunityContentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    writedUser?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | CommunityDefaultArgs<ExtArgs>
  }

  export type $CommunityContentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CommunityContent"
    objects: {
      reply: Prisma.$ReplyPayload<ExtArgs>[]
      writedUser: Prisma.$UserPayload<ExtArgs>
      community: Prisma.$CommunityPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      communityId: number
      writedUserId: number
      title: string
      content: string
      likeCount: number
      contentImageUrl: string | null
      createdAt: Date
    }, ExtArgs["result"]["communityContent"]>
    composites: {}
  }

  type CommunityContentGetPayload<S extends boolean | null | undefined | CommunityContentDefaultArgs> = $Result.GetResult<Prisma.$CommunityContentPayload, S>

  type CommunityContentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommunityContentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommunityContentCountAggregateInputType | true
    }

  export interface CommunityContentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CommunityContent'], meta: { name: 'CommunityContent' } }
    /**
     * Find zero or one CommunityContent that matches the filter.
     * @param {CommunityContentFindUniqueArgs} args - Arguments to find a CommunityContent
     * @example
     * // Get one CommunityContent
     * const communityContent = await prisma.communityContent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommunityContentFindUniqueArgs>(args: SelectSubset<T, CommunityContentFindUniqueArgs<ExtArgs>>): Prisma__CommunityContentClient<$Result.GetResult<Prisma.$CommunityContentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CommunityContent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommunityContentFindUniqueOrThrowArgs} args - Arguments to find a CommunityContent
     * @example
     * // Get one CommunityContent
     * const communityContent = await prisma.communityContent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommunityContentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommunityContentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommunityContentClient<$Result.GetResult<Prisma.$CommunityContentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CommunityContent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityContentFindFirstArgs} args - Arguments to find a CommunityContent
     * @example
     * // Get one CommunityContent
     * const communityContent = await prisma.communityContent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommunityContentFindFirstArgs>(args?: SelectSubset<T, CommunityContentFindFirstArgs<ExtArgs>>): Prisma__CommunityContentClient<$Result.GetResult<Prisma.$CommunityContentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CommunityContent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityContentFindFirstOrThrowArgs} args - Arguments to find a CommunityContent
     * @example
     * // Get one CommunityContent
     * const communityContent = await prisma.communityContent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommunityContentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommunityContentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommunityContentClient<$Result.GetResult<Prisma.$CommunityContentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CommunityContents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityContentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CommunityContents
     * const communityContents = await prisma.communityContent.findMany()
     * 
     * // Get first 10 CommunityContents
     * const communityContents = await prisma.communityContent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const communityContentWithIdOnly = await prisma.communityContent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommunityContentFindManyArgs>(args?: SelectSubset<T, CommunityContentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunityContentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CommunityContent.
     * @param {CommunityContentCreateArgs} args - Arguments to create a CommunityContent.
     * @example
     * // Create one CommunityContent
     * const CommunityContent = await prisma.communityContent.create({
     *   data: {
     *     // ... data to create a CommunityContent
     *   }
     * })
     * 
     */
    create<T extends CommunityContentCreateArgs>(args: SelectSubset<T, CommunityContentCreateArgs<ExtArgs>>): Prisma__CommunityContentClient<$Result.GetResult<Prisma.$CommunityContentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CommunityContents.
     * @param {CommunityContentCreateManyArgs} args - Arguments to create many CommunityContents.
     * @example
     * // Create many CommunityContents
     * const communityContent = await prisma.communityContent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommunityContentCreateManyArgs>(args?: SelectSubset<T, CommunityContentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CommunityContents and returns the data saved in the database.
     * @param {CommunityContentCreateManyAndReturnArgs} args - Arguments to create many CommunityContents.
     * @example
     * // Create many CommunityContents
     * const communityContent = await prisma.communityContent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CommunityContents and only return the `id`
     * const communityContentWithIdOnly = await prisma.communityContent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommunityContentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommunityContentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunityContentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CommunityContent.
     * @param {CommunityContentDeleteArgs} args - Arguments to delete one CommunityContent.
     * @example
     * // Delete one CommunityContent
     * const CommunityContent = await prisma.communityContent.delete({
     *   where: {
     *     // ... filter to delete one CommunityContent
     *   }
     * })
     * 
     */
    delete<T extends CommunityContentDeleteArgs>(args: SelectSubset<T, CommunityContentDeleteArgs<ExtArgs>>): Prisma__CommunityContentClient<$Result.GetResult<Prisma.$CommunityContentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CommunityContent.
     * @param {CommunityContentUpdateArgs} args - Arguments to update one CommunityContent.
     * @example
     * // Update one CommunityContent
     * const communityContent = await prisma.communityContent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommunityContentUpdateArgs>(args: SelectSubset<T, CommunityContentUpdateArgs<ExtArgs>>): Prisma__CommunityContentClient<$Result.GetResult<Prisma.$CommunityContentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CommunityContents.
     * @param {CommunityContentDeleteManyArgs} args - Arguments to filter CommunityContents to delete.
     * @example
     * // Delete a few CommunityContents
     * const { count } = await prisma.communityContent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommunityContentDeleteManyArgs>(args?: SelectSubset<T, CommunityContentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommunityContents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityContentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CommunityContents
     * const communityContent = await prisma.communityContent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommunityContentUpdateManyArgs>(args: SelectSubset<T, CommunityContentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CommunityContent.
     * @param {CommunityContentUpsertArgs} args - Arguments to update or create a CommunityContent.
     * @example
     * // Update or create a CommunityContent
     * const communityContent = await prisma.communityContent.upsert({
     *   create: {
     *     // ... data to create a CommunityContent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CommunityContent we want to update
     *   }
     * })
     */
    upsert<T extends CommunityContentUpsertArgs>(args: SelectSubset<T, CommunityContentUpsertArgs<ExtArgs>>): Prisma__CommunityContentClient<$Result.GetResult<Prisma.$CommunityContentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CommunityContents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityContentCountArgs} args - Arguments to filter CommunityContents to count.
     * @example
     * // Count the number of CommunityContents
     * const count = await prisma.communityContent.count({
     *   where: {
     *     // ... the filter for the CommunityContents we want to count
     *   }
     * })
    **/
    count<T extends CommunityContentCountArgs>(
      args?: Subset<T, CommunityContentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommunityContentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CommunityContent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityContentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommunityContentAggregateArgs>(args: Subset<T, CommunityContentAggregateArgs>): Prisma.PrismaPromise<GetCommunityContentAggregateType<T>>

    /**
     * Group by CommunityContent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityContentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommunityContentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommunityContentGroupByArgs['orderBy'] }
        : { orderBy?: CommunityContentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommunityContentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommunityContentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CommunityContent model
   */
  readonly fields: CommunityContentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CommunityContent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommunityContentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reply<T extends CommunityContent$replyArgs<ExtArgs> = {}>(args?: Subset<T, CommunityContent$replyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "findMany"> | Null>
    writedUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    community<T extends CommunityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommunityDefaultArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CommunityContent model
   */ 
  interface CommunityContentFieldRefs {
    readonly id: FieldRef<"CommunityContent", 'Int'>
    readonly communityId: FieldRef<"CommunityContent", 'Int'>
    readonly writedUserId: FieldRef<"CommunityContent", 'Int'>
    readonly title: FieldRef<"CommunityContent", 'String'>
    readonly content: FieldRef<"CommunityContent", 'String'>
    readonly likeCount: FieldRef<"CommunityContent", 'Int'>
    readonly contentImageUrl: FieldRef<"CommunityContent", 'String'>
    readonly createdAt: FieldRef<"CommunityContent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CommunityContent findUnique
   */
  export type CommunityContentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityContent
     */
    select?: CommunityContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityContentInclude<ExtArgs> | null
    /**
     * Filter, which CommunityContent to fetch.
     */
    where: CommunityContentWhereUniqueInput
  }

  /**
   * CommunityContent findUniqueOrThrow
   */
  export type CommunityContentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityContent
     */
    select?: CommunityContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityContentInclude<ExtArgs> | null
    /**
     * Filter, which CommunityContent to fetch.
     */
    where: CommunityContentWhereUniqueInput
  }

  /**
   * CommunityContent findFirst
   */
  export type CommunityContentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityContent
     */
    select?: CommunityContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityContentInclude<ExtArgs> | null
    /**
     * Filter, which CommunityContent to fetch.
     */
    where?: CommunityContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommunityContents to fetch.
     */
    orderBy?: CommunityContentOrderByWithRelationInput | CommunityContentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommunityContents.
     */
    cursor?: CommunityContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommunityContents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommunityContents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommunityContents.
     */
    distinct?: CommunityContentScalarFieldEnum | CommunityContentScalarFieldEnum[]
  }

  /**
   * CommunityContent findFirstOrThrow
   */
  export type CommunityContentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityContent
     */
    select?: CommunityContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityContentInclude<ExtArgs> | null
    /**
     * Filter, which CommunityContent to fetch.
     */
    where?: CommunityContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommunityContents to fetch.
     */
    orderBy?: CommunityContentOrderByWithRelationInput | CommunityContentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommunityContents.
     */
    cursor?: CommunityContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommunityContents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommunityContents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommunityContents.
     */
    distinct?: CommunityContentScalarFieldEnum | CommunityContentScalarFieldEnum[]
  }

  /**
   * CommunityContent findMany
   */
  export type CommunityContentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityContent
     */
    select?: CommunityContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityContentInclude<ExtArgs> | null
    /**
     * Filter, which CommunityContents to fetch.
     */
    where?: CommunityContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommunityContents to fetch.
     */
    orderBy?: CommunityContentOrderByWithRelationInput | CommunityContentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CommunityContents.
     */
    cursor?: CommunityContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommunityContents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommunityContents.
     */
    skip?: number
    distinct?: CommunityContentScalarFieldEnum | CommunityContentScalarFieldEnum[]
  }

  /**
   * CommunityContent create
   */
  export type CommunityContentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityContent
     */
    select?: CommunityContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityContentInclude<ExtArgs> | null
    /**
     * The data needed to create a CommunityContent.
     */
    data: XOR<CommunityContentCreateInput, CommunityContentUncheckedCreateInput>
  }

  /**
   * CommunityContent createMany
   */
  export type CommunityContentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CommunityContents.
     */
    data: CommunityContentCreateManyInput | CommunityContentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CommunityContent createManyAndReturn
   */
  export type CommunityContentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityContent
     */
    select?: CommunityContentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CommunityContents.
     */
    data: CommunityContentCreateManyInput | CommunityContentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityContentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CommunityContent update
   */
  export type CommunityContentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityContent
     */
    select?: CommunityContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityContentInclude<ExtArgs> | null
    /**
     * The data needed to update a CommunityContent.
     */
    data: XOR<CommunityContentUpdateInput, CommunityContentUncheckedUpdateInput>
    /**
     * Choose, which CommunityContent to update.
     */
    where: CommunityContentWhereUniqueInput
  }

  /**
   * CommunityContent updateMany
   */
  export type CommunityContentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CommunityContents.
     */
    data: XOR<CommunityContentUpdateManyMutationInput, CommunityContentUncheckedUpdateManyInput>
    /**
     * Filter which CommunityContents to update
     */
    where?: CommunityContentWhereInput
  }

  /**
   * CommunityContent upsert
   */
  export type CommunityContentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityContent
     */
    select?: CommunityContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityContentInclude<ExtArgs> | null
    /**
     * The filter to search for the CommunityContent to update in case it exists.
     */
    where: CommunityContentWhereUniqueInput
    /**
     * In case the CommunityContent found by the `where` argument doesn't exist, create a new CommunityContent with this data.
     */
    create: XOR<CommunityContentCreateInput, CommunityContentUncheckedCreateInput>
    /**
     * In case the CommunityContent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommunityContentUpdateInput, CommunityContentUncheckedUpdateInput>
  }

  /**
   * CommunityContent delete
   */
  export type CommunityContentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityContent
     */
    select?: CommunityContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityContentInclude<ExtArgs> | null
    /**
     * Filter which CommunityContent to delete.
     */
    where: CommunityContentWhereUniqueInput
  }

  /**
   * CommunityContent deleteMany
   */
  export type CommunityContentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommunityContents to delete
     */
    where?: CommunityContentWhereInput
  }

  /**
   * CommunityContent.reply
   */
  export type CommunityContent$replyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyInclude<ExtArgs> | null
    where?: ReplyWhereInput
    orderBy?: ReplyOrderByWithRelationInput | ReplyOrderByWithRelationInput[]
    cursor?: ReplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReplyScalarFieldEnum | ReplyScalarFieldEnum[]
  }

  /**
   * CommunityContent without action
   */
  export type CommunityContentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityContent
     */
    select?: CommunityContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityContentInclude<ExtArgs> | null
  }


  /**
   * Model Reply
   */

  export type AggregateReply = {
    _count: ReplyCountAggregateOutputType | null
    _avg: ReplyAvgAggregateOutputType | null
    _sum: ReplySumAggregateOutputType | null
    _min: ReplyMinAggregateOutputType | null
    _max: ReplyMaxAggregateOutputType | null
  }

  export type ReplyAvgAggregateOutputType = {
    id: number | null
    communityContentId: number | null
    userId: number | null
  }

  export type ReplySumAggregateOutputType = {
    id: number | null
    communityContentId: number | null
    userId: number | null
  }

  export type ReplyMinAggregateOutputType = {
    id: number | null
    communityContentId: number | null
    userId: number | null
    content: string | null
    createdAt: Date | null
  }

  export type ReplyMaxAggregateOutputType = {
    id: number | null
    communityContentId: number | null
    userId: number | null
    content: string | null
    createdAt: Date | null
  }

  export type ReplyCountAggregateOutputType = {
    id: number
    communityContentId: number
    userId: number
    content: number
    createdAt: number
    _all: number
  }


  export type ReplyAvgAggregateInputType = {
    id?: true
    communityContentId?: true
    userId?: true
  }

  export type ReplySumAggregateInputType = {
    id?: true
    communityContentId?: true
    userId?: true
  }

  export type ReplyMinAggregateInputType = {
    id?: true
    communityContentId?: true
    userId?: true
    content?: true
    createdAt?: true
  }

  export type ReplyMaxAggregateInputType = {
    id?: true
    communityContentId?: true
    userId?: true
    content?: true
    createdAt?: true
  }

  export type ReplyCountAggregateInputType = {
    id?: true
    communityContentId?: true
    userId?: true
    content?: true
    createdAt?: true
    _all?: true
  }

  export type ReplyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reply to aggregate.
     */
    where?: ReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Replies to fetch.
     */
    orderBy?: ReplyOrderByWithRelationInput | ReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Replies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Replies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Replies
    **/
    _count?: true | ReplyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReplyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReplySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReplyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReplyMaxAggregateInputType
  }

  export type GetReplyAggregateType<T extends ReplyAggregateArgs> = {
        [P in keyof T & keyof AggregateReply]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReply[P]>
      : GetScalarType<T[P], AggregateReply[P]>
  }




  export type ReplyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReplyWhereInput
    orderBy?: ReplyOrderByWithAggregationInput | ReplyOrderByWithAggregationInput[]
    by: ReplyScalarFieldEnum[] | ReplyScalarFieldEnum
    having?: ReplyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReplyCountAggregateInputType | true
    _avg?: ReplyAvgAggregateInputType
    _sum?: ReplySumAggregateInputType
    _min?: ReplyMinAggregateInputType
    _max?: ReplyMaxAggregateInputType
  }

  export type ReplyGroupByOutputType = {
    id: number
    communityContentId: number
    userId: number
    content: string
    createdAt: Date
    _count: ReplyCountAggregateOutputType | null
    _avg: ReplyAvgAggregateOutputType | null
    _sum: ReplySumAggregateOutputType | null
    _min: ReplyMinAggregateOutputType | null
    _max: ReplyMaxAggregateOutputType | null
  }

  type GetReplyGroupByPayload<T extends ReplyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReplyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReplyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReplyGroupByOutputType[P]>
            : GetScalarType<T[P], ReplyGroupByOutputType[P]>
        }
      >
    >


  export type ReplySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    communityContentId?: boolean
    userId?: boolean
    content?: boolean
    createdAt?: boolean
    communityContent?: boolean | CommunityContentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reply"]>

  export type ReplySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    communityContentId?: boolean
    userId?: boolean
    content?: boolean
    createdAt?: boolean
    communityContent?: boolean | CommunityContentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reply"]>

  export type ReplySelectScalar = {
    id?: boolean
    communityContentId?: boolean
    userId?: boolean
    content?: boolean
    createdAt?: boolean
  }

  export type ReplyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    communityContent?: boolean | CommunityContentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ReplyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    communityContent?: boolean | CommunityContentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ReplyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reply"
    objects: {
      communityContent: Prisma.$CommunityContentPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      communityContentId: number
      userId: number
      content: string
      createdAt: Date
    }, ExtArgs["result"]["reply"]>
    composites: {}
  }

  type ReplyGetPayload<S extends boolean | null | undefined | ReplyDefaultArgs> = $Result.GetResult<Prisma.$ReplyPayload, S>

  type ReplyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReplyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReplyCountAggregateInputType | true
    }

  export interface ReplyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reply'], meta: { name: 'Reply' } }
    /**
     * Find zero or one Reply that matches the filter.
     * @param {ReplyFindUniqueArgs} args - Arguments to find a Reply
     * @example
     * // Get one Reply
     * const reply = await prisma.reply.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReplyFindUniqueArgs>(args: SelectSubset<T, ReplyFindUniqueArgs<ExtArgs>>): Prisma__ReplyClient<$Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Reply that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReplyFindUniqueOrThrowArgs} args - Arguments to find a Reply
     * @example
     * // Get one Reply
     * const reply = await prisma.reply.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReplyFindUniqueOrThrowArgs>(args: SelectSubset<T, ReplyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReplyClient<$Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Reply that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReplyFindFirstArgs} args - Arguments to find a Reply
     * @example
     * // Get one Reply
     * const reply = await prisma.reply.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReplyFindFirstArgs>(args?: SelectSubset<T, ReplyFindFirstArgs<ExtArgs>>): Prisma__ReplyClient<$Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Reply that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReplyFindFirstOrThrowArgs} args - Arguments to find a Reply
     * @example
     * // Get one Reply
     * const reply = await prisma.reply.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReplyFindFirstOrThrowArgs>(args?: SelectSubset<T, ReplyFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReplyClient<$Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Replies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReplyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Replies
     * const replies = await prisma.reply.findMany()
     * 
     * // Get first 10 Replies
     * const replies = await prisma.reply.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const replyWithIdOnly = await prisma.reply.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReplyFindManyArgs>(args?: SelectSubset<T, ReplyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Reply.
     * @param {ReplyCreateArgs} args - Arguments to create a Reply.
     * @example
     * // Create one Reply
     * const Reply = await prisma.reply.create({
     *   data: {
     *     // ... data to create a Reply
     *   }
     * })
     * 
     */
    create<T extends ReplyCreateArgs>(args: SelectSubset<T, ReplyCreateArgs<ExtArgs>>): Prisma__ReplyClient<$Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Replies.
     * @param {ReplyCreateManyArgs} args - Arguments to create many Replies.
     * @example
     * // Create many Replies
     * const reply = await prisma.reply.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReplyCreateManyArgs>(args?: SelectSubset<T, ReplyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Replies and returns the data saved in the database.
     * @param {ReplyCreateManyAndReturnArgs} args - Arguments to create many Replies.
     * @example
     * // Create many Replies
     * const reply = await prisma.reply.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Replies and only return the `id`
     * const replyWithIdOnly = await prisma.reply.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReplyCreateManyAndReturnArgs>(args?: SelectSubset<T, ReplyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Reply.
     * @param {ReplyDeleteArgs} args - Arguments to delete one Reply.
     * @example
     * // Delete one Reply
     * const Reply = await prisma.reply.delete({
     *   where: {
     *     // ... filter to delete one Reply
     *   }
     * })
     * 
     */
    delete<T extends ReplyDeleteArgs>(args: SelectSubset<T, ReplyDeleteArgs<ExtArgs>>): Prisma__ReplyClient<$Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Reply.
     * @param {ReplyUpdateArgs} args - Arguments to update one Reply.
     * @example
     * // Update one Reply
     * const reply = await prisma.reply.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReplyUpdateArgs>(args: SelectSubset<T, ReplyUpdateArgs<ExtArgs>>): Prisma__ReplyClient<$Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Replies.
     * @param {ReplyDeleteManyArgs} args - Arguments to filter Replies to delete.
     * @example
     * // Delete a few Replies
     * const { count } = await prisma.reply.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReplyDeleteManyArgs>(args?: SelectSubset<T, ReplyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Replies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReplyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Replies
     * const reply = await prisma.reply.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReplyUpdateManyArgs>(args: SelectSubset<T, ReplyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reply.
     * @param {ReplyUpsertArgs} args - Arguments to update or create a Reply.
     * @example
     * // Update or create a Reply
     * const reply = await prisma.reply.upsert({
     *   create: {
     *     // ... data to create a Reply
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reply we want to update
     *   }
     * })
     */
    upsert<T extends ReplyUpsertArgs>(args: SelectSubset<T, ReplyUpsertArgs<ExtArgs>>): Prisma__ReplyClient<$Result.GetResult<Prisma.$ReplyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Replies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReplyCountArgs} args - Arguments to filter Replies to count.
     * @example
     * // Count the number of Replies
     * const count = await prisma.reply.count({
     *   where: {
     *     // ... the filter for the Replies we want to count
     *   }
     * })
    **/
    count<T extends ReplyCountArgs>(
      args?: Subset<T, ReplyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReplyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReplyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReplyAggregateArgs>(args: Subset<T, ReplyAggregateArgs>): Prisma.PrismaPromise<GetReplyAggregateType<T>>

    /**
     * Group by Reply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReplyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReplyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReplyGroupByArgs['orderBy'] }
        : { orderBy?: ReplyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReplyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReplyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reply model
   */
  readonly fields: ReplyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reply.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReplyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    communityContent<T extends CommunityContentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommunityContentDefaultArgs<ExtArgs>>): Prisma__CommunityContentClient<$Result.GetResult<Prisma.$CommunityContentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Reply model
   */ 
  interface ReplyFieldRefs {
    readonly id: FieldRef<"Reply", 'Int'>
    readonly communityContentId: FieldRef<"Reply", 'Int'>
    readonly userId: FieldRef<"Reply", 'Int'>
    readonly content: FieldRef<"Reply", 'String'>
    readonly createdAt: FieldRef<"Reply", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Reply findUnique
   */
  export type ReplyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyInclude<ExtArgs> | null
    /**
     * Filter, which Reply to fetch.
     */
    where: ReplyWhereUniqueInput
  }

  /**
   * Reply findUniqueOrThrow
   */
  export type ReplyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyInclude<ExtArgs> | null
    /**
     * Filter, which Reply to fetch.
     */
    where: ReplyWhereUniqueInput
  }

  /**
   * Reply findFirst
   */
  export type ReplyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyInclude<ExtArgs> | null
    /**
     * Filter, which Reply to fetch.
     */
    where?: ReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Replies to fetch.
     */
    orderBy?: ReplyOrderByWithRelationInput | ReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Replies.
     */
    cursor?: ReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Replies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Replies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Replies.
     */
    distinct?: ReplyScalarFieldEnum | ReplyScalarFieldEnum[]
  }

  /**
   * Reply findFirstOrThrow
   */
  export type ReplyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyInclude<ExtArgs> | null
    /**
     * Filter, which Reply to fetch.
     */
    where?: ReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Replies to fetch.
     */
    orderBy?: ReplyOrderByWithRelationInput | ReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Replies.
     */
    cursor?: ReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Replies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Replies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Replies.
     */
    distinct?: ReplyScalarFieldEnum | ReplyScalarFieldEnum[]
  }

  /**
   * Reply findMany
   */
  export type ReplyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyInclude<ExtArgs> | null
    /**
     * Filter, which Replies to fetch.
     */
    where?: ReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Replies to fetch.
     */
    orderBy?: ReplyOrderByWithRelationInput | ReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Replies.
     */
    cursor?: ReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Replies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Replies.
     */
    skip?: number
    distinct?: ReplyScalarFieldEnum | ReplyScalarFieldEnum[]
  }

  /**
   * Reply create
   */
  export type ReplyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyInclude<ExtArgs> | null
    /**
     * The data needed to create a Reply.
     */
    data: XOR<ReplyCreateInput, ReplyUncheckedCreateInput>
  }

  /**
   * Reply createMany
   */
  export type ReplyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Replies.
     */
    data: ReplyCreateManyInput | ReplyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Reply createManyAndReturn
   */
  export type ReplyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Replies.
     */
    data: ReplyCreateManyInput | ReplyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Reply update
   */
  export type ReplyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyInclude<ExtArgs> | null
    /**
     * The data needed to update a Reply.
     */
    data: XOR<ReplyUpdateInput, ReplyUncheckedUpdateInput>
    /**
     * Choose, which Reply to update.
     */
    where: ReplyWhereUniqueInput
  }

  /**
   * Reply updateMany
   */
  export type ReplyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Replies.
     */
    data: XOR<ReplyUpdateManyMutationInput, ReplyUncheckedUpdateManyInput>
    /**
     * Filter which Replies to update
     */
    where?: ReplyWhereInput
  }

  /**
   * Reply upsert
   */
  export type ReplyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyInclude<ExtArgs> | null
    /**
     * The filter to search for the Reply to update in case it exists.
     */
    where: ReplyWhereUniqueInput
    /**
     * In case the Reply found by the `where` argument doesn't exist, create a new Reply with this data.
     */
    create: XOR<ReplyCreateInput, ReplyUncheckedCreateInput>
    /**
     * In case the Reply was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReplyUpdateInput, ReplyUncheckedUpdateInput>
  }

  /**
   * Reply delete
   */
  export type ReplyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyInclude<ExtArgs> | null
    /**
     * Filter which Reply to delete.
     */
    where: ReplyWhereUniqueInput
  }

  /**
   * Reply deleteMany
   */
  export type ReplyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Replies to delete
     */
    where?: ReplyWhereInput
  }

  /**
   * Reply without action
   */
  export type ReplyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReplyInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    universityId: 'universityId',
    name: 'name',
    major: 'major',
    alcoholLevel: 'alcoholLevel',
    madCampStatus: 'madCampStatus',
    email: 'email',
    sex: 'sex',
    mbtiId: 'mbtiId',
    classId: 'classId',
    imageUrl: 'imageUrl',
    preferredAlcoholId: 'preferredAlcoholId',
    leadershipLevel: 'leadershipLevel',
    refreshToken: 'refreshToken',
    birthday: 'birthday',
    registrationStatus: 'registrationStatus',
    programmingLevel: 'programmingLevel',
    programmingField: 'programmingField',
    programmingLanguage: 'programmingLanguage',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const MbtiScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt'
  };

  export type MbtiScalarFieldEnum = (typeof MbtiScalarFieldEnum)[keyof typeof MbtiScalarFieldEnum]


  export const AlcoholScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt'
  };

  export type AlcoholScalarFieldEnum = (typeof AlcoholScalarFieldEnum)[keyof typeof AlcoholScalarFieldEnum]


  export const UniversityScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt'
  };

  export type UniversityScalarFieldEnum = (typeof UniversityScalarFieldEnum)[keyof typeof UniversityScalarFieldEnum]


  export const UserMatchingScalarFieldEnum: {
    id: 'id',
    callerUserId: 'callerUserId',
    calleeUserId: 'calleeUserId',
    comment: 'comment',
    matchingCategoryId: 'matchingCategoryId',
    createdAt: 'createdAt'
  };

  export type UserMatchingScalarFieldEnum = (typeof UserMatchingScalarFieldEnum)[keyof typeof UserMatchingScalarFieldEnum]


  export const MatchingCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt'
  };

  export type MatchingCategoryScalarFieldEnum = (typeof MatchingCategoryScalarFieldEnum)[keyof typeof MatchingCategoryScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const MeetingScalarFieldEnum: {
    id: 'id',
    hostId: 'hostId',
    categoryId: 'categoryId',
    meetingImageUrl: 'meetingImageUrl',
    location: 'location',
    title: 'title',
    keyword: 'keyword',
    description: 'description',
    maxPeople: 'maxPeople',
    startTime: 'startTime',
    endTime: 'endTime',
    createdAt: 'createdAt'
  };

  export type MeetingScalarFieldEnum = (typeof MeetingScalarFieldEnum)[keyof typeof MeetingScalarFieldEnum]


  export const MeetingJoinUserScalarFieldEnum: {
    id: 'id',
    meetingId: 'meetingId',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MeetingJoinUserScalarFieldEnum = (typeof MeetingJoinUserScalarFieldEnum)[keyof typeof MeetingJoinUserScalarFieldEnum]


  export const CommunityScalarFieldEnum: {
    id: 'id',
    title: 'title',
    createdAt: 'createdAt'
  };

  export type CommunityScalarFieldEnum = (typeof CommunityScalarFieldEnum)[keyof typeof CommunityScalarFieldEnum]


  export const CommunityContentScalarFieldEnum: {
    id: 'id',
    communityId: 'communityId',
    writedUserId: 'writedUserId',
    title: 'title',
    content: 'content',
    likeCount: 'likeCount',
    contentImageUrl: 'contentImageUrl',
    createdAt: 'createdAt'
  };

  export type CommunityContentScalarFieldEnum = (typeof CommunityContentScalarFieldEnum)[keyof typeof CommunityContentScalarFieldEnum]


  export const ReplyScalarFieldEnum: {
    id: 'id',
    communityContentId: 'communityContentId',
    userId: 'userId',
    content: 'content',
    createdAt: 'createdAt'
  };

  export type ReplyScalarFieldEnum = (typeof ReplyScalarFieldEnum)[keyof typeof ReplyScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'MadCampStatus'
   */
  export type EnumMadCampStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MadCampStatus'>
    


  /**
   * Reference to a field of type 'MadCampStatus[]'
   */
  export type ListEnumMadCampStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MadCampStatus[]'>
    


  /**
   * Reference to a field of type 'Sex'
   */
  export type EnumSexFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Sex'>
    


  /**
   * Reference to a field of type 'Sex[]'
   */
  export type ListEnumSexFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Sex[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'RegistrationStatus'
   */
  export type EnumRegistrationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RegistrationStatus'>
    


  /**
   * Reference to a field of type 'RegistrationStatus[]'
   */
  export type ListEnumRegistrationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RegistrationStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    universityId?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    major?: StringFilter<"User"> | string
    alcoholLevel?: IntFilter<"User"> | number
    madCampStatus?: EnumMadCampStatusFilter<"User"> | $Enums.MadCampStatus
    email?: StringFilter<"User"> | string
    sex?: EnumSexFilter<"User"> | $Enums.Sex
    mbtiId?: IntFilter<"User"> | number
    classId?: IntFilter<"User"> | number
    imageUrl?: StringNullableFilter<"User"> | string | null
    preferredAlcoholId?: IntFilter<"User"> | number
    leadershipLevel?: IntFilter<"User"> | number
    refreshToken?: StringNullableFilter<"User"> | string | null
    birthday?: DateTimeFilter<"User"> | Date | string
    registrationStatus?: EnumRegistrationStatusFilter<"User"> | $Enums.RegistrationStatus
    programmingLevel?: IntFilter<"User"> | number
    programmingField?: StringFilter<"User"> | string
    programmingLanguage?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    meeting?: MeetingListRelationFilter
    meetingJoinUser?: MeetingJoinUserListRelationFilter
    reply?: ReplyListRelationFilter
    communityContent?: CommunityContentListRelationFilter
    callerUserMatching?: UserMatchingListRelationFilter
    calleeUserMatching?: UserMatchingListRelationFilter
    preferredAlcohol?: XOR<AlcoholRelationFilter, AlcoholWhereInput>
    university?: XOR<UniversityRelationFilter, UniversityWhereInput>
    mbti?: XOR<MbtiRelationFilter, MbtiWhereInput>
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    universityId?: SortOrder
    name?: SortOrder
    major?: SortOrder
    alcoholLevel?: SortOrder
    madCampStatus?: SortOrder
    email?: SortOrder
    sex?: SortOrder
    mbtiId?: SortOrder
    classId?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    preferredAlcoholId?: SortOrder
    leadershipLevel?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    birthday?: SortOrder
    registrationStatus?: SortOrder
    programmingLevel?: SortOrder
    programmingField?: SortOrder
    programmingLanguage?: SortOrder
    createdAt?: SortOrder
    meeting?: MeetingOrderByRelationAggregateInput
    meetingJoinUser?: MeetingJoinUserOrderByRelationAggregateInput
    reply?: ReplyOrderByRelationAggregateInput
    communityContent?: CommunityContentOrderByRelationAggregateInput
    callerUserMatching?: UserMatchingOrderByRelationAggregateInput
    calleeUserMatching?: UserMatchingOrderByRelationAggregateInput
    preferredAlcohol?: AlcoholOrderByWithRelationInput
    university?: UniversityOrderByWithRelationInput
    mbti?: MbtiOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    universityId?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    major?: StringFilter<"User"> | string
    alcoholLevel?: IntFilter<"User"> | number
    madCampStatus?: EnumMadCampStatusFilter<"User"> | $Enums.MadCampStatus
    sex?: EnumSexFilter<"User"> | $Enums.Sex
    mbtiId?: IntFilter<"User"> | number
    classId?: IntFilter<"User"> | number
    imageUrl?: StringNullableFilter<"User"> | string | null
    preferredAlcoholId?: IntFilter<"User"> | number
    leadershipLevel?: IntFilter<"User"> | number
    refreshToken?: StringNullableFilter<"User"> | string | null
    birthday?: DateTimeFilter<"User"> | Date | string
    registrationStatus?: EnumRegistrationStatusFilter<"User"> | $Enums.RegistrationStatus
    programmingLevel?: IntFilter<"User"> | number
    programmingField?: StringFilter<"User"> | string
    programmingLanguage?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    meeting?: MeetingListRelationFilter
    meetingJoinUser?: MeetingJoinUserListRelationFilter
    reply?: ReplyListRelationFilter
    communityContent?: CommunityContentListRelationFilter
    callerUserMatching?: UserMatchingListRelationFilter
    calleeUserMatching?: UserMatchingListRelationFilter
    preferredAlcohol?: XOR<AlcoholRelationFilter, AlcoholWhereInput>
    university?: XOR<UniversityRelationFilter, UniversityWhereInput>
    mbti?: XOR<MbtiRelationFilter, MbtiWhereInput>
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    universityId?: SortOrder
    name?: SortOrder
    major?: SortOrder
    alcoholLevel?: SortOrder
    madCampStatus?: SortOrder
    email?: SortOrder
    sex?: SortOrder
    mbtiId?: SortOrder
    classId?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    preferredAlcoholId?: SortOrder
    leadershipLevel?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    birthday?: SortOrder
    registrationStatus?: SortOrder
    programmingLevel?: SortOrder
    programmingField?: SortOrder
    programmingLanguage?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    universityId?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    major?: StringWithAggregatesFilter<"User"> | string
    alcoholLevel?: IntWithAggregatesFilter<"User"> | number
    madCampStatus?: EnumMadCampStatusWithAggregatesFilter<"User"> | $Enums.MadCampStatus
    email?: StringWithAggregatesFilter<"User"> | string
    sex?: EnumSexWithAggregatesFilter<"User"> | $Enums.Sex
    mbtiId?: IntWithAggregatesFilter<"User"> | number
    classId?: IntWithAggregatesFilter<"User"> | number
    imageUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    preferredAlcoholId?: IntWithAggregatesFilter<"User"> | number
    leadershipLevel?: IntWithAggregatesFilter<"User"> | number
    refreshToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    birthday?: DateTimeWithAggregatesFilter<"User"> | Date | string
    registrationStatus?: EnumRegistrationStatusWithAggregatesFilter<"User"> | $Enums.RegistrationStatus
    programmingLevel?: IntWithAggregatesFilter<"User"> | number
    programmingField?: StringWithAggregatesFilter<"User"> | string
    programmingLanguage?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type MbtiWhereInput = {
    AND?: MbtiWhereInput | MbtiWhereInput[]
    OR?: MbtiWhereInput[]
    NOT?: MbtiWhereInput | MbtiWhereInput[]
    id?: IntFilter<"Mbti"> | number
    name?: StringFilter<"Mbti"> | string
    createdAt?: DateTimeFilter<"Mbti"> | Date | string
    user?: UserListRelationFilter
  }

  export type MbtiOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByRelationAggregateInput
  }

  export type MbtiWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MbtiWhereInput | MbtiWhereInput[]
    OR?: MbtiWhereInput[]
    NOT?: MbtiWhereInput | MbtiWhereInput[]
    name?: StringFilter<"Mbti"> | string
    createdAt?: DateTimeFilter<"Mbti"> | Date | string
    user?: UserListRelationFilter
  }, "id">

  export type MbtiOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    _count?: MbtiCountOrderByAggregateInput
    _avg?: MbtiAvgOrderByAggregateInput
    _max?: MbtiMaxOrderByAggregateInput
    _min?: MbtiMinOrderByAggregateInput
    _sum?: MbtiSumOrderByAggregateInput
  }

  export type MbtiScalarWhereWithAggregatesInput = {
    AND?: MbtiScalarWhereWithAggregatesInput | MbtiScalarWhereWithAggregatesInput[]
    OR?: MbtiScalarWhereWithAggregatesInput[]
    NOT?: MbtiScalarWhereWithAggregatesInput | MbtiScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Mbti"> | number
    name?: StringWithAggregatesFilter<"Mbti"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Mbti"> | Date | string
  }

  export type AlcoholWhereInput = {
    AND?: AlcoholWhereInput | AlcoholWhereInput[]
    OR?: AlcoholWhereInput[]
    NOT?: AlcoholWhereInput | AlcoholWhereInput[]
    id?: IntFilter<"Alcohol"> | number
    name?: StringFilter<"Alcohol"> | string
    createdAt?: DateTimeFilter<"Alcohol"> | Date | string
    user?: UserListRelationFilter
  }

  export type AlcoholOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByRelationAggregateInput
  }

  export type AlcoholWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AlcoholWhereInput | AlcoholWhereInput[]
    OR?: AlcoholWhereInput[]
    NOT?: AlcoholWhereInput | AlcoholWhereInput[]
    name?: StringFilter<"Alcohol"> | string
    createdAt?: DateTimeFilter<"Alcohol"> | Date | string
    user?: UserListRelationFilter
  }, "id">

  export type AlcoholOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    _count?: AlcoholCountOrderByAggregateInput
    _avg?: AlcoholAvgOrderByAggregateInput
    _max?: AlcoholMaxOrderByAggregateInput
    _min?: AlcoholMinOrderByAggregateInput
    _sum?: AlcoholSumOrderByAggregateInput
  }

  export type AlcoholScalarWhereWithAggregatesInput = {
    AND?: AlcoholScalarWhereWithAggregatesInput | AlcoholScalarWhereWithAggregatesInput[]
    OR?: AlcoholScalarWhereWithAggregatesInput[]
    NOT?: AlcoholScalarWhereWithAggregatesInput | AlcoholScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Alcohol"> | number
    name?: StringWithAggregatesFilter<"Alcohol"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Alcohol"> | Date | string
  }

  export type UniversityWhereInput = {
    AND?: UniversityWhereInput | UniversityWhereInput[]
    OR?: UniversityWhereInput[]
    NOT?: UniversityWhereInput | UniversityWhereInput[]
    id?: IntFilter<"University"> | number
    name?: StringFilter<"University"> | string
    createdAt?: DateTimeFilter<"University"> | Date | string
    user?: UserListRelationFilter
  }

  export type UniversityOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByRelationAggregateInput
  }

  export type UniversityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UniversityWhereInput | UniversityWhereInput[]
    OR?: UniversityWhereInput[]
    NOT?: UniversityWhereInput | UniversityWhereInput[]
    name?: StringFilter<"University"> | string
    createdAt?: DateTimeFilter<"University"> | Date | string
    user?: UserListRelationFilter
  }, "id">

  export type UniversityOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    _count?: UniversityCountOrderByAggregateInput
    _avg?: UniversityAvgOrderByAggregateInput
    _max?: UniversityMaxOrderByAggregateInput
    _min?: UniversityMinOrderByAggregateInput
    _sum?: UniversitySumOrderByAggregateInput
  }

  export type UniversityScalarWhereWithAggregatesInput = {
    AND?: UniversityScalarWhereWithAggregatesInput | UniversityScalarWhereWithAggregatesInput[]
    OR?: UniversityScalarWhereWithAggregatesInput[]
    NOT?: UniversityScalarWhereWithAggregatesInput | UniversityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"University"> | number
    name?: StringWithAggregatesFilter<"University"> | string
    createdAt?: DateTimeWithAggregatesFilter<"University"> | Date | string
  }

  export type UserMatchingWhereInput = {
    AND?: UserMatchingWhereInput | UserMatchingWhereInput[]
    OR?: UserMatchingWhereInput[]
    NOT?: UserMatchingWhereInput | UserMatchingWhereInput[]
    id?: IntFilter<"UserMatching"> | number
    callerUserId?: IntFilter<"UserMatching"> | number
    calleeUserId?: IntFilter<"UserMatching"> | number
    comment?: StringFilter<"UserMatching"> | string
    matchingCategoryId?: IntFilter<"UserMatching"> | number
    createdAt?: DateTimeFilter<"UserMatching"> | Date | string
    callerUser?: XOR<UserRelationFilter, UserWhereInput>
    calleeUser?: XOR<UserRelationFilter, UserWhereInput>
    matchingCategory?: XOR<MatchingCategoryRelationFilter, MatchingCategoryWhereInput>
  }

  export type UserMatchingOrderByWithRelationInput = {
    id?: SortOrder
    callerUserId?: SortOrder
    calleeUserId?: SortOrder
    comment?: SortOrder
    matchingCategoryId?: SortOrder
    createdAt?: SortOrder
    callerUser?: UserOrderByWithRelationInput
    calleeUser?: UserOrderByWithRelationInput
    matchingCategory?: MatchingCategoryOrderByWithRelationInput
  }

  export type UserMatchingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserMatchingWhereInput | UserMatchingWhereInput[]
    OR?: UserMatchingWhereInput[]
    NOT?: UserMatchingWhereInput | UserMatchingWhereInput[]
    callerUserId?: IntFilter<"UserMatching"> | number
    calleeUserId?: IntFilter<"UserMatching"> | number
    comment?: StringFilter<"UserMatching"> | string
    matchingCategoryId?: IntFilter<"UserMatching"> | number
    createdAt?: DateTimeFilter<"UserMatching"> | Date | string
    callerUser?: XOR<UserRelationFilter, UserWhereInput>
    calleeUser?: XOR<UserRelationFilter, UserWhereInput>
    matchingCategory?: XOR<MatchingCategoryRelationFilter, MatchingCategoryWhereInput>
  }, "id">

  export type UserMatchingOrderByWithAggregationInput = {
    id?: SortOrder
    callerUserId?: SortOrder
    calleeUserId?: SortOrder
    comment?: SortOrder
    matchingCategoryId?: SortOrder
    createdAt?: SortOrder
    _count?: UserMatchingCountOrderByAggregateInput
    _avg?: UserMatchingAvgOrderByAggregateInput
    _max?: UserMatchingMaxOrderByAggregateInput
    _min?: UserMatchingMinOrderByAggregateInput
    _sum?: UserMatchingSumOrderByAggregateInput
  }

  export type UserMatchingScalarWhereWithAggregatesInput = {
    AND?: UserMatchingScalarWhereWithAggregatesInput | UserMatchingScalarWhereWithAggregatesInput[]
    OR?: UserMatchingScalarWhereWithAggregatesInput[]
    NOT?: UserMatchingScalarWhereWithAggregatesInput | UserMatchingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserMatching"> | number
    callerUserId?: IntWithAggregatesFilter<"UserMatching"> | number
    calleeUserId?: IntWithAggregatesFilter<"UserMatching"> | number
    comment?: StringWithAggregatesFilter<"UserMatching"> | string
    matchingCategoryId?: IntWithAggregatesFilter<"UserMatching"> | number
    createdAt?: DateTimeWithAggregatesFilter<"UserMatching"> | Date | string
  }

  export type MatchingCategoryWhereInput = {
    AND?: MatchingCategoryWhereInput | MatchingCategoryWhereInput[]
    OR?: MatchingCategoryWhereInput[]
    NOT?: MatchingCategoryWhereInput | MatchingCategoryWhereInput[]
    id?: IntFilter<"MatchingCategory"> | number
    name?: StringFilter<"MatchingCategory"> | string
    createdAt?: DateTimeFilter<"MatchingCategory"> | Date | string
    user?: UserMatchingListRelationFilter
  }

  export type MatchingCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    user?: UserMatchingOrderByRelationAggregateInput
  }

  export type MatchingCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MatchingCategoryWhereInput | MatchingCategoryWhereInput[]
    OR?: MatchingCategoryWhereInput[]
    NOT?: MatchingCategoryWhereInput | MatchingCategoryWhereInput[]
    name?: StringFilter<"MatchingCategory"> | string
    createdAt?: DateTimeFilter<"MatchingCategory"> | Date | string
    user?: UserMatchingListRelationFilter
  }, "id">

  export type MatchingCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    _count?: MatchingCategoryCountOrderByAggregateInput
    _avg?: MatchingCategoryAvgOrderByAggregateInput
    _max?: MatchingCategoryMaxOrderByAggregateInput
    _min?: MatchingCategoryMinOrderByAggregateInput
    _sum?: MatchingCategorySumOrderByAggregateInput
  }

  export type MatchingCategoryScalarWhereWithAggregatesInput = {
    AND?: MatchingCategoryScalarWhereWithAggregatesInput | MatchingCategoryScalarWhereWithAggregatesInput[]
    OR?: MatchingCategoryScalarWhereWithAggregatesInput[]
    NOT?: MatchingCategoryScalarWhereWithAggregatesInput | MatchingCategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MatchingCategory"> | number
    name?: StringWithAggregatesFilter<"MatchingCategory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MatchingCategory"> | Date | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    createdAt?: DateTimeFilter<"Category"> | Date | string
    meeting?: MeetingListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    meeting?: MeetingOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    name?: StringFilter<"Category"> | string
    createdAt?: DateTimeFilter<"Category"> | Date | string
    meeting?: MeetingListRelationFilter
  }, "id">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Category"> | number
    name?: StringWithAggregatesFilter<"Category"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
  }

  export type MeetingWhereInput = {
    AND?: MeetingWhereInput | MeetingWhereInput[]
    OR?: MeetingWhereInput[]
    NOT?: MeetingWhereInput | MeetingWhereInput[]
    id?: IntFilter<"Meeting"> | number
    hostId?: IntFilter<"Meeting"> | number
    categoryId?: IntFilter<"Meeting"> | number
    meetingImageUrl?: StringNullableFilter<"Meeting"> | string | null
    location?: StringFilter<"Meeting"> | string
    title?: StringFilter<"Meeting"> | string
    keyword?: StringFilter<"Meeting"> | string
    description?: StringFilter<"Meeting"> | string
    maxPeople?: IntFilter<"Meeting"> | number
    startTime?: DateTimeFilter<"Meeting"> | Date | string
    endTime?: DateTimeFilter<"Meeting"> | Date | string
    createdAt?: DateTimeFilter<"Meeting"> | Date | string
    meetingJoinUser?: MeetingJoinUserListRelationFilter
    host?: XOR<UserRelationFilter, UserWhereInput>
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
  }

  export type MeetingOrderByWithRelationInput = {
    id?: SortOrder
    hostId?: SortOrder
    categoryId?: SortOrder
    meetingImageUrl?: SortOrderInput | SortOrder
    location?: SortOrder
    title?: SortOrder
    keyword?: SortOrder
    description?: SortOrder
    maxPeople?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
    meetingJoinUser?: MeetingJoinUserOrderByRelationAggregateInput
    host?: UserOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
  }

  export type MeetingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MeetingWhereInput | MeetingWhereInput[]
    OR?: MeetingWhereInput[]
    NOT?: MeetingWhereInput | MeetingWhereInput[]
    hostId?: IntFilter<"Meeting"> | number
    categoryId?: IntFilter<"Meeting"> | number
    meetingImageUrl?: StringNullableFilter<"Meeting"> | string | null
    location?: StringFilter<"Meeting"> | string
    title?: StringFilter<"Meeting"> | string
    keyword?: StringFilter<"Meeting"> | string
    description?: StringFilter<"Meeting"> | string
    maxPeople?: IntFilter<"Meeting"> | number
    startTime?: DateTimeFilter<"Meeting"> | Date | string
    endTime?: DateTimeFilter<"Meeting"> | Date | string
    createdAt?: DateTimeFilter<"Meeting"> | Date | string
    meetingJoinUser?: MeetingJoinUserListRelationFilter
    host?: XOR<UserRelationFilter, UserWhereInput>
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
  }, "id">

  export type MeetingOrderByWithAggregationInput = {
    id?: SortOrder
    hostId?: SortOrder
    categoryId?: SortOrder
    meetingImageUrl?: SortOrderInput | SortOrder
    location?: SortOrder
    title?: SortOrder
    keyword?: SortOrder
    description?: SortOrder
    maxPeople?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
    _count?: MeetingCountOrderByAggregateInput
    _avg?: MeetingAvgOrderByAggregateInput
    _max?: MeetingMaxOrderByAggregateInput
    _min?: MeetingMinOrderByAggregateInput
    _sum?: MeetingSumOrderByAggregateInput
  }

  export type MeetingScalarWhereWithAggregatesInput = {
    AND?: MeetingScalarWhereWithAggregatesInput | MeetingScalarWhereWithAggregatesInput[]
    OR?: MeetingScalarWhereWithAggregatesInput[]
    NOT?: MeetingScalarWhereWithAggregatesInput | MeetingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Meeting"> | number
    hostId?: IntWithAggregatesFilter<"Meeting"> | number
    categoryId?: IntWithAggregatesFilter<"Meeting"> | number
    meetingImageUrl?: StringNullableWithAggregatesFilter<"Meeting"> | string | null
    location?: StringWithAggregatesFilter<"Meeting"> | string
    title?: StringWithAggregatesFilter<"Meeting"> | string
    keyword?: StringWithAggregatesFilter<"Meeting"> | string
    description?: StringWithAggregatesFilter<"Meeting"> | string
    maxPeople?: IntWithAggregatesFilter<"Meeting"> | number
    startTime?: DateTimeWithAggregatesFilter<"Meeting"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"Meeting"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Meeting"> | Date | string
  }

  export type MeetingJoinUserWhereInput = {
    AND?: MeetingJoinUserWhereInput | MeetingJoinUserWhereInput[]
    OR?: MeetingJoinUserWhereInput[]
    NOT?: MeetingJoinUserWhereInput | MeetingJoinUserWhereInput[]
    id?: IntFilter<"MeetingJoinUser"> | number
    meetingId?: IntFilter<"MeetingJoinUser"> | number
    userId?: IntFilter<"MeetingJoinUser"> | number
    createdAt?: DateTimeFilter<"MeetingJoinUser"> | Date | string
    updatedAt?: DateTimeFilter<"MeetingJoinUser"> | Date | string
    meeting?: XOR<MeetingRelationFilter, MeetingWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type MeetingJoinUserOrderByWithRelationInput = {
    id?: SortOrder
    meetingId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    meeting?: MeetingOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type MeetingJoinUserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    meetingId_userId?: MeetingJoinUserMeetingIdUserIdCompoundUniqueInput
    AND?: MeetingJoinUserWhereInput | MeetingJoinUserWhereInput[]
    OR?: MeetingJoinUserWhereInput[]
    NOT?: MeetingJoinUserWhereInput | MeetingJoinUserWhereInput[]
    meetingId?: IntFilter<"MeetingJoinUser"> | number
    userId?: IntFilter<"MeetingJoinUser"> | number
    createdAt?: DateTimeFilter<"MeetingJoinUser"> | Date | string
    updatedAt?: DateTimeFilter<"MeetingJoinUser"> | Date | string
    meeting?: XOR<MeetingRelationFilter, MeetingWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "meetingId_userId">

  export type MeetingJoinUserOrderByWithAggregationInput = {
    id?: SortOrder
    meetingId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MeetingJoinUserCountOrderByAggregateInput
    _avg?: MeetingJoinUserAvgOrderByAggregateInput
    _max?: MeetingJoinUserMaxOrderByAggregateInput
    _min?: MeetingJoinUserMinOrderByAggregateInput
    _sum?: MeetingJoinUserSumOrderByAggregateInput
  }

  export type MeetingJoinUserScalarWhereWithAggregatesInput = {
    AND?: MeetingJoinUserScalarWhereWithAggregatesInput | MeetingJoinUserScalarWhereWithAggregatesInput[]
    OR?: MeetingJoinUserScalarWhereWithAggregatesInput[]
    NOT?: MeetingJoinUserScalarWhereWithAggregatesInput | MeetingJoinUserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MeetingJoinUser"> | number
    meetingId?: IntWithAggregatesFilter<"MeetingJoinUser"> | number
    userId?: IntWithAggregatesFilter<"MeetingJoinUser"> | number
    createdAt?: DateTimeWithAggregatesFilter<"MeetingJoinUser"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MeetingJoinUser"> | Date | string
  }

  export type CommunityWhereInput = {
    AND?: CommunityWhereInput | CommunityWhereInput[]
    OR?: CommunityWhereInput[]
    NOT?: CommunityWhereInput | CommunityWhereInput[]
    id?: IntFilter<"Community"> | number
    title?: StringFilter<"Community"> | string
    createdAt?: DateTimeFilter<"Community"> | Date | string
    communityContent?: CommunityContentListRelationFilter
  }

  export type CommunityOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    communityContent?: CommunityContentOrderByRelationAggregateInput
  }

  export type CommunityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommunityWhereInput | CommunityWhereInput[]
    OR?: CommunityWhereInput[]
    NOT?: CommunityWhereInput | CommunityWhereInput[]
    title?: StringFilter<"Community"> | string
    createdAt?: DateTimeFilter<"Community"> | Date | string
    communityContent?: CommunityContentListRelationFilter
  }, "id">

  export type CommunityOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    _count?: CommunityCountOrderByAggregateInput
    _avg?: CommunityAvgOrderByAggregateInput
    _max?: CommunityMaxOrderByAggregateInput
    _min?: CommunityMinOrderByAggregateInput
    _sum?: CommunitySumOrderByAggregateInput
  }

  export type CommunityScalarWhereWithAggregatesInput = {
    AND?: CommunityScalarWhereWithAggregatesInput | CommunityScalarWhereWithAggregatesInput[]
    OR?: CommunityScalarWhereWithAggregatesInput[]
    NOT?: CommunityScalarWhereWithAggregatesInput | CommunityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Community"> | number
    title?: StringWithAggregatesFilter<"Community"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Community"> | Date | string
  }

  export type CommunityContentWhereInput = {
    AND?: CommunityContentWhereInput | CommunityContentWhereInput[]
    OR?: CommunityContentWhereInput[]
    NOT?: CommunityContentWhereInput | CommunityContentWhereInput[]
    id?: IntFilter<"CommunityContent"> | number
    communityId?: IntFilter<"CommunityContent"> | number
    writedUserId?: IntFilter<"CommunityContent"> | number
    title?: StringFilter<"CommunityContent"> | string
    content?: StringFilter<"CommunityContent"> | string
    likeCount?: IntFilter<"CommunityContent"> | number
    contentImageUrl?: StringNullableFilter<"CommunityContent"> | string | null
    createdAt?: DateTimeFilter<"CommunityContent"> | Date | string
    reply?: ReplyListRelationFilter
    writedUser?: XOR<UserRelationFilter, UserWhereInput>
    community?: XOR<CommunityRelationFilter, CommunityWhereInput>
  }

  export type CommunityContentOrderByWithRelationInput = {
    id?: SortOrder
    communityId?: SortOrder
    writedUserId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    likeCount?: SortOrder
    contentImageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    reply?: ReplyOrderByRelationAggregateInput
    writedUser?: UserOrderByWithRelationInput
    community?: CommunityOrderByWithRelationInput
  }

  export type CommunityContentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommunityContentWhereInput | CommunityContentWhereInput[]
    OR?: CommunityContentWhereInput[]
    NOT?: CommunityContentWhereInput | CommunityContentWhereInput[]
    communityId?: IntFilter<"CommunityContent"> | number
    writedUserId?: IntFilter<"CommunityContent"> | number
    title?: StringFilter<"CommunityContent"> | string
    content?: StringFilter<"CommunityContent"> | string
    likeCount?: IntFilter<"CommunityContent"> | number
    contentImageUrl?: StringNullableFilter<"CommunityContent"> | string | null
    createdAt?: DateTimeFilter<"CommunityContent"> | Date | string
    reply?: ReplyListRelationFilter
    writedUser?: XOR<UserRelationFilter, UserWhereInput>
    community?: XOR<CommunityRelationFilter, CommunityWhereInput>
  }, "id">

  export type CommunityContentOrderByWithAggregationInput = {
    id?: SortOrder
    communityId?: SortOrder
    writedUserId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    likeCount?: SortOrder
    contentImageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: CommunityContentCountOrderByAggregateInput
    _avg?: CommunityContentAvgOrderByAggregateInput
    _max?: CommunityContentMaxOrderByAggregateInput
    _min?: CommunityContentMinOrderByAggregateInput
    _sum?: CommunityContentSumOrderByAggregateInput
  }

  export type CommunityContentScalarWhereWithAggregatesInput = {
    AND?: CommunityContentScalarWhereWithAggregatesInput | CommunityContentScalarWhereWithAggregatesInput[]
    OR?: CommunityContentScalarWhereWithAggregatesInput[]
    NOT?: CommunityContentScalarWhereWithAggregatesInput | CommunityContentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CommunityContent"> | number
    communityId?: IntWithAggregatesFilter<"CommunityContent"> | number
    writedUserId?: IntWithAggregatesFilter<"CommunityContent"> | number
    title?: StringWithAggregatesFilter<"CommunityContent"> | string
    content?: StringWithAggregatesFilter<"CommunityContent"> | string
    likeCount?: IntWithAggregatesFilter<"CommunityContent"> | number
    contentImageUrl?: StringNullableWithAggregatesFilter<"CommunityContent"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CommunityContent"> | Date | string
  }

  export type ReplyWhereInput = {
    AND?: ReplyWhereInput | ReplyWhereInput[]
    OR?: ReplyWhereInput[]
    NOT?: ReplyWhereInput | ReplyWhereInput[]
    id?: IntFilter<"Reply"> | number
    communityContentId?: IntFilter<"Reply"> | number
    userId?: IntFilter<"Reply"> | number
    content?: StringFilter<"Reply"> | string
    createdAt?: DateTimeFilter<"Reply"> | Date | string
    communityContent?: XOR<CommunityContentRelationFilter, CommunityContentWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ReplyOrderByWithRelationInput = {
    id?: SortOrder
    communityContentId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    communityContent?: CommunityContentOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ReplyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReplyWhereInput | ReplyWhereInput[]
    OR?: ReplyWhereInput[]
    NOT?: ReplyWhereInput | ReplyWhereInput[]
    communityContentId?: IntFilter<"Reply"> | number
    userId?: IntFilter<"Reply"> | number
    content?: StringFilter<"Reply"> | string
    createdAt?: DateTimeFilter<"Reply"> | Date | string
    communityContent?: XOR<CommunityContentRelationFilter, CommunityContentWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ReplyOrderByWithAggregationInput = {
    id?: SortOrder
    communityContentId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    _count?: ReplyCountOrderByAggregateInput
    _avg?: ReplyAvgOrderByAggregateInput
    _max?: ReplyMaxOrderByAggregateInput
    _min?: ReplyMinOrderByAggregateInput
    _sum?: ReplySumOrderByAggregateInput
  }

  export type ReplyScalarWhereWithAggregatesInput = {
    AND?: ReplyScalarWhereWithAggregatesInput | ReplyScalarWhereWithAggregatesInput[]
    OR?: ReplyScalarWhereWithAggregatesInput[]
    NOT?: ReplyScalarWhereWithAggregatesInput | ReplyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Reply"> | number
    communityContentId?: IntWithAggregatesFilter<"Reply"> | number
    userId?: IntWithAggregatesFilter<"Reply"> | number
    content?: StringWithAggregatesFilter<"Reply"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Reply"> | Date | string
  }

  export type UserCreateInput = {
    name: string
    major: string
    alcoholLevel?: number
    madCampStatus?: $Enums.MadCampStatus
    email: string
    sex?: $Enums.Sex
    classId: number
    imageUrl?: string | null
    leadershipLevel?: number
    refreshToken?: string | null
    birthday: Date | string
    registrationStatus?: $Enums.RegistrationStatus
    programmingLevel?: number
    programmingField: string
    programmingLanguage: string
    createdAt?: Date | string
    meeting?: MeetingCreateNestedManyWithoutHostInput
    meetingJoinUser?: MeetingJoinUserCreateNestedManyWithoutUserInput
    reply?: ReplyCreateNestedManyWithoutUserInput
    communityContent?: CommunityContentCreateNestedManyWithoutWritedUserInput
    callerUserMatching?: UserMatchingCreateNestedManyWithoutCallerUserInput
    calleeUserMatching?: UserMatchingCreateNestedManyWithoutCalleeUserInput
    preferredAlcohol?: AlcoholCreateNestedOneWithoutUserInput
    university: UniversityCreateNestedOneWithoutUserInput
    mbti: MbtiCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    universityId: number
    name: string
    major: string
    alcoholLevel?: number
    madCampStatus?: $Enums.MadCampStatus
    email: string
    sex?: $Enums.Sex
    mbtiId: number
    classId: number
    imageUrl?: string | null
    preferredAlcoholId?: number
    leadershipLevel?: number
    refreshToken?: string | null
    birthday: Date | string
    registrationStatus?: $Enums.RegistrationStatus
    programmingLevel?: number
    programmingField: string
    programmingLanguage: string
    createdAt?: Date | string
    meeting?: MeetingUncheckedCreateNestedManyWithoutHostInput
    meetingJoinUser?: MeetingJoinUserUncheckedCreateNestedManyWithoutUserInput
    reply?: ReplyUncheckedCreateNestedManyWithoutUserInput
    communityContent?: CommunityContentUncheckedCreateNestedManyWithoutWritedUserInput
    callerUserMatching?: UserMatchingUncheckedCreateNestedManyWithoutCallerUserInput
    calleeUserMatching?: UserMatchingUncheckedCreateNestedManyWithoutCalleeUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    alcoholLevel?: IntFieldUpdateOperationsInput | number
    madCampStatus?: EnumMadCampStatusFieldUpdateOperationsInput | $Enums.MadCampStatus
    email?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    classId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipLevel?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationStatus?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    programmingLevel?: IntFieldUpdateOperationsInput | number
    programmingField?: StringFieldUpdateOperationsInput | string
    programmingLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meeting?: MeetingUpdateManyWithoutHostNestedInput
    meetingJoinUser?: MeetingJoinUserUpdateManyWithoutUserNestedInput
    reply?: ReplyUpdateManyWithoutUserNestedInput
    communityContent?: CommunityContentUpdateManyWithoutWritedUserNestedInput
    callerUserMatching?: UserMatchingUpdateManyWithoutCallerUserNestedInput
    calleeUserMatching?: UserMatchingUpdateManyWithoutCalleeUserNestedInput
    preferredAlcohol?: AlcoholUpdateOneRequiredWithoutUserNestedInput
    university?: UniversityUpdateOneRequiredWithoutUserNestedInput
    mbti?: MbtiUpdateOneRequiredWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    universityId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    alcoholLevel?: IntFieldUpdateOperationsInput | number
    madCampStatus?: EnumMadCampStatusFieldUpdateOperationsInput | $Enums.MadCampStatus
    email?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    mbtiId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    preferredAlcoholId?: IntFieldUpdateOperationsInput | number
    leadershipLevel?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationStatus?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    programmingLevel?: IntFieldUpdateOperationsInput | number
    programmingField?: StringFieldUpdateOperationsInput | string
    programmingLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meeting?: MeetingUncheckedUpdateManyWithoutHostNestedInput
    meetingJoinUser?: MeetingJoinUserUncheckedUpdateManyWithoutUserNestedInput
    reply?: ReplyUncheckedUpdateManyWithoutUserNestedInput
    communityContent?: CommunityContentUncheckedUpdateManyWithoutWritedUserNestedInput
    callerUserMatching?: UserMatchingUncheckedUpdateManyWithoutCallerUserNestedInput
    calleeUserMatching?: UserMatchingUncheckedUpdateManyWithoutCalleeUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    universityId: number
    name: string
    major: string
    alcoholLevel?: number
    madCampStatus?: $Enums.MadCampStatus
    email: string
    sex?: $Enums.Sex
    mbtiId: number
    classId: number
    imageUrl?: string | null
    preferredAlcoholId?: number
    leadershipLevel?: number
    refreshToken?: string | null
    birthday: Date | string
    registrationStatus?: $Enums.RegistrationStatus
    programmingLevel?: number
    programmingField: string
    programmingLanguage: string
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    alcoholLevel?: IntFieldUpdateOperationsInput | number
    madCampStatus?: EnumMadCampStatusFieldUpdateOperationsInput | $Enums.MadCampStatus
    email?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    classId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipLevel?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationStatus?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    programmingLevel?: IntFieldUpdateOperationsInput | number
    programmingField?: StringFieldUpdateOperationsInput | string
    programmingLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    universityId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    alcoholLevel?: IntFieldUpdateOperationsInput | number
    madCampStatus?: EnumMadCampStatusFieldUpdateOperationsInput | $Enums.MadCampStatus
    email?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    mbtiId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    preferredAlcoholId?: IntFieldUpdateOperationsInput | number
    leadershipLevel?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationStatus?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    programmingLevel?: IntFieldUpdateOperationsInput | number
    programmingField?: StringFieldUpdateOperationsInput | string
    programmingLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MbtiCreateInput = {
    name: string
    createdAt?: Date | string
    user?: UserCreateNestedManyWithoutMbtiInput
  }

  export type MbtiUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    user?: UserUncheckedCreateNestedManyWithoutMbtiInput
  }

  export type MbtiUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateManyWithoutMbtiNestedInput
  }

  export type MbtiUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUncheckedUpdateManyWithoutMbtiNestedInput
  }

  export type MbtiCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
  }

  export type MbtiUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MbtiUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlcoholCreateInput = {
    name: string
    createdAt?: Date | string
    user?: UserCreateNestedManyWithoutPreferredAlcoholInput
  }

  export type AlcoholUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    user?: UserUncheckedCreateNestedManyWithoutPreferredAlcoholInput
  }

  export type AlcoholUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateManyWithoutPreferredAlcoholNestedInput
  }

  export type AlcoholUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUncheckedUpdateManyWithoutPreferredAlcoholNestedInput
  }

  export type AlcoholCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
  }

  export type AlcoholUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlcoholUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UniversityCreateInput = {
    name: string
    createdAt?: Date | string
    user?: UserCreateNestedManyWithoutUniversityInput
  }

  export type UniversityUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    user?: UserUncheckedCreateNestedManyWithoutUniversityInput
  }

  export type UniversityUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateManyWithoutUniversityNestedInput
  }

  export type UniversityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUncheckedUpdateManyWithoutUniversityNestedInput
  }

  export type UniversityCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
  }

  export type UniversityUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UniversityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMatchingCreateInput = {
    comment: string
    createdAt?: Date | string
    callerUser: UserCreateNestedOneWithoutCallerUserMatchingInput
    calleeUser: UserCreateNestedOneWithoutCalleeUserMatchingInput
    matchingCategory: MatchingCategoryCreateNestedOneWithoutUserInput
  }

  export type UserMatchingUncheckedCreateInput = {
    id?: number
    callerUserId: number
    calleeUserId: number
    comment: string
    matchingCategoryId: number
    createdAt?: Date | string
  }

  export type UserMatchingUpdateInput = {
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    callerUser?: UserUpdateOneRequiredWithoutCallerUserMatchingNestedInput
    calleeUser?: UserUpdateOneRequiredWithoutCalleeUserMatchingNestedInput
    matchingCategory?: MatchingCategoryUpdateOneRequiredWithoutUserNestedInput
  }

  export type UserMatchingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    callerUserId?: IntFieldUpdateOperationsInput | number
    calleeUserId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    matchingCategoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMatchingCreateManyInput = {
    id?: number
    callerUserId: number
    calleeUserId: number
    comment: string
    matchingCategoryId: number
    createdAt?: Date | string
  }

  export type UserMatchingUpdateManyMutationInput = {
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMatchingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    callerUserId?: IntFieldUpdateOperationsInput | number
    calleeUserId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    matchingCategoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchingCategoryCreateInput = {
    name: string
    createdAt?: Date | string
    user?: UserMatchingCreateNestedManyWithoutMatchingCategoryInput
  }

  export type MatchingCategoryUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    user?: UserMatchingUncheckedCreateNestedManyWithoutMatchingCategoryInput
  }

  export type MatchingCategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserMatchingUpdateManyWithoutMatchingCategoryNestedInput
  }

  export type MatchingCategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserMatchingUncheckedUpdateManyWithoutMatchingCategoryNestedInput
  }

  export type MatchingCategoryCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
  }

  export type MatchingCategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchingCategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateInput = {
    name: string
    createdAt?: Date | string
    meeting?: MeetingCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    meeting?: MeetingUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meeting?: MeetingUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meeting?: MeetingUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingCreateInput = {
    meetingImageUrl?: string | null
    location: string
    title: string
    keyword: string
    description: string
    maxPeople: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    meetingJoinUser?: MeetingJoinUserCreateNestedManyWithoutMeetingInput
    host: UserCreateNestedOneWithoutMeetingInput
    category: CategoryCreateNestedOneWithoutMeetingInput
  }

  export type MeetingUncheckedCreateInput = {
    id?: number
    hostId: number
    categoryId: number
    meetingImageUrl?: string | null
    location: string
    title: string
    keyword: string
    description: string
    maxPeople: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    meetingJoinUser?: MeetingJoinUserUncheckedCreateNestedManyWithoutMeetingInput
  }

  export type MeetingUpdateInput = {
    meetingImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    keyword?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maxPeople?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingJoinUser?: MeetingJoinUserUpdateManyWithoutMeetingNestedInput
    host?: UserUpdateOneRequiredWithoutMeetingNestedInput
    category?: CategoryUpdateOneRequiredWithoutMeetingNestedInput
  }

  export type MeetingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    hostId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    meetingImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    keyword?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maxPeople?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingJoinUser?: MeetingJoinUserUncheckedUpdateManyWithoutMeetingNestedInput
  }

  export type MeetingCreateManyInput = {
    id?: number
    hostId: number
    categoryId: number
    meetingImageUrl?: string | null
    location: string
    title: string
    keyword: string
    description: string
    maxPeople: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
  }

  export type MeetingUpdateManyMutationInput = {
    meetingImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    keyword?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maxPeople?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    hostId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    meetingImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    keyword?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maxPeople?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingJoinUserCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    meeting: MeetingCreateNestedOneWithoutMeetingJoinUserInput
    user: UserCreateNestedOneWithoutMeetingJoinUserInput
  }

  export type MeetingJoinUserUncheckedCreateInput = {
    id?: number
    meetingId: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingJoinUserUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meeting?: MeetingUpdateOneRequiredWithoutMeetingJoinUserNestedInput
    user?: UserUpdateOneRequiredWithoutMeetingJoinUserNestedInput
  }

  export type MeetingJoinUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    meetingId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingJoinUserCreateManyInput = {
    id?: number
    meetingId: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingJoinUserUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingJoinUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    meetingId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityCreateInput = {
    title: string
    createdAt?: Date | string
    communityContent?: CommunityContentCreateNestedManyWithoutCommunityInput
  }

  export type CommunityUncheckedCreateInput = {
    id?: number
    title: string
    createdAt?: Date | string
    communityContent?: CommunityContentUncheckedCreateNestedManyWithoutCommunityInput
  }

  export type CommunityUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    communityContent?: CommunityContentUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    communityContent?: CommunityContentUncheckedUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityCreateManyInput = {
    id?: number
    title: string
    createdAt?: Date | string
  }

  export type CommunityUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityContentCreateInput = {
    title: string
    content: string
    likeCount?: number
    contentImageUrl?: string | null
    createdAt?: Date | string
    reply?: ReplyCreateNestedManyWithoutCommunityContentInput
    writedUser: UserCreateNestedOneWithoutCommunityContentInput
    community: CommunityCreateNestedOneWithoutCommunityContentInput
  }

  export type CommunityContentUncheckedCreateInput = {
    id?: number
    communityId: number
    writedUserId: number
    title: string
    content: string
    likeCount?: number
    contentImageUrl?: string | null
    createdAt?: Date | string
    reply?: ReplyUncheckedCreateNestedManyWithoutCommunityContentInput
  }

  export type CommunityContentUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    likeCount?: IntFieldUpdateOperationsInput | number
    contentImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reply?: ReplyUpdateManyWithoutCommunityContentNestedInput
    writedUser?: UserUpdateOneRequiredWithoutCommunityContentNestedInput
    community?: CommunityUpdateOneRequiredWithoutCommunityContentNestedInput
  }

  export type CommunityContentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    communityId?: IntFieldUpdateOperationsInput | number
    writedUserId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    likeCount?: IntFieldUpdateOperationsInput | number
    contentImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reply?: ReplyUncheckedUpdateManyWithoutCommunityContentNestedInput
  }

  export type CommunityContentCreateManyInput = {
    id?: number
    communityId: number
    writedUserId: number
    title: string
    content: string
    likeCount?: number
    contentImageUrl?: string | null
    createdAt?: Date | string
  }

  export type CommunityContentUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    likeCount?: IntFieldUpdateOperationsInput | number
    contentImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityContentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    communityId?: IntFieldUpdateOperationsInput | number
    writedUserId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    likeCount?: IntFieldUpdateOperationsInput | number
    contentImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReplyCreateInput = {
    content: string
    createdAt?: Date | string
    communityContent: CommunityContentCreateNestedOneWithoutReplyInput
    user: UserCreateNestedOneWithoutReplyInput
  }

  export type ReplyUncheckedCreateInput = {
    id?: number
    communityContentId: number
    userId: number
    content: string
    createdAt?: Date | string
  }

  export type ReplyUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    communityContent?: CommunityContentUpdateOneRequiredWithoutReplyNestedInput
    user?: UserUpdateOneRequiredWithoutReplyNestedInput
  }

  export type ReplyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    communityContentId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReplyCreateManyInput = {
    id?: number
    communityContentId: number
    userId: number
    content: string
    createdAt?: Date | string
  }

  export type ReplyUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReplyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    communityContentId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumMadCampStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.MadCampStatus | EnumMadCampStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MadCampStatus[] | ListEnumMadCampStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MadCampStatus[] | ListEnumMadCampStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMadCampStatusFilter<$PrismaModel> | $Enums.MadCampStatus
  }

  export type EnumSexFilter<$PrismaModel = never> = {
    equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel>
    in?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    notIn?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    not?: NestedEnumSexFilter<$PrismaModel> | $Enums.Sex
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumRegistrationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RegistrationStatus | EnumRegistrationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RegistrationStatus[] | ListEnumRegistrationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RegistrationStatus[] | ListEnumRegistrationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRegistrationStatusFilter<$PrismaModel> | $Enums.RegistrationStatus
  }

  export type MeetingListRelationFilter = {
    every?: MeetingWhereInput
    some?: MeetingWhereInput
    none?: MeetingWhereInput
  }

  export type MeetingJoinUserListRelationFilter = {
    every?: MeetingJoinUserWhereInput
    some?: MeetingJoinUserWhereInput
    none?: MeetingJoinUserWhereInput
  }

  export type ReplyListRelationFilter = {
    every?: ReplyWhereInput
    some?: ReplyWhereInput
    none?: ReplyWhereInput
  }

  export type CommunityContentListRelationFilter = {
    every?: CommunityContentWhereInput
    some?: CommunityContentWhereInput
    none?: CommunityContentWhereInput
  }

  export type UserMatchingListRelationFilter = {
    every?: UserMatchingWhereInput
    some?: UserMatchingWhereInput
    none?: UserMatchingWhereInput
  }

  export type AlcoholRelationFilter = {
    is?: AlcoholWhereInput
    isNot?: AlcoholWhereInput
  }

  export type UniversityRelationFilter = {
    is?: UniversityWhereInput
    isNot?: UniversityWhereInput
  }

  export type MbtiRelationFilter = {
    is?: MbtiWhereInput
    isNot?: MbtiWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MeetingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MeetingJoinUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReplyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommunityContentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserMatchingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    universityId?: SortOrder
    name?: SortOrder
    major?: SortOrder
    alcoholLevel?: SortOrder
    madCampStatus?: SortOrder
    email?: SortOrder
    sex?: SortOrder
    mbtiId?: SortOrder
    classId?: SortOrder
    imageUrl?: SortOrder
    preferredAlcoholId?: SortOrder
    leadershipLevel?: SortOrder
    refreshToken?: SortOrder
    birthday?: SortOrder
    registrationStatus?: SortOrder
    programmingLevel?: SortOrder
    programmingField?: SortOrder
    programmingLanguage?: SortOrder
    createdAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    universityId?: SortOrder
    alcoholLevel?: SortOrder
    mbtiId?: SortOrder
    classId?: SortOrder
    preferredAlcoholId?: SortOrder
    leadershipLevel?: SortOrder
    programmingLevel?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    universityId?: SortOrder
    name?: SortOrder
    major?: SortOrder
    alcoholLevel?: SortOrder
    madCampStatus?: SortOrder
    email?: SortOrder
    sex?: SortOrder
    mbtiId?: SortOrder
    classId?: SortOrder
    imageUrl?: SortOrder
    preferredAlcoholId?: SortOrder
    leadershipLevel?: SortOrder
    refreshToken?: SortOrder
    birthday?: SortOrder
    registrationStatus?: SortOrder
    programmingLevel?: SortOrder
    programmingField?: SortOrder
    programmingLanguage?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    universityId?: SortOrder
    name?: SortOrder
    major?: SortOrder
    alcoholLevel?: SortOrder
    madCampStatus?: SortOrder
    email?: SortOrder
    sex?: SortOrder
    mbtiId?: SortOrder
    classId?: SortOrder
    imageUrl?: SortOrder
    preferredAlcoholId?: SortOrder
    leadershipLevel?: SortOrder
    refreshToken?: SortOrder
    birthday?: SortOrder
    registrationStatus?: SortOrder
    programmingLevel?: SortOrder
    programmingField?: SortOrder
    programmingLanguage?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    universityId?: SortOrder
    alcoholLevel?: SortOrder
    mbtiId?: SortOrder
    classId?: SortOrder
    preferredAlcoholId?: SortOrder
    leadershipLevel?: SortOrder
    programmingLevel?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumMadCampStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MadCampStatus | EnumMadCampStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MadCampStatus[] | ListEnumMadCampStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MadCampStatus[] | ListEnumMadCampStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMadCampStatusWithAggregatesFilter<$PrismaModel> | $Enums.MadCampStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMadCampStatusFilter<$PrismaModel>
    _max?: NestedEnumMadCampStatusFilter<$PrismaModel>
  }

  export type EnumSexWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel>
    in?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    notIn?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    not?: NestedEnumSexWithAggregatesFilter<$PrismaModel> | $Enums.Sex
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSexFilter<$PrismaModel>
    _max?: NestedEnumSexFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumRegistrationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RegistrationStatus | EnumRegistrationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RegistrationStatus[] | ListEnumRegistrationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RegistrationStatus[] | ListEnumRegistrationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRegistrationStatusWithAggregatesFilter<$PrismaModel> | $Enums.RegistrationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRegistrationStatusFilter<$PrismaModel>
    _max?: NestedEnumRegistrationStatusFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MbtiCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type MbtiAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MbtiMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type MbtiMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type MbtiSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AlcoholCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type AlcoholAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AlcoholMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type AlcoholMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type AlcoholSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UniversityCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type UniversityAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UniversityMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type UniversityMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type UniversitySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type MatchingCategoryRelationFilter = {
    is?: MatchingCategoryWhereInput
    isNot?: MatchingCategoryWhereInput
  }

  export type UserMatchingCountOrderByAggregateInput = {
    id?: SortOrder
    callerUserId?: SortOrder
    calleeUserId?: SortOrder
    comment?: SortOrder
    matchingCategoryId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMatchingAvgOrderByAggregateInput = {
    id?: SortOrder
    callerUserId?: SortOrder
    calleeUserId?: SortOrder
    matchingCategoryId?: SortOrder
  }

  export type UserMatchingMaxOrderByAggregateInput = {
    id?: SortOrder
    callerUserId?: SortOrder
    calleeUserId?: SortOrder
    comment?: SortOrder
    matchingCategoryId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMatchingMinOrderByAggregateInput = {
    id?: SortOrder
    callerUserId?: SortOrder
    calleeUserId?: SortOrder
    comment?: SortOrder
    matchingCategoryId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMatchingSumOrderByAggregateInput = {
    id?: SortOrder
    callerUserId?: SortOrder
    calleeUserId?: SortOrder
    matchingCategoryId?: SortOrder
  }

  export type MatchingCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type MatchingCategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MatchingCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type MatchingCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type MatchingCategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type MeetingCountOrderByAggregateInput = {
    id?: SortOrder
    hostId?: SortOrder
    categoryId?: SortOrder
    meetingImageUrl?: SortOrder
    location?: SortOrder
    title?: SortOrder
    keyword?: SortOrder
    description?: SortOrder
    maxPeople?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
  }

  export type MeetingAvgOrderByAggregateInput = {
    id?: SortOrder
    hostId?: SortOrder
    categoryId?: SortOrder
    maxPeople?: SortOrder
  }

  export type MeetingMaxOrderByAggregateInput = {
    id?: SortOrder
    hostId?: SortOrder
    categoryId?: SortOrder
    meetingImageUrl?: SortOrder
    location?: SortOrder
    title?: SortOrder
    keyword?: SortOrder
    description?: SortOrder
    maxPeople?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
  }

  export type MeetingMinOrderByAggregateInput = {
    id?: SortOrder
    hostId?: SortOrder
    categoryId?: SortOrder
    meetingImageUrl?: SortOrder
    location?: SortOrder
    title?: SortOrder
    keyword?: SortOrder
    description?: SortOrder
    maxPeople?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
  }

  export type MeetingSumOrderByAggregateInput = {
    id?: SortOrder
    hostId?: SortOrder
    categoryId?: SortOrder
    maxPeople?: SortOrder
  }

  export type MeetingRelationFilter = {
    is?: MeetingWhereInput
    isNot?: MeetingWhereInput
  }

  export type MeetingJoinUserMeetingIdUserIdCompoundUniqueInput = {
    meetingId: number
    userId: number
  }

  export type MeetingJoinUserCountOrderByAggregateInput = {
    id?: SortOrder
    meetingId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingJoinUserAvgOrderByAggregateInput = {
    id?: SortOrder
    meetingId?: SortOrder
    userId?: SortOrder
  }

  export type MeetingJoinUserMaxOrderByAggregateInput = {
    id?: SortOrder
    meetingId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingJoinUserMinOrderByAggregateInput = {
    id?: SortOrder
    meetingId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingJoinUserSumOrderByAggregateInput = {
    id?: SortOrder
    meetingId?: SortOrder
    userId?: SortOrder
  }

  export type CommunityCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
  }

  export type CommunityAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CommunityMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
  }

  export type CommunityMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
  }

  export type CommunitySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CommunityRelationFilter = {
    is?: CommunityWhereInput
    isNot?: CommunityWhereInput
  }

  export type CommunityContentCountOrderByAggregateInput = {
    id?: SortOrder
    communityId?: SortOrder
    writedUserId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    likeCount?: SortOrder
    contentImageUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type CommunityContentAvgOrderByAggregateInput = {
    id?: SortOrder
    communityId?: SortOrder
    writedUserId?: SortOrder
    likeCount?: SortOrder
  }

  export type CommunityContentMaxOrderByAggregateInput = {
    id?: SortOrder
    communityId?: SortOrder
    writedUserId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    likeCount?: SortOrder
    contentImageUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type CommunityContentMinOrderByAggregateInput = {
    id?: SortOrder
    communityId?: SortOrder
    writedUserId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    likeCount?: SortOrder
    contentImageUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type CommunityContentSumOrderByAggregateInput = {
    id?: SortOrder
    communityId?: SortOrder
    writedUserId?: SortOrder
    likeCount?: SortOrder
  }

  export type CommunityContentRelationFilter = {
    is?: CommunityContentWhereInput
    isNot?: CommunityContentWhereInput
  }

  export type ReplyCountOrderByAggregateInput = {
    id?: SortOrder
    communityContentId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type ReplyAvgOrderByAggregateInput = {
    id?: SortOrder
    communityContentId?: SortOrder
    userId?: SortOrder
  }

  export type ReplyMaxOrderByAggregateInput = {
    id?: SortOrder
    communityContentId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type ReplyMinOrderByAggregateInput = {
    id?: SortOrder
    communityContentId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type ReplySumOrderByAggregateInput = {
    id?: SortOrder
    communityContentId?: SortOrder
    userId?: SortOrder
  }

  export type MeetingCreateNestedManyWithoutHostInput = {
    create?: XOR<MeetingCreateWithoutHostInput, MeetingUncheckedCreateWithoutHostInput> | MeetingCreateWithoutHostInput[] | MeetingUncheckedCreateWithoutHostInput[]
    connectOrCreate?: MeetingCreateOrConnectWithoutHostInput | MeetingCreateOrConnectWithoutHostInput[]
    createMany?: MeetingCreateManyHostInputEnvelope
    connect?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
  }

  export type MeetingJoinUserCreateNestedManyWithoutUserInput = {
    create?: XOR<MeetingJoinUserCreateWithoutUserInput, MeetingJoinUserUncheckedCreateWithoutUserInput> | MeetingJoinUserCreateWithoutUserInput[] | MeetingJoinUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MeetingJoinUserCreateOrConnectWithoutUserInput | MeetingJoinUserCreateOrConnectWithoutUserInput[]
    createMany?: MeetingJoinUserCreateManyUserInputEnvelope
    connect?: MeetingJoinUserWhereUniqueInput | MeetingJoinUserWhereUniqueInput[]
  }

  export type ReplyCreateNestedManyWithoutUserInput = {
    create?: XOR<ReplyCreateWithoutUserInput, ReplyUncheckedCreateWithoutUserInput> | ReplyCreateWithoutUserInput[] | ReplyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReplyCreateOrConnectWithoutUserInput | ReplyCreateOrConnectWithoutUserInput[]
    createMany?: ReplyCreateManyUserInputEnvelope
    connect?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
  }

  export type CommunityContentCreateNestedManyWithoutWritedUserInput = {
    create?: XOR<CommunityContentCreateWithoutWritedUserInput, CommunityContentUncheckedCreateWithoutWritedUserInput> | CommunityContentCreateWithoutWritedUserInput[] | CommunityContentUncheckedCreateWithoutWritedUserInput[]
    connectOrCreate?: CommunityContentCreateOrConnectWithoutWritedUserInput | CommunityContentCreateOrConnectWithoutWritedUserInput[]
    createMany?: CommunityContentCreateManyWritedUserInputEnvelope
    connect?: CommunityContentWhereUniqueInput | CommunityContentWhereUniqueInput[]
  }

  export type UserMatchingCreateNestedManyWithoutCallerUserInput = {
    create?: XOR<UserMatchingCreateWithoutCallerUserInput, UserMatchingUncheckedCreateWithoutCallerUserInput> | UserMatchingCreateWithoutCallerUserInput[] | UserMatchingUncheckedCreateWithoutCallerUserInput[]
    connectOrCreate?: UserMatchingCreateOrConnectWithoutCallerUserInput | UserMatchingCreateOrConnectWithoutCallerUserInput[]
    createMany?: UserMatchingCreateManyCallerUserInputEnvelope
    connect?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
  }

  export type UserMatchingCreateNestedManyWithoutCalleeUserInput = {
    create?: XOR<UserMatchingCreateWithoutCalleeUserInput, UserMatchingUncheckedCreateWithoutCalleeUserInput> | UserMatchingCreateWithoutCalleeUserInput[] | UserMatchingUncheckedCreateWithoutCalleeUserInput[]
    connectOrCreate?: UserMatchingCreateOrConnectWithoutCalleeUserInput | UserMatchingCreateOrConnectWithoutCalleeUserInput[]
    createMany?: UserMatchingCreateManyCalleeUserInputEnvelope
    connect?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
  }

  export type AlcoholCreateNestedOneWithoutUserInput = {
    create?: XOR<AlcoholCreateWithoutUserInput, AlcoholUncheckedCreateWithoutUserInput>
    connectOrCreate?: AlcoholCreateOrConnectWithoutUserInput
    connect?: AlcoholWhereUniqueInput
  }

  export type UniversityCreateNestedOneWithoutUserInput = {
    create?: XOR<UniversityCreateWithoutUserInput, UniversityUncheckedCreateWithoutUserInput>
    connectOrCreate?: UniversityCreateOrConnectWithoutUserInput
    connect?: UniversityWhereUniqueInput
  }

  export type MbtiCreateNestedOneWithoutUserInput = {
    create?: XOR<MbtiCreateWithoutUserInput, MbtiUncheckedCreateWithoutUserInput>
    connectOrCreate?: MbtiCreateOrConnectWithoutUserInput
    connect?: MbtiWhereUniqueInput
  }

  export type MeetingUncheckedCreateNestedManyWithoutHostInput = {
    create?: XOR<MeetingCreateWithoutHostInput, MeetingUncheckedCreateWithoutHostInput> | MeetingCreateWithoutHostInput[] | MeetingUncheckedCreateWithoutHostInput[]
    connectOrCreate?: MeetingCreateOrConnectWithoutHostInput | MeetingCreateOrConnectWithoutHostInput[]
    createMany?: MeetingCreateManyHostInputEnvelope
    connect?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
  }

  export type MeetingJoinUserUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MeetingJoinUserCreateWithoutUserInput, MeetingJoinUserUncheckedCreateWithoutUserInput> | MeetingJoinUserCreateWithoutUserInput[] | MeetingJoinUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MeetingJoinUserCreateOrConnectWithoutUserInput | MeetingJoinUserCreateOrConnectWithoutUserInput[]
    createMany?: MeetingJoinUserCreateManyUserInputEnvelope
    connect?: MeetingJoinUserWhereUniqueInput | MeetingJoinUserWhereUniqueInput[]
  }

  export type ReplyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReplyCreateWithoutUserInput, ReplyUncheckedCreateWithoutUserInput> | ReplyCreateWithoutUserInput[] | ReplyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReplyCreateOrConnectWithoutUserInput | ReplyCreateOrConnectWithoutUserInput[]
    createMany?: ReplyCreateManyUserInputEnvelope
    connect?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
  }

  export type CommunityContentUncheckedCreateNestedManyWithoutWritedUserInput = {
    create?: XOR<CommunityContentCreateWithoutWritedUserInput, CommunityContentUncheckedCreateWithoutWritedUserInput> | CommunityContentCreateWithoutWritedUserInput[] | CommunityContentUncheckedCreateWithoutWritedUserInput[]
    connectOrCreate?: CommunityContentCreateOrConnectWithoutWritedUserInput | CommunityContentCreateOrConnectWithoutWritedUserInput[]
    createMany?: CommunityContentCreateManyWritedUserInputEnvelope
    connect?: CommunityContentWhereUniqueInput | CommunityContentWhereUniqueInput[]
  }

  export type UserMatchingUncheckedCreateNestedManyWithoutCallerUserInput = {
    create?: XOR<UserMatchingCreateWithoutCallerUserInput, UserMatchingUncheckedCreateWithoutCallerUserInput> | UserMatchingCreateWithoutCallerUserInput[] | UserMatchingUncheckedCreateWithoutCallerUserInput[]
    connectOrCreate?: UserMatchingCreateOrConnectWithoutCallerUserInput | UserMatchingCreateOrConnectWithoutCallerUserInput[]
    createMany?: UserMatchingCreateManyCallerUserInputEnvelope
    connect?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
  }

  export type UserMatchingUncheckedCreateNestedManyWithoutCalleeUserInput = {
    create?: XOR<UserMatchingCreateWithoutCalleeUserInput, UserMatchingUncheckedCreateWithoutCalleeUserInput> | UserMatchingCreateWithoutCalleeUserInput[] | UserMatchingUncheckedCreateWithoutCalleeUserInput[]
    connectOrCreate?: UserMatchingCreateOrConnectWithoutCalleeUserInput | UserMatchingCreateOrConnectWithoutCalleeUserInput[]
    createMany?: UserMatchingCreateManyCalleeUserInputEnvelope
    connect?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumMadCampStatusFieldUpdateOperationsInput = {
    set?: $Enums.MadCampStatus
  }

  export type EnumSexFieldUpdateOperationsInput = {
    set?: $Enums.Sex
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumRegistrationStatusFieldUpdateOperationsInput = {
    set?: $Enums.RegistrationStatus
  }

  export type MeetingUpdateManyWithoutHostNestedInput = {
    create?: XOR<MeetingCreateWithoutHostInput, MeetingUncheckedCreateWithoutHostInput> | MeetingCreateWithoutHostInput[] | MeetingUncheckedCreateWithoutHostInput[]
    connectOrCreate?: MeetingCreateOrConnectWithoutHostInput | MeetingCreateOrConnectWithoutHostInput[]
    upsert?: MeetingUpsertWithWhereUniqueWithoutHostInput | MeetingUpsertWithWhereUniqueWithoutHostInput[]
    createMany?: MeetingCreateManyHostInputEnvelope
    set?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    disconnect?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    delete?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    connect?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    update?: MeetingUpdateWithWhereUniqueWithoutHostInput | MeetingUpdateWithWhereUniqueWithoutHostInput[]
    updateMany?: MeetingUpdateManyWithWhereWithoutHostInput | MeetingUpdateManyWithWhereWithoutHostInput[]
    deleteMany?: MeetingScalarWhereInput | MeetingScalarWhereInput[]
  }

  export type MeetingJoinUserUpdateManyWithoutUserNestedInput = {
    create?: XOR<MeetingJoinUserCreateWithoutUserInput, MeetingJoinUserUncheckedCreateWithoutUserInput> | MeetingJoinUserCreateWithoutUserInput[] | MeetingJoinUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MeetingJoinUserCreateOrConnectWithoutUserInput | MeetingJoinUserCreateOrConnectWithoutUserInput[]
    upsert?: MeetingJoinUserUpsertWithWhereUniqueWithoutUserInput | MeetingJoinUserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MeetingJoinUserCreateManyUserInputEnvelope
    set?: MeetingJoinUserWhereUniqueInput | MeetingJoinUserWhereUniqueInput[]
    disconnect?: MeetingJoinUserWhereUniqueInput | MeetingJoinUserWhereUniqueInput[]
    delete?: MeetingJoinUserWhereUniqueInput | MeetingJoinUserWhereUniqueInput[]
    connect?: MeetingJoinUserWhereUniqueInput | MeetingJoinUserWhereUniqueInput[]
    update?: MeetingJoinUserUpdateWithWhereUniqueWithoutUserInput | MeetingJoinUserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MeetingJoinUserUpdateManyWithWhereWithoutUserInput | MeetingJoinUserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MeetingJoinUserScalarWhereInput | MeetingJoinUserScalarWhereInput[]
  }

  export type ReplyUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReplyCreateWithoutUserInput, ReplyUncheckedCreateWithoutUserInput> | ReplyCreateWithoutUserInput[] | ReplyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReplyCreateOrConnectWithoutUserInput | ReplyCreateOrConnectWithoutUserInput[]
    upsert?: ReplyUpsertWithWhereUniqueWithoutUserInput | ReplyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReplyCreateManyUserInputEnvelope
    set?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    disconnect?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    delete?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    connect?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    update?: ReplyUpdateWithWhereUniqueWithoutUserInput | ReplyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReplyUpdateManyWithWhereWithoutUserInput | ReplyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReplyScalarWhereInput | ReplyScalarWhereInput[]
  }

  export type CommunityContentUpdateManyWithoutWritedUserNestedInput = {
    create?: XOR<CommunityContentCreateWithoutWritedUserInput, CommunityContentUncheckedCreateWithoutWritedUserInput> | CommunityContentCreateWithoutWritedUserInput[] | CommunityContentUncheckedCreateWithoutWritedUserInput[]
    connectOrCreate?: CommunityContentCreateOrConnectWithoutWritedUserInput | CommunityContentCreateOrConnectWithoutWritedUserInput[]
    upsert?: CommunityContentUpsertWithWhereUniqueWithoutWritedUserInput | CommunityContentUpsertWithWhereUniqueWithoutWritedUserInput[]
    createMany?: CommunityContentCreateManyWritedUserInputEnvelope
    set?: CommunityContentWhereUniqueInput | CommunityContentWhereUniqueInput[]
    disconnect?: CommunityContentWhereUniqueInput | CommunityContentWhereUniqueInput[]
    delete?: CommunityContentWhereUniqueInput | CommunityContentWhereUniqueInput[]
    connect?: CommunityContentWhereUniqueInput | CommunityContentWhereUniqueInput[]
    update?: CommunityContentUpdateWithWhereUniqueWithoutWritedUserInput | CommunityContentUpdateWithWhereUniqueWithoutWritedUserInput[]
    updateMany?: CommunityContentUpdateManyWithWhereWithoutWritedUserInput | CommunityContentUpdateManyWithWhereWithoutWritedUserInput[]
    deleteMany?: CommunityContentScalarWhereInput | CommunityContentScalarWhereInput[]
  }

  export type UserMatchingUpdateManyWithoutCallerUserNestedInput = {
    create?: XOR<UserMatchingCreateWithoutCallerUserInput, UserMatchingUncheckedCreateWithoutCallerUserInput> | UserMatchingCreateWithoutCallerUserInput[] | UserMatchingUncheckedCreateWithoutCallerUserInput[]
    connectOrCreate?: UserMatchingCreateOrConnectWithoutCallerUserInput | UserMatchingCreateOrConnectWithoutCallerUserInput[]
    upsert?: UserMatchingUpsertWithWhereUniqueWithoutCallerUserInput | UserMatchingUpsertWithWhereUniqueWithoutCallerUserInput[]
    createMany?: UserMatchingCreateManyCallerUserInputEnvelope
    set?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
    disconnect?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
    delete?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
    connect?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
    update?: UserMatchingUpdateWithWhereUniqueWithoutCallerUserInput | UserMatchingUpdateWithWhereUniqueWithoutCallerUserInput[]
    updateMany?: UserMatchingUpdateManyWithWhereWithoutCallerUserInput | UserMatchingUpdateManyWithWhereWithoutCallerUserInput[]
    deleteMany?: UserMatchingScalarWhereInput | UserMatchingScalarWhereInput[]
  }

  export type UserMatchingUpdateManyWithoutCalleeUserNestedInput = {
    create?: XOR<UserMatchingCreateWithoutCalleeUserInput, UserMatchingUncheckedCreateWithoutCalleeUserInput> | UserMatchingCreateWithoutCalleeUserInput[] | UserMatchingUncheckedCreateWithoutCalleeUserInput[]
    connectOrCreate?: UserMatchingCreateOrConnectWithoutCalleeUserInput | UserMatchingCreateOrConnectWithoutCalleeUserInput[]
    upsert?: UserMatchingUpsertWithWhereUniqueWithoutCalleeUserInput | UserMatchingUpsertWithWhereUniqueWithoutCalleeUserInput[]
    createMany?: UserMatchingCreateManyCalleeUserInputEnvelope
    set?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
    disconnect?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
    delete?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
    connect?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
    update?: UserMatchingUpdateWithWhereUniqueWithoutCalleeUserInput | UserMatchingUpdateWithWhereUniqueWithoutCalleeUserInput[]
    updateMany?: UserMatchingUpdateManyWithWhereWithoutCalleeUserInput | UserMatchingUpdateManyWithWhereWithoutCalleeUserInput[]
    deleteMany?: UserMatchingScalarWhereInput | UserMatchingScalarWhereInput[]
  }

  export type AlcoholUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<AlcoholCreateWithoutUserInput, AlcoholUncheckedCreateWithoutUserInput>
    connectOrCreate?: AlcoholCreateOrConnectWithoutUserInput
    upsert?: AlcoholUpsertWithoutUserInput
    connect?: AlcoholWhereUniqueInput
    update?: XOR<XOR<AlcoholUpdateToOneWithWhereWithoutUserInput, AlcoholUpdateWithoutUserInput>, AlcoholUncheckedUpdateWithoutUserInput>
  }

  export type UniversityUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<UniversityCreateWithoutUserInput, UniversityUncheckedCreateWithoutUserInput>
    connectOrCreate?: UniversityCreateOrConnectWithoutUserInput
    upsert?: UniversityUpsertWithoutUserInput
    connect?: UniversityWhereUniqueInput
    update?: XOR<XOR<UniversityUpdateToOneWithWhereWithoutUserInput, UniversityUpdateWithoutUserInput>, UniversityUncheckedUpdateWithoutUserInput>
  }

  export type MbtiUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<MbtiCreateWithoutUserInput, MbtiUncheckedCreateWithoutUserInput>
    connectOrCreate?: MbtiCreateOrConnectWithoutUserInput
    upsert?: MbtiUpsertWithoutUserInput
    connect?: MbtiWhereUniqueInput
    update?: XOR<XOR<MbtiUpdateToOneWithWhereWithoutUserInput, MbtiUpdateWithoutUserInput>, MbtiUncheckedUpdateWithoutUserInput>
  }

  export type MeetingUncheckedUpdateManyWithoutHostNestedInput = {
    create?: XOR<MeetingCreateWithoutHostInput, MeetingUncheckedCreateWithoutHostInput> | MeetingCreateWithoutHostInput[] | MeetingUncheckedCreateWithoutHostInput[]
    connectOrCreate?: MeetingCreateOrConnectWithoutHostInput | MeetingCreateOrConnectWithoutHostInput[]
    upsert?: MeetingUpsertWithWhereUniqueWithoutHostInput | MeetingUpsertWithWhereUniqueWithoutHostInput[]
    createMany?: MeetingCreateManyHostInputEnvelope
    set?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    disconnect?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    delete?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    connect?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    update?: MeetingUpdateWithWhereUniqueWithoutHostInput | MeetingUpdateWithWhereUniqueWithoutHostInput[]
    updateMany?: MeetingUpdateManyWithWhereWithoutHostInput | MeetingUpdateManyWithWhereWithoutHostInput[]
    deleteMany?: MeetingScalarWhereInput | MeetingScalarWhereInput[]
  }

  export type MeetingJoinUserUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MeetingJoinUserCreateWithoutUserInput, MeetingJoinUserUncheckedCreateWithoutUserInput> | MeetingJoinUserCreateWithoutUserInput[] | MeetingJoinUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MeetingJoinUserCreateOrConnectWithoutUserInput | MeetingJoinUserCreateOrConnectWithoutUserInput[]
    upsert?: MeetingJoinUserUpsertWithWhereUniqueWithoutUserInput | MeetingJoinUserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MeetingJoinUserCreateManyUserInputEnvelope
    set?: MeetingJoinUserWhereUniqueInput | MeetingJoinUserWhereUniqueInput[]
    disconnect?: MeetingJoinUserWhereUniqueInput | MeetingJoinUserWhereUniqueInput[]
    delete?: MeetingJoinUserWhereUniqueInput | MeetingJoinUserWhereUniqueInput[]
    connect?: MeetingJoinUserWhereUniqueInput | MeetingJoinUserWhereUniqueInput[]
    update?: MeetingJoinUserUpdateWithWhereUniqueWithoutUserInput | MeetingJoinUserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MeetingJoinUserUpdateManyWithWhereWithoutUserInput | MeetingJoinUserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MeetingJoinUserScalarWhereInput | MeetingJoinUserScalarWhereInput[]
  }

  export type ReplyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReplyCreateWithoutUserInput, ReplyUncheckedCreateWithoutUserInput> | ReplyCreateWithoutUserInput[] | ReplyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReplyCreateOrConnectWithoutUserInput | ReplyCreateOrConnectWithoutUserInput[]
    upsert?: ReplyUpsertWithWhereUniqueWithoutUserInput | ReplyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReplyCreateManyUserInputEnvelope
    set?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    disconnect?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    delete?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    connect?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    update?: ReplyUpdateWithWhereUniqueWithoutUserInput | ReplyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReplyUpdateManyWithWhereWithoutUserInput | ReplyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReplyScalarWhereInput | ReplyScalarWhereInput[]
  }

  export type CommunityContentUncheckedUpdateManyWithoutWritedUserNestedInput = {
    create?: XOR<CommunityContentCreateWithoutWritedUserInput, CommunityContentUncheckedCreateWithoutWritedUserInput> | CommunityContentCreateWithoutWritedUserInput[] | CommunityContentUncheckedCreateWithoutWritedUserInput[]
    connectOrCreate?: CommunityContentCreateOrConnectWithoutWritedUserInput | CommunityContentCreateOrConnectWithoutWritedUserInput[]
    upsert?: CommunityContentUpsertWithWhereUniqueWithoutWritedUserInput | CommunityContentUpsertWithWhereUniqueWithoutWritedUserInput[]
    createMany?: CommunityContentCreateManyWritedUserInputEnvelope
    set?: CommunityContentWhereUniqueInput | CommunityContentWhereUniqueInput[]
    disconnect?: CommunityContentWhereUniqueInput | CommunityContentWhereUniqueInput[]
    delete?: CommunityContentWhereUniqueInput | CommunityContentWhereUniqueInput[]
    connect?: CommunityContentWhereUniqueInput | CommunityContentWhereUniqueInput[]
    update?: CommunityContentUpdateWithWhereUniqueWithoutWritedUserInput | CommunityContentUpdateWithWhereUniqueWithoutWritedUserInput[]
    updateMany?: CommunityContentUpdateManyWithWhereWithoutWritedUserInput | CommunityContentUpdateManyWithWhereWithoutWritedUserInput[]
    deleteMany?: CommunityContentScalarWhereInput | CommunityContentScalarWhereInput[]
  }

  export type UserMatchingUncheckedUpdateManyWithoutCallerUserNestedInput = {
    create?: XOR<UserMatchingCreateWithoutCallerUserInput, UserMatchingUncheckedCreateWithoutCallerUserInput> | UserMatchingCreateWithoutCallerUserInput[] | UserMatchingUncheckedCreateWithoutCallerUserInput[]
    connectOrCreate?: UserMatchingCreateOrConnectWithoutCallerUserInput | UserMatchingCreateOrConnectWithoutCallerUserInput[]
    upsert?: UserMatchingUpsertWithWhereUniqueWithoutCallerUserInput | UserMatchingUpsertWithWhereUniqueWithoutCallerUserInput[]
    createMany?: UserMatchingCreateManyCallerUserInputEnvelope
    set?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
    disconnect?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
    delete?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
    connect?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
    update?: UserMatchingUpdateWithWhereUniqueWithoutCallerUserInput | UserMatchingUpdateWithWhereUniqueWithoutCallerUserInput[]
    updateMany?: UserMatchingUpdateManyWithWhereWithoutCallerUserInput | UserMatchingUpdateManyWithWhereWithoutCallerUserInput[]
    deleteMany?: UserMatchingScalarWhereInput | UserMatchingScalarWhereInput[]
  }

  export type UserMatchingUncheckedUpdateManyWithoutCalleeUserNestedInput = {
    create?: XOR<UserMatchingCreateWithoutCalleeUserInput, UserMatchingUncheckedCreateWithoutCalleeUserInput> | UserMatchingCreateWithoutCalleeUserInput[] | UserMatchingUncheckedCreateWithoutCalleeUserInput[]
    connectOrCreate?: UserMatchingCreateOrConnectWithoutCalleeUserInput | UserMatchingCreateOrConnectWithoutCalleeUserInput[]
    upsert?: UserMatchingUpsertWithWhereUniqueWithoutCalleeUserInput | UserMatchingUpsertWithWhereUniqueWithoutCalleeUserInput[]
    createMany?: UserMatchingCreateManyCalleeUserInputEnvelope
    set?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
    disconnect?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
    delete?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
    connect?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
    update?: UserMatchingUpdateWithWhereUniqueWithoutCalleeUserInput | UserMatchingUpdateWithWhereUniqueWithoutCalleeUserInput[]
    updateMany?: UserMatchingUpdateManyWithWhereWithoutCalleeUserInput | UserMatchingUpdateManyWithWhereWithoutCalleeUserInput[]
    deleteMany?: UserMatchingScalarWhereInput | UserMatchingScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutMbtiInput = {
    create?: XOR<UserCreateWithoutMbtiInput, UserUncheckedCreateWithoutMbtiInput> | UserCreateWithoutMbtiInput[] | UserUncheckedCreateWithoutMbtiInput[]
    connectOrCreate?: UserCreateOrConnectWithoutMbtiInput | UserCreateOrConnectWithoutMbtiInput[]
    createMany?: UserCreateManyMbtiInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutMbtiInput = {
    create?: XOR<UserCreateWithoutMbtiInput, UserUncheckedCreateWithoutMbtiInput> | UserCreateWithoutMbtiInput[] | UserUncheckedCreateWithoutMbtiInput[]
    connectOrCreate?: UserCreateOrConnectWithoutMbtiInput | UserCreateOrConnectWithoutMbtiInput[]
    createMany?: UserCreateManyMbtiInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutMbtiNestedInput = {
    create?: XOR<UserCreateWithoutMbtiInput, UserUncheckedCreateWithoutMbtiInput> | UserCreateWithoutMbtiInput[] | UserUncheckedCreateWithoutMbtiInput[]
    connectOrCreate?: UserCreateOrConnectWithoutMbtiInput | UserCreateOrConnectWithoutMbtiInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutMbtiInput | UserUpsertWithWhereUniqueWithoutMbtiInput[]
    createMany?: UserCreateManyMbtiInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutMbtiInput | UserUpdateWithWhereUniqueWithoutMbtiInput[]
    updateMany?: UserUpdateManyWithWhereWithoutMbtiInput | UserUpdateManyWithWhereWithoutMbtiInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutMbtiNestedInput = {
    create?: XOR<UserCreateWithoutMbtiInput, UserUncheckedCreateWithoutMbtiInput> | UserCreateWithoutMbtiInput[] | UserUncheckedCreateWithoutMbtiInput[]
    connectOrCreate?: UserCreateOrConnectWithoutMbtiInput | UserCreateOrConnectWithoutMbtiInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutMbtiInput | UserUpsertWithWhereUniqueWithoutMbtiInput[]
    createMany?: UserCreateManyMbtiInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutMbtiInput | UserUpdateWithWhereUniqueWithoutMbtiInput[]
    updateMany?: UserUpdateManyWithWhereWithoutMbtiInput | UserUpdateManyWithWhereWithoutMbtiInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutPreferredAlcoholInput = {
    create?: XOR<UserCreateWithoutPreferredAlcoholInput, UserUncheckedCreateWithoutPreferredAlcoholInput> | UserCreateWithoutPreferredAlcoholInput[] | UserUncheckedCreateWithoutPreferredAlcoholInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPreferredAlcoholInput | UserCreateOrConnectWithoutPreferredAlcoholInput[]
    createMany?: UserCreateManyPreferredAlcoholInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutPreferredAlcoholInput = {
    create?: XOR<UserCreateWithoutPreferredAlcoholInput, UserUncheckedCreateWithoutPreferredAlcoholInput> | UserCreateWithoutPreferredAlcoholInput[] | UserUncheckedCreateWithoutPreferredAlcoholInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPreferredAlcoholInput | UserCreateOrConnectWithoutPreferredAlcoholInput[]
    createMany?: UserCreateManyPreferredAlcoholInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutPreferredAlcoholNestedInput = {
    create?: XOR<UserCreateWithoutPreferredAlcoholInput, UserUncheckedCreateWithoutPreferredAlcoholInput> | UserCreateWithoutPreferredAlcoholInput[] | UserUncheckedCreateWithoutPreferredAlcoholInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPreferredAlcoholInput | UserCreateOrConnectWithoutPreferredAlcoholInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutPreferredAlcoholInput | UserUpsertWithWhereUniqueWithoutPreferredAlcoholInput[]
    createMany?: UserCreateManyPreferredAlcoholInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutPreferredAlcoholInput | UserUpdateWithWhereUniqueWithoutPreferredAlcoholInput[]
    updateMany?: UserUpdateManyWithWhereWithoutPreferredAlcoholInput | UserUpdateManyWithWhereWithoutPreferredAlcoholInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutPreferredAlcoholNestedInput = {
    create?: XOR<UserCreateWithoutPreferredAlcoholInput, UserUncheckedCreateWithoutPreferredAlcoholInput> | UserCreateWithoutPreferredAlcoholInput[] | UserUncheckedCreateWithoutPreferredAlcoholInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPreferredAlcoholInput | UserCreateOrConnectWithoutPreferredAlcoholInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutPreferredAlcoholInput | UserUpsertWithWhereUniqueWithoutPreferredAlcoholInput[]
    createMany?: UserCreateManyPreferredAlcoholInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutPreferredAlcoholInput | UserUpdateWithWhereUniqueWithoutPreferredAlcoholInput[]
    updateMany?: UserUpdateManyWithWhereWithoutPreferredAlcoholInput | UserUpdateManyWithWhereWithoutPreferredAlcoholInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutUniversityInput = {
    create?: XOR<UserCreateWithoutUniversityInput, UserUncheckedCreateWithoutUniversityInput> | UserCreateWithoutUniversityInput[] | UserUncheckedCreateWithoutUniversityInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUniversityInput | UserCreateOrConnectWithoutUniversityInput[]
    createMany?: UserCreateManyUniversityInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutUniversityInput = {
    create?: XOR<UserCreateWithoutUniversityInput, UserUncheckedCreateWithoutUniversityInput> | UserCreateWithoutUniversityInput[] | UserUncheckedCreateWithoutUniversityInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUniversityInput | UserCreateOrConnectWithoutUniversityInput[]
    createMany?: UserCreateManyUniversityInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutUniversityNestedInput = {
    create?: XOR<UserCreateWithoutUniversityInput, UserUncheckedCreateWithoutUniversityInput> | UserCreateWithoutUniversityInput[] | UserUncheckedCreateWithoutUniversityInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUniversityInput | UserCreateOrConnectWithoutUniversityInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutUniversityInput | UserUpsertWithWhereUniqueWithoutUniversityInput[]
    createMany?: UserCreateManyUniversityInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutUniversityInput | UserUpdateWithWhereUniqueWithoutUniversityInput[]
    updateMany?: UserUpdateManyWithWhereWithoutUniversityInput | UserUpdateManyWithWhereWithoutUniversityInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutUniversityNestedInput = {
    create?: XOR<UserCreateWithoutUniversityInput, UserUncheckedCreateWithoutUniversityInput> | UserCreateWithoutUniversityInput[] | UserUncheckedCreateWithoutUniversityInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUniversityInput | UserCreateOrConnectWithoutUniversityInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutUniversityInput | UserUpsertWithWhereUniqueWithoutUniversityInput[]
    createMany?: UserCreateManyUniversityInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutUniversityInput | UserUpdateWithWhereUniqueWithoutUniversityInput[]
    updateMany?: UserUpdateManyWithWhereWithoutUniversityInput | UserUpdateManyWithWhereWithoutUniversityInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCallerUserMatchingInput = {
    create?: XOR<UserCreateWithoutCallerUserMatchingInput, UserUncheckedCreateWithoutCallerUserMatchingInput>
    connectOrCreate?: UserCreateOrConnectWithoutCallerUserMatchingInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCalleeUserMatchingInput = {
    create?: XOR<UserCreateWithoutCalleeUserMatchingInput, UserUncheckedCreateWithoutCalleeUserMatchingInput>
    connectOrCreate?: UserCreateOrConnectWithoutCalleeUserMatchingInput
    connect?: UserWhereUniqueInput
  }

  export type MatchingCategoryCreateNestedOneWithoutUserInput = {
    create?: XOR<MatchingCategoryCreateWithoutUserInput, MatchingCategoryUncheckedCreateWithoutUserInput>
    connectOrCreate?: MatchingCategoryCreateOrConnectWithoutUserInput
    connect?: MatchingCategoryWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCallerUserMatchingNestedInput = {
    create?: XOR<UserCreateWithoutCallerUserMatchingInput, UserUncheckedCreateWithoutCallerUserMatchingInput>
    connectOrCreate?: UserCreateOrConnectWithoutCallerUserMatchingInput
    upsert?: UserUpsertWithoutCallerUserMatchingInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCallerUserMatchingInput, UserUpdateWithoutCallerUserMatchingInput>, UserUncheckedUpdateWithoutCallerUserMatchingInput>
  }

  export type UserUpdateOneRequiredWithoutCalleeUserMatchingNestedInput = {
    create?: XOR<UserCreateWithoutCalleeUserMatchingInput, UserUncheckedCreateWithoutCalleeUserMatchingInput>
    connectOrCreate?: UserCreateOrConnectWithoutCalleeUserMatchingInput
    upsert?: UserUpsertWithoutCalleeUserMatchingInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCalleeUserMatchingInput, UserUpdateWithoutCalleeUserMatchingInput>, UserUncheckedUpdateWithoutCalleeUserMatchingInput>
  }

  export type MatchingCategoryUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<MatchingCategoryCreateWithoutUserInput, MatchingCategoryUncheckedCreateWithoutUserInput>
    connectOrCreate?: MatchingCategoryCreateOrConnectWithoutUserInput
    upsert?: MatchingCategoryUpsertWithoutUserInput
    connect?: MatchingCategoryWhereUniqueInput
    update?: XOR<XOR<MatchingCategoryUpdateToOneWithWhereWithoutUserInput, MatchingCategoryUpdateWithoutUserInput>, MatchingCategoryUncheckedUpdateWithoutUserInput>
  }

  export type UserMatchingCreateNestedManyWithoutMatchingCategoryInput = {
    create?: XOR<UserMatchingCreateWithoutMatchingCategoryInput, UserMatchingUncheckedCreateWithoutMatchingCategoryInput> | UserMatchingCreateWithoutMatchingCategoryInput[] | UserMatchingUncheckedCreateWithoutMatchingCategoryInput[]
    connectOrCreate?: UserMatchingCreateOrConnectWithoutMatchingCategoryInput | UserMatchingCreateOrConnectWithoutMatchingCategoryInput[]
    createMany?: UserMatchingCreateManyMatchingCategoryInputEnvelope
    connect?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
  }

  export type UserMatchingUncheckedCreateNestedManyWithoutMatchingCategoryInput = {
    create?: XOR<UserMatchingCreateWithoutMatchingCategoryInput, UserMatchingUncheckedCreateWithoutMatchingCategoryInput> | UserMatchingCreateWithoutMatchingCategoryInput[] | UserMatchingUncheckedCreateWithoutMatchingCategoryInput[]
    connectOrCreate?: UserMatchingCreateOrConnectWithoutMatchingCategoryInput | UserMatchingCreateOrConnectWithoutMatchingCategoryInput[]
    createMany?: UserMatchingCreateManyMatchingCategoryInputEnvelope
    connect?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
  }

  export type UserMatchingUpdateManyWithoutMatchingCategoryNestedInput = {
    create?: XOR<UserMatchingCreateWithoutMatchingCategoryInput, UserMatchingUncheckedCreateWithoutMatchingCategoryInput> | UserMatchingCreateWithoutMatchingCategoryInput[] | UserMatchingUncheckedCreateWithoutMatchingCategoryInput[]
    connectOrCreate?: UserMatchingCreateOrConnectWithoutMatchingCategoryInput | UserMatchingCreateOrConnectWithoutMatchingCategoryInput[]
    upsert?: UserMatchingUpsertWithWhereUniqueWithoutMatchingCategoryInput | UserMatchingUpsertWithWhereUniqueWithoutMatchingCategoryInput[]
    createMany?: UserMatchingCreateManyMatchingCategoryInputEnvelope
    set?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
    disconnect?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
    delete?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
    connect?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
    update?: UserMatchingUpdateWithWhereUniqueWithoutMatchingCategoryInput | UserMatchingUpdateWithWhereUniqueWithoutMatchingCategoryInput[]
    updateMany?: UserMatchingUpdateManyWithWhereWithoutMatchingCategoryInput | UserMatchingUpdateManyWithWhereWithoutMatchingCategoryInput[]
    deleteMany?: UserMatchingScalarWhereInput | UserMatchingScalarWhereInput[]
  }

  export type UserMatchingUncheckedUpdateManyWithoutMatchingCategoryNestedInput = {
    create?: XOR<UserMatchingCreateWithoutMatchingCategoryInput, UserMatchingUncheckedCreateWithoutMatchingCategoryInput> | UserMatchingCreateWithoutMatchingCategoryInput[] | UserMatchingUncheckedCreateWithoutMatchingCategoryInput[]
    connectOrCreate?: UserMatchingCreateOrConnectWithoutMatchingCategoryInput | UserMatchingCreateOrConnectWithoutMatchingCategoryInput[]
    upsert?: UserMatchingUpsertWithWhereUniqueWithoutMatchingCategoryInput | UserMatchingUpsertWithWhereUniqueWithoutMatchingCategoryInput[]
    createMany?: UserMatchingCreateManyMatchingCategoryInputEnvelope
    set?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
    disconnect?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
    delete?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
    connect?: UserMatchingWhereUniqueInput | UserMatchingWhereUniqueInput[]
    update?: UserMatchingUpdateWithWhereUniqueWithoutMatchingCategoryInput | UserMatchingUpdateWithWhereUniqueWithoutMatchingCategoryInput[]
    updateMany?: UserMatchingUpdateManyWithWhereWithoutMatchingCategoryInput | UserMatchingUpdateManyWithWhereWithoutMatchingCategoryInput[]
    deleteMany?: UserMatchingScalarWhereInput | UserMatchingScalarWhereInput[]
  }

  export type MeetingCreateNestedManyWithoutCategoryInput = {
    create?: XOR<MeetingCreateWithoutCategoryInput, MeetingUncheckedCreateWithoutCategoryInput> | MeetingCreateWithoutCategoryInput[] | MeetingUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MeetingCreateOrConnectWithoutCategoryInput | MeetingCreateOrConnectWithoutCategoryInput[]
    createMany?: MeetingCreateManyCategoryInputEnvelope
    connect?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
  }

  export type MeetingUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<MeetingCreateWithoutCategoryInput, MeetingUncheckedCreateWithoutCategoryInput> | MeetingCreateWithoutCategoryInput[] | MeetingUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MeetingCreateOrConnectWithoutCategoryInput | MeetingCreateOrConnectWithoutCategoryInput[]
    createMany?: MeetingCreateManyCategoryInputEnvelope
    connect?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
  }

  export type MeetingUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<MeetingCreateWithoutCategoryInput, MeetingUncheckedCreateWithoutCategoryInput> | MeetingCreateWithoutCategoryInput[] | MeetingUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MeetingCreateOrConnectWithoutCategoryInput | MeetingCreateOrConnectWithoutCategoryInput[]
    upsert?: MeetingUpsertWithWhereUniqueWithoutCategoryInput | MeetingUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: MeetingCreateManyCategoryInputEnvelope
    set?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    disconnect?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    delete?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    connect?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    update?: MeetingUpdateWithWhereUniqueWithoutCategoryInput | MeetingUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: MeetingUpdateManyWithWhereWithoutCategoryInput | MeetingUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: MeetingScalarWhereInput | MeetingScalarWhereInput[]
  }

  export type MeetingUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<MeetingCreateWithoutCategoryInput, MeetingUncheckedCreateWithoutCategoryInput> | MeetingCreateWithoutCategoryInput[] | MeetingUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MeetingCreateOrConnectWithoutCategoryInput | MeetingCreateOrConnectWithoutCategoryInput[]
    upsert?: MeetingUpsertWithWhereUniqueWithoutCategoryInput | MeetingUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: MeetingCreateManyCategoryInputEnvelope
    set?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    disconnect?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    delete?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    connect?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    update?: MeetingUpdateWithWhereUniqueWithoutCategoryInput | MeetingUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: MeetingUpdateManyWithWhereWithoutCategoryInput | MeetingUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: MeetingScalarWhereInput | MeetingScalarWhereInput[]
  }

  export type MeetingJoinUserCreateNestedManyWithoutMeetingInput = {
    create?: XOR<MeetingJoinUserCreateWithoutMeetingInput, MeetingJoinUserUncheckedCreateWithoutMeetingInput> | MeetingJoinUserCreateWithoutMeetingInput[] | MeetingJoinUserUncheckedCreateWithoutMeetingInput[]
    connectOrCreate?: MeetingJoinUserCreateOrConnectWithoutMeetingInput | MeetingJoinUserCreateOrConnectWithoutMeetingInput[]
    createMany?: MeetingJoinUserCreateManyMeetingInputEnvelope
    connect?: MeetingJoinUserWhereUniqueInput | MeetingJoinUserWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutMeetingInput = {
    create?: XOR<UserCreateWithoutMeetingInput, UserUncheckedCreateWithoutMeetingInput>
    connectOrCreate?: UserCreateOrConnectWithoutMeetingInput
    connect?: UserWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutMeetingInput = {
    create?: XOR<CategoryCreateWithoutMeetingInput, CategoryUncheckedCreateWithoutMeetingInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutMeetingInput
    connect?: CategoryWhereUniqueInput
  }

  export type MeetingJoinUserUncheckedCreateNestedManyWithoutMeetingInput = {
    create?: XOR<MeetingJoinUserCreateWithoutMeetingInput, MeetingJoinUserUncheckedCreateWithoutMeetingInput> | MeetingJoinUserCreateWithoutMeetingInput[] | MeetingJoinUserUncheckedCreateWithoutMeetingInput[]
    connectOrCreate?: MeetingJoinUserCreateOrConnectWithoutMeetingInput | MeetingJoinUserCreateOrConnectWithoutMeetingInput[]
    createMany?: MeetingJoinUserCreateManyMeetingInputEnvelope
    connect?: MeetingJoinUserWhereUniqueInput | MeetingJoinUserWhereUniqueInput[]
  }

  export type MeetingJoinUserUpdateManyWithoutMeetingNestedInput = {
    create?: XOR<MeetingJoinUserCreateWithoutMeetingInput, MeetingJoinUserUncheckedCreateWithoutMeetingInput> | MeetingJoinUserCreateWithoutMeetingInput[] | MeetingJoinUserUncheckedCreateWithoutMeetingInput[]
    connectOrCreate?: MeetingJoinUserCreateOrConnectWithoutMeetingInput | MeetingJoinUserCreateOrConnectWithoutMeetingInput[]
    upsert?: MeetingJoinUserUpsertWithWhereUniqueWithoutMeetingInput | MeetingJoinUserUpsertWithWhereUniqueWithoutMeetingInput[]
    createMany?: MeetingJoinUserCreateManyMeetingInputEnvelope
    set?: MeetingJoinUserWhereUniqueInput | MeetingJoinUserWhereUniqueInput[]
    disconnect?: MeetingJoinUserWhereUniqueInput | MeetingJoinUserWhereUniqueInput[]
    delete?: MeetingJoinUserWhereUniqueInput | MeetingJoinUserWhereUniqueInput[]
    connect?: MeetingJoinUserWhereUniqueInput | MeetingJoinUserWhereUniqueInput[]
    update?: MeetingJoinUserUpdateWithWhereUniqueWithoutMeetingInput | MeetingJoinUserUpdateWithWhereUniqueWithoutMeetingInput[]
    updateMany?: MeetingJoinUserUpdateManyWithWhereWithoutMeetingInput | MeetingJoinUserUpdateManyWithWhereWithoutMeetingInput[]
    deleteMany?: MeetingJoinUserScalarWhereInput | MeetingJoinUserScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutMeetingNestedInput = {
    create?: XOR<UserCreateWithoutMeetingInput, UserUncheckedCreateWithoutMeetingInput>
    connectOrCreate?: UserCreateOrConnectWithoutMeetingInput
    upsert?: UserUpsertWithoutMeetingInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMeetingInput, UserUpdateWithoutMeetingInput>, UserUncheckedUpdateWithoutMeetingInput>
  }

  export type CategoryUpdateOneRequiredWithoutMeetingNestedInput = {
    create?: XOR<CategoryCreateWithoutMeetingInput, CategoryUncheckedCreateWithoutMeetingInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutMeetingInput
    upsert?: CategoryUpsertWithoutMeetingInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutMeetingInput, CategoryUpdateWithoutMeetingInput>, CategoryUncheckedUpdateWithoutMeetingInput>
  }

  export type MeetingJoinUserUncheckedUpdateManyWithoutMeetingNestedInput = {
    create?: XOR<MeetingJoinUserCreateWithoutMeetingInput, MeetingJoinUserUncheckedCreateWithoutMeetingInput> | MeetingJoinUserCreateWithoutMeetingInput[] | MeetingJoinUserUncheckedCreateWithoutMeetingInput[]
    connectOrCreate?: MeetingJoinUserCreateOrConnectWithoutMeetingInput | MeetingJoinUserCreateOrConnectWithoutMeetingInput[]
    upsert?: MeetingJoinUserUpsertWithWhereUniqueWithoutMeetingInput | MeetingJoinUserUpsertWithWhereUniqueWithoutMeetingInput[]
    createMany?: MeetingJoinUserCreateManyMeetingInputEnvelope
    set?: MeetingJoinUserWhereUniqueInput | MeetingJoinUserWhereUniqueInput[]
    disconnect?: MeetingJoinUserWhereUniqueInput | MeetingJoinUserWhereUniqueInput[]
    delete?: MeetingJoinUserWhereUniqueInput | MeetingJoinUserWhereUniqueInput[]
    connect?: MeetingJoinUserWhereUniqueInput | MeetingJoinUserWhereUniqueInput[]
    update?: MeetingJoinUserUpdateWithWhereUniqueWithoutMeetingInput | MeetingJoinUserUpdateWithWhereUniqueWithoutMeetingInput[]
    updateMany?: MeetingJoinUserUpdateManyWithWhereWithoutMeetingInput | MeetingJoinUserUpdateManyWithWhereWithoutMeetingInput[]
    deleteMany?: MeetingJoinUserScalarWhereInput | MeetingJoinUserScalarWhereInput[]
  }

  export type MeetingCreateNestedOneWithoutMeetingJoinUserInput = {
    create?: XOR<MeetingCreateWithoutMeetingJoinUserInput, MeetingUncheckedCreateWithoutMeetingJoinUserInput>
    connectOrCreate?: MeetingCreateOrConnectWithoutMeetingJoinUserInput
    connect?: MeetingWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMeetingJoinUserInput = {
    create?: XOR<UserCreateWithoutMeetingJoinUserInput, UserUncheckedCreateWithoutMeetingJoinUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutMeetingJoinUserInput
    connect?: UserWhereUniqueInput
  }

  export type MeetingUpdateOneRequiredWithoutMeetingJoinUserNestedInput = {
    create?: XOR<MeetingCreateWithoutMeetingJoinUserInput, MeetingUncheckedCreateWithoutMeetingJoinUserInput>
    connectOrCreate?: MeetingCreateOrConnectWithoutMeetingJoinUserInput
    upsert?: MeetingUpsertWithoutMeetingJoinUserInput
    connect?: MeetingWhereUniqueInput
    update?: XOR<XOR<MeetingUpdateToOneWithWhereWithoutMeetingJoinUserInput, MeetingUpdateWithoutMeetingJoinUserInput>, MeetingUncheckedUpdateWithoutMeetingJoinUserInput>
  }

  export type UserUpdateOneRequiredWithoutMeetingJoinUserNestedInput = {
    create?: XOR<UserCreateWithoutMeetingJoinUserInput, UserUncheckedCreateWithoutMeetingJoinUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutMeetingJoinUserInput
    upsert?: UserUpsertWithoutMeetingJoinUserInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMeetingJoinUserInput, UserUpdateWithoutMeetingJoinUserInput>, UserUncheckedUpdateWithoutMeetingJoinUserInput>
  }

  export type CommunityContentCreateNestedManyWithoutCommunityInput = {
    create?: XOR<CommunityContentCreateWithoutCommunityInput, CommunityContentUncheckedCreateWithoutCommunityInput> | CommunityContentCreateWithoutCommunityInput[] | CommunityContentUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: CommunityContentCreateOrConnectWithoutCommunityInput | CommunityContentCreateOrConnectWithoutCommunityInput[]
    createMany?: CommunityContentCreateManyCommunityInputEnvelope
    connect?: CommunityContentWhereUniqueInput | CommunityContentWhereUniqueInput[]
  }

  export type CommunityContentUncheckedCreateNestedManyWithoutCommunityInput = {
    create?: XOR<CommunityContentCreateWithoutCommunityInput, CommunityContentUncheckedCreateWithoutCommunityInput> | CommunityContentCreateWithoutCommunityInput[] | CommunityContentUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: CommunityContentCreateOrConnectWithoutCommunityInput | CommunityContentCreateOrConnectWithoutCommunityInput[]
    createMany?: CommunityContentCreateManyCommunityInputEnvelope
    connect?: CommunityContentWhereUniqueInput | CommunityContentWhereUniqueInput[]
  }

  export type CommunityContentUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<CommunityContentCreateWithoutCommunityInput, CommunityContentUncheckedCreateWithoutCommunityInput> | CommunityContentCreateWithoutCommunityInput[] | CommunityContentUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: CommunityContentCreateOrConnectWithoutCommunityInput | CommunityContentCreateOrConnectWithoutCommunityInput[]
    upsert?: CommunityContentUpsertWithWhereUniqueWithoutCommunityInput | CommunityContentUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: CommunityContentCreateManyCommunityInputEnvelope
    set?: CommunityContentWhereUniqueInput | CommunityContentWhereUniqueInput[]
    disconnect?: CommunityContentWhereUniqueInput | CommunityContentWhereUniqueInput[]
    delete?: CommunityContentWhereUniqueInput | CommunityContentWhereUniqueInput[]
    connect?: CommunityContentWhereUniqueInput | CommunityContentWhereUniqueInput[]
    update?: CommunityContentUpdateWithWhereUniqueWithoutCommunityInput | CommunityContentUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: CommunityContentUpdateManyWithWhereWithoutCommunityInput | CommunityContentUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: CommunityContentScalarWhereInput | CommunityContentScalarWhereInput[]
  }

  export type CommunityContentUncheckedUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<CommunityContentCreateWithoutCommunityInput, CommunityContentUncheckedCreateWithoutCommunityInput> | CommunityContentCreateWithoutCommunityInput[] | CommunityContentUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: CommunityContentCreateOrConnectWithoutCommunityInput | CommunityContentCreateOrConnectWithoutCommunityInput[]
    upsert?: CommunityContentUpsertWithWhereUniqueWithoutCommunityInput | CommunityContentUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: CommunityContentCreateManyCommunityInputEnvelope
    set?: CommunityContentWhereUniqueInput | CommunityContentWhereUniqueInput[]
    disconnect?: CommunityContentWhereUniqueInput | CommunityContentWhereUniqueInput[]
    delete?: CommunityContentWhereUniqueInput | CommunityContentWhereUniqueInput[]
    connect?: CommunityContentWhereUniqueInput | CommunityContentWhereUniqueInput[]
    update?: CommunityContentUpdateWithWhereUniqueWithoutCommunityInput | CommunityContentUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: CommunityContentUpdateManyWithWhereWithoutCommunityInput | CommunityContentUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: CommunityContentScalarWhereInput | CommunityContentScalarWhereInput[]
  }

  export type ReplyCreateNestedManyWithoutCommunityContentInput = {
    create?: XOR<ReplyCreateWithoutCommunityContentInput, ReplyUncheckedCreateWithoutCommunityContentInput> | ReplyCreateWithoutCommunityContentInput[] | ReplyUncheckedCreateWithoutCommunityContentInput[]
    connectOrCreate?: ReplyCreateOrConnectWithoutCommunityContentInput | ReplyCreateOrConnectWithoutCommunityContentInput[]
    createMany?: ReplyCreateManyCommunityContentInputEnvelope
    connect?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCommunityContentInput = {
    create?: XOR<UserCreateWithoutCommunityContentInput, UserUncheckedCreateWithoutCommunityContentInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommunityContentInput
    connect?: UserWhereUniqueInput
  }

  export type CommunityCreateNestedOneWithoutCommunityContentInput = {
    create?: XOR<CommunityCreateWithoutCommunityContentInput, CommunityUncheckedCreateWithoutCommunityContentInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutCommunityContentInput
    connect?: CommunityWhereUniqueInput
  }

  export type ReplyUncheckedCreateNestedManyWithoutCommunityContentInput = {
    create?: XOR<ReplyCreateWithoutCommunityContentInput, ReplyUncheckedCreateWithoutCommunityContentInput> | ReplyCreateWithoutCommunityContentInput[] | ReplyUncheckedCreateWithoutCommunityContentInput[]
    connectOrCreate?: ReplyCreateOrConnectWithoutCommunityContentInput | ReplyCreateOrConnectWithoutCommunityContentInput[]
    createMany?: ReplyCreateManyCommunityContentInputEnvelope
    connect?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
  }

  export type ReplyUpdateManyWithoutCommunityContentNestedInput = {
    create?: XOR<ReplyCreateWithoutCommunityContentInput, ReplyUncheckedCreateWithoutCommunityContentInput> | ReplyCreateWithoutCommunityContentInput[] | ReplyUncheckedCreateWithoutCommunityContentInput[]
    connectOrCreate?: ReplyCreateOrConnectWithoutCommunityContentInput | ReplyCreateOrConnectWithoutCommunityContentInput[]
    upsert?: ReplyUpsertWithWhereUniqueWithoutCommunityContentInput | ReplyUpsertWithWhereUniqueWithoutCommunityContentInput[]
    createMany?: ReplyCreateManyCommunityContentInputEnvelope
    set?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    disconnect?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    delete?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    connect?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    update?: ReplyUpdateWithWhereUniqueWithoutCommunityContentInput | ReplyUpdateWithWhereUniqueWithoutCommunityContentInput[]
    updateMany?: ReplyUpdateManyWithWhereWithoutCommunityContentInput | ReplyUpdateManyWithWhereWithoutCommunityContentInput[]
    deleteMany?: ReplyScalarWhereInput | ReplyScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutCommunityContentNestedInput = {
    create?: XOR<UserCreateWithoutCommunityContentInput, UserUncheckedCreateWithoutCommunityContentInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommunityContentInput
    upsert?: UserUpsertWithoutCommunityContentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommunityContentInput, UserUpdateWithoutCommunityContentInput>, UserUncheckedUpdateWithoutCommunityContentInput>
  }

  export type CommunityUpdateOneRequiredWithoutCommunityContentNestedInput = {
    create?: XOR<CommunityCreateWithoutCommunityContentInput, CommunityUncheckedCreateWithoutCommunityContentInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutCommunityContentInput
    upsert?: CommunityUpsertWithoutCommunityContentInput
    connect?: CommunityWhereUniqueInput
    update?: XOR<XOR<CommunityUpdateToOneWithWhereWithoutCommunityContentInput, CommunityUpdateWithoutCommunityContentInput>, CommunityUncheckedUpdateWithoutCommunityContentInput>
  }

  export type ReplyUncheckedUpdateManyWithoutCommunityContentNestedInput = {
    create?: XOR<ReplyCreateWithoutCommunityContentInput, ReplyUncheckedCreateWithoutCommunityContentInput> | ReplyCreateWithoutCommunityContentInput[] | ReplyUncheckedCreateWithoutCommunityContentInput[]
    connectOrCreate?: ReplyCreateOrConnectWithoutCommunityContentInput | ReplyCreateOrConnectWithoutCommunityContentInput[]
    upsert?: ReplyUpsertWithWhereUniqueWithoutCommunityContentInput | ReplyUpsertWithWhereUniqueWithoutCommunityContentInput[]
    createMany?: ReplyCreateManyCommunityContentInputEnvelope
    set?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    disconnect?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    delete?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    connect?: ReplyWhereUniqueInput | ReplyWhereUniqueInput[]
    update?: ReplyUpdateWithWhereUniqueWithoutCommunityContentInput | ReplyUpdateWithWhereUniqueWithoutCommunityContentInput[]
    updateMany?: ReplyUpdateManyWithWhereWithoutCommunityContentInput | ReplyUpdateManyWithWhereWithoutCommunityContentInput[]
    deleteMany?: ReplyScalarWhereInput | ReplyScalarWhereInput[]
  }

  export type CommunityContentCreateNestedOneWithoutReplyInput = {
    create?: XOR<CommunityContentCreateWithoutReplyInput, CommunityContentUncheckedCreateWithoutReplyInput>
    connectOrCreate?: CommunityContentCreateOrConnectWithoutReplyInput
    connect?: CommunityContentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReplyInput = {
    create?: XOR<UserCreateWithoutReplyInput, UserUncheckedCreateWithoutReplyInput>
    connectOrCreate?: UserCreateOrConnectWithoutReplyInput
    connect?: UserWhereUniqueInput
  }

  export type CommunityContentUpdateOneRequiredWithoutReplyNestedInput = {
    create?: XOR<CommunityContentCreateWithoutReplyInput, CommunityContentUncheckedCreateWithoutReplyInput>
    connectOrCreate?: CommunityContentCreateOrConnectWithoutReplyInput
    upsert?: CommunityContentUpsertWithoutReplyInput
    connect?: CommunityContentWhereUniqueInput
    update?: XOR<XOR<CommunityContentUpdateToOneWithWhereWithoutReplyInput, CommunityContentUpdateWithoutReplyInput>, CommunityContentUncheckedUpdateWithoutReplyInput>
  }

  export type UserUpdateOneRequiredWithoutReplyNestedInput = {
    create?: XOR<UserCreateWithoutReplyInput, UserUncheckedCreateWithoutReplyInput>
    connectOrCreate?: UserCreateOrConnectWithoutReplyInput
    upsert?: UserUpsertWithoutReplyInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReplyInput, UserUpdateWithoutReplyInput>, UserUncheckedUpdateWithoutReplyInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumMadCampStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.MadCampStatus | EnumMadCampStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MadCampStatus[] | ListEnumMadCampStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MadCampStatus[] | ListEnumMadCampStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMadCampStatusFilter<$PrismaModel> | $Enums.MadCampStatus
  }

  export type NestedEnumSexFilter<$PrismaModel = never> = {
    equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel>
    in?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    notIn?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    not?: NestedEnumSexFilter<$PrismaModel> | $Enums.Sex
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumRegistrationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RegistrationStatus | EnumRegistrationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RegistrationStatus[] | ListEnumRegistrationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RegistrationStatus[] | ListEnumRegistrationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRegistrationStatusFilter<$PrismaModel> | $Enums.RegistrationStatus
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumMadCampStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MadCampStatus | EnumMadCampStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MadCampStatus[] | ListEnumMadCampStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MadCampStatus[] | ListEnumMadCampStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMadCampStatusWithAggregatesFilter<$PrismaModel> | $Enums.MadCampStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMadCampStatusFilter<$PrismaModel>
    _max?: NestedEnumMadCampStatusFilter<$PrismaModel>
  }

  export type NestedEnumSexWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel>
    in?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    notIn?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    not?: NestedEnumSexWithAggregatesFilter<$PrismaModel> | $Enums.Sex
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSexFilter<$PrismaModel>
    _max?: NestedEnumSexFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumRegistrationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RegistrationStatus | EnumRegistrationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RegistrationStatus[] | ListEnumRegistrationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RegistrationStatus[] | ListEnumRegistrationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRegistrationStatusWithAggregatesFilter<$PrismaModel> | $Enums.RegistrationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRegistrationStatusFilter<$PrismaModel>
    _max?: NestedEnumRegistrationStatusFilter<$PrismaModel>
  }

  export type MeetingCreateWithoutHostInput = {
    meetingImageUrl?: string | null
    location: string
    title: string
    keyword: string
    description: string
    maxPeople: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    meetingJoinUser?: MeetingJoinUserCreateNestedManyWithoutMeetingInput
    category: CategoryCreateNestedOneWithoutMeetingInput
  }

  export type MeetingUncheckedCreateWithoutHostInput = {
    id?: number
    categoryId: number
    meetingImageUrl?: string | null
    location: string
    title: string
    keyword: string
    description: string
    maxPeople: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    meetingJoinUser?: MeetingJoinUserUncheckedCreateNestedManyWithoutMeetingInput
  }

  export type MeetingCreateOrConnectWithoutHostInput = {
    where: MeetingWhereUniqueInput
    create: XOR<MeetingCreateWithoutHostInput, MeetingUncheckedCreateWithoutHostInput>
  }

  export type MeetingCreateManyHostInputEnvelope = {
    data: MeetingCreateManyHostInput | MeetingCreateManyHostInput[]
    skipDuplicates?: boolean
  }

  export type MeetingJoinUserCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    meeting: MeetingCreateNestedOneWithoutMeetingJoinUserInput
  }

  export type MeetingJoinUserUncheckedCreateWithoutUserInput = {
    id?: number
    meetingId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingJoinUserCreateOrConnectWithoutUserInput = {
    where: MeetingJoinUserWhereUniqueInput
    create: XOR<MeetingJoinUserCreateWithoutUserInput, MeetingJoinUserUncheckedCreateWithoutUserInput>
  }

  export type MeetingJoinUserCreateManyUserInputEnvelope = {
    data: MeetingJoinUserCreateManyUserInput | MeetingJoinUserCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReplyCreateWithoutUserInput = {
    content: string
    createdAt?: Date | string
    communityContent: CommunityContentCreateNestedOneWithoutReplyInput
  }

  export type ReplyUncheckedCreateWithoutUserInput = {
    id?: number
    communityContentId: number
    content: string
    createdAt?: Date | string
  }

  export type ReplyCreateOrConnectWithoutUserInput = {
    where: ReplyWhereUniqueInput
    create: XOR<ReplyCreateWithoutUserInput, ReplyUncheckedCreateWithoutUserInput>
  }

  export type ReplyCreateManyUserInputEnvelope = {
    data: ReplyCreateManyUserInput | ReplyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CommunityContentCreateWithoutWritedUserInput = {
    title: string
    content: string
    likeCount?: number
    contentImageUrl?: string | null
    createdAt?: Date | string
    reply?: ReplyCreateNestedManyWithoutCommunityContentInput
    community: CommunityCreateNestedOneWithoutCommunityContentInput
  }

  export type CommunityContentUncheckedCreateWithoutWritedUserInput = {
    id?: number
    communityId: number
    title: string
    content: string
    likeCount?: number
    contentImageUrl?: string | null
    createdAt?: Date | string
    reply?: ReplyUncheckedCreateNestedManyWithoutCommunityContentInput
  }

  export type CommunityContentCreateOrConnectWithoutWritedUserInput = {
    where: CommunityContentWhereUniqueInput
    create: XOR<CommunityContentCreateWithoutWritedUserInput, CommunityContentUncheckedCreateWithoutWritedUserInput>
  }

  export type CommunityContentCreateManyWritedUserInputEnvelope = {
    data: CommunityContentCreateManyWritedUserInput | CommunityContentCreateManyWritedUserInput[]
    skipDuplicates?: boolean
  }

  export type UserMatchingCreateWithoutCallerUserInput = {
    comment: string
    createdAt?: Date | string
    calleeUser: UserCreateNestedOneWithoutCalleeUserMatchingInput
    matchingCategory: MatchingCategoryCreateNestedOneWithoutUserInput
  }

  export type UserMatchingUncheckedCreateWithoutCallerUserInput = {
    id?: number
    calleeUserId: number
    comment: string
    matchingCategoryId: number
    createdAt?: Date | string
  }

  export type UserMatchingCreateOrConnectWithoutCallerUserInput = {
    where: UserMatchingWhereUniqueInput
    create: XOR<UserMatchingCreateWithoutCallerUserInput, UserMatchingUncheckedCreateWithoutCallerUserInput>
  }

  export type UserMatchingCreateManyCallerUserInputEnvelope = {
    data: UserMatchingCreateManyCallerUserInput | UserMatchingCreateManyCallerUserInput[]
    skipDuplicates?: boolean
  }

  export type UserMatchingCreateWithoutCalleeUserInput = {
    comment: string
    createdAt?: Date | string
    callerUser: UserCreateNestedOneWithoutCallerUserMatchingInput
    matchingCategory: MatchingCategoryCreateNestedOneWithoutUserInput
  }

  export type UserMatchingUncheckedCreateWithoutCalleeUserInput = {
    id?: number
    callerUserId: number
    comment: string
    matchingCategoryId: number
    createdAt?: Date | string
  }

  export type UserMatchingCreateOrConnectWithoutCalleeUserInput = {
    where: UserMatchingWhereUniqueInput
    create: XOR<UserMatchingCreateWithoutCalleeUserInput, UserMatchingUncheckedCreateWithoutCalleeUserInput>
  }

  export type UserMatchingCreateManyCalleeUserInputEnvelope = {
    data: UserMatchingCreateManyCalleeUserInput | UserMatchingCreateManyCalleeUserInput[]
    skipDuplicates?: boolean
  }

  export type AlcoholCreateWithoutUserInput = {
    name: string
    createdAt?: Date | string
  }

  export type AlcoholUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    createdAt?: Date | string
  }

  export type AlcoholCreateOrConnectWithoutUserInput = {
    where: AlcoholWhereUniqueInput
    create: XOR<AlcoholCreateWithoutUserInput, AlcoholUncheckedCreateWithoutUserInput>
  }

  export type UniversityCreateWithoutUserInput = {
    name: string
    createdAt?: Date | string
  }

  export type UniversityUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    createdAt?: Date | string
  }

  export type UniversityCreateOrConnectWithoutUserInput = {
    where: UniversityWhereUniqueInput
    create: XOR<UniversityCreateWithoutUserInput, UniversityUncheckedCreateWithoutUserInput>
  }

  export type MbtiCreateWithoutUserInput = {
    name: string
    createdAt?: Date | string
  }

  export type MbtiUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    createdAt?: Date | string
  }

  export type MbtiCreateOrConnectWithoutUserInput = {
    where: MbtiWhereUniqueInput
    create: XOR<MbtiCreateWithoutUserInput, MbtiUncheckedCreateWithoutUserInput>
  }

  export type MeetingUpsertWithWhereUniqueWithoutHostInput = {
    where: MeetingWhereUniqueInput
    update: XOR<MeetingUpdateWithoutHostInput, MeetingUncheckedUpdateWithoutHostInput>
    create: XOR<MeetingCreateWithoutHostInput, MeetingUncheckedCreateWithoutHostInput>
  }

  export type MeetingUpdateWithWhereUniqueWithoutHostInput = {
    where: MeetingWhereUniqueInput
    data: XOR<MeetingUpdateWithoutHostInput, MeetingUncheckedUpdateWithoutHostInput>
  }

  export type MeetingUpdateManyWithWhereWithoutHostInput = {
    where: MeetingScalarWhereInput
    data: XOR<MeetingUpdateManyMutationInput, MeetingUncheckedUpdateManyWithoutHostInput>
  }

  export type MeetingScalarWhereInput = {
    AND?: MeetingScalarWhereInput | MeetingScalarWhereInput[]
    OR?: MeetingScalarWhereInput[]
    NOT?: MeetingScalarWhereInput | MeetingScalarWhereInput[]
    id?: IntFilter<"Meeting"> | number
    hostId?: IntFilter<"Meeting"> | number
    categoryId?: IntFilter<"Meeting"> | number
    meetingImageUrl?: StringNullableFilter<"Meeting"> | string | null
    location?: StringFilter<"Meeting"> | string
    title?: StringFilter<"Meeting"> | string
    keyword?: StringFilter<"Meeting"> | string
    description?: StringFilter<"Meeting"> | string
    maxPeople?: IntFilter<"Meeting"> | number
    startTime?: DateTimeFilter<"Meeting"> | Date | string
    endTime?: DateTimeFilter<"Meeting"> | Date | string
    createdAt?: DateTimeFilter<"Meeting"> | Date | string
  }

  export type MeetingJoinUserUpsertWithWhereUniqueWithoutUserInput = {
    where: MeetingJoinUserWhereUniqueInput
    update: XOR<MeetingJoinUserUpdateWithoutUserInput, MeetingJoinUserUncheckedUpdateWithoutUserInput>
    create: XOR<MeetingJoinUserCreateWithoutUserInput, MeetingJoinUserUncheckedCreateWithoutUserInput>
  }

  export type MeetingJoinUserUpdateWithWhereUniqueWithoutUserInput = {
    where: MeetingJoinUserWhereUniqueInput
    data: XOR<MeetingJoinUserUpdateWithoutUserInput, MeetingJoinUserUncheckedUpdateWithoutUserInput>
  }

  export type MeetingJoinUserUpdateManyWithWhereWithoutUserInput = {
    where: MeetingJoinUserScalarWhereInput
    data: XOR<MeetingJoinUserUpdateManyMutationInput, MeetingJoinUserUncheckedUpdateManyWithoutUserInput>
  }

  export type MeetingJoinUserScalarWhereInput = {
    AND?: MeetingJoinUserScalarWhereInput | MeetingJoinUserScalarWhereInput[]
    OR?: MeetingJoinUserScalarWhereInput[]
    NOT?: MeetingJoinUserScalarWhereInput | MeetingJoinUserScalarWhereInput[]
    id?: IntFilter<"MeetingJoinUser"> | number
    meetingId?: IntFilter<"MeetingJoinUser"> | number
    userId?: IntFilter<"MeetingJoinUser"> | number
    createdAt?: DateTimeFilter<"MeetingJoinUser"> | Date | string
    updatedAt?: DateTimeFilter<"MeetingJoinUser"> | Date | string
  }

  export type ReplyUpsertWithWhereUniqueWithoutUserInput = {
    where: ReplyWhereUniqueInput
    update: XOR<ReplyUpdateWithoutUserInput, ReplyUncheckedUpdateWithoutUserInput>
    create: XOR<ReplyCreateWithoutUserInput, ReplyUncheckedCreateWithoutUserInput>
  }

  export type ReplyUpdateWithWhereUniqueWithoutUserInput = {
    where: ReplyWhereUniqueInput
    data: XOR<ReplyUpdateWithoutUserInput, ReplyUncheckedUpdateWithoutUserInput>
  }

  export type ReplyUpdateManyWithWhereWithoutUserInput = {
    where: ReplyScalarWhereInput
    data: XOR<ReplyUpdateManyMutationInput, ReplyUncheckedUpdateManyWithoutUserInput>
  }

  export type ReplyScalarWhereInput = {
    AND?: ReplyScalarWhereInput | ReplyScalarWhereInput[]
    OR?: ReplyScalarWhereInput[]
    NOT?: ReplyScalarWhereInput | ReplyScalarWhereInput[]
    id?: IntFilter<"Reply"> | number
    communityContentId?: IntFilter<"Reply"> | number
    userId?: IntFilter<"Reply"> | number
    content?: StringFilter<"Reply"> | string
    createdAt?: DateTimeFilter<"Reply"> | Date | string
  }

  export type CommunityContentUpsertWithWhereUniqueWithoutWritedUserInput = {
    where: CommunityContentWhereUniqueInput
    update: XOR<CommunityContentUpdateWithoutWritedUserInput, CommunityContentUncheckedUpdateWithoutWritedUserInput>
    create: XOR<CommunityContentCreateWithoutWritedUserInput, CommunityContentUncheckedCreateWithoutWritedUserInput>
  }

  export type CommunityContentUpdateWithWhereUniqueWithoutWritedUserInput = {
    where: CommunityContentWhereUniqueInput
    data: XOR<CommunityContentUpdateWithoutWritedUserInput, CommunityContentUncheckedUpdateWithoutWritedUserInput>
  }

  export type CommunityContentUpdateManyWithWhereWithoutWritedUserInput = {
    where: CommunityContentScalarWhereInput
    data: XOR<CommunityContentUpdateManyMutationInput, CommunityContentUncheckedUpdateManyWithoutWritedUserInput>
  }

  export type CommunityContentScalarWhereInput = {
    AND?: CommunityContentScalarWhereInput | CommunityContentScalarWhereInput[]
    OR?: CommunityContentScalarWhereInput[]
    NOT?: CommunityContentScalarWhereInput | CommunityContentScalarWhereInput[]
    id?: IntFilter<"CommunityContent"> | number
    communityId?: IntFilter<"CommunityContent"> | number
    writedUserId?: IntFilter<"CommunityContent"> | number
    title?: StringFilter<"CommunityContent"> | string
    content?: StringFilter<"CommunityContent"> | string
    likeCount?: IntFilter<"CommunityContent"> | number
    contentImageUrl?: StringNullableFilter<"CommunityContent"> | string | null
    createdAt?: DateTimeFilter<"CommunityContent"> | Date | string
  }

  export type UserMatchingUpsertWithWhereUniqueWithoutCallerUserInput = {
    where: UserMatchingWhereUniqueInput
    update: XOR<UserMatchingUpdateWithoutCallerUserInput, UserMatchingUncheckedUpdateWithoutCallerUserInput>
    create: XOR<UserMatchingCreateWithoutCallerUserInput, UserMatchingUncheckedCreateWithoutCallerUserInput>
  }

  export type UserMatchingUpdateWithWhereUniqueWithoutCallerUserInput = {
    where: UserMatchingWhereUniqueInput
    data: XOR<UserMatchingUpdateWithoutCallerUserInput, UserMatchingUncheckedUpdateWithoutCallerUserInput>
  }

  export type UserMatchingUpdateManyWithWhereWithoutCallerUserInput = {
    where: UserMatchingScalarWhereInput
    data: XOR<UserMatchingUpdateManyMutationInput, UserMatchingUncheckedUpdateManyWithoutCallerUserInput>
  }

  export type UserMatchingScalarWhereInput = {
    AND?: UserMatchingScalarWhereInput | UserMatchingScalarWhereInput[]
    OR?: UserMatchingScalarWhereInput[]
    NOT?: UserMatchingScalarWhereInput | UserMatchingScalarWhereInput[]
    id?: IntFilter<"UserMatching"> | number
    callerUserId?: IntFilter<"UserMatching"> | number
    calleeUserId?: IntFilter<"UserMatching"> | number
    comment?: StringFilter<"UserMatching"> | string
    matchingCategoryId?: IntFilter<"UserMatching"> | number
    createdAt?: DateTimeFilter<"UserMatching"> | Date | string
  }

  export type UserMatchingUpsertWithWhereUniqueWithoutCalleeUserInput = {
    where: UserMatchingWhereUniqueInput
    update: XOR<UserMatchingUpdateWithoutCalleeUserInput, UserMatchingUncheckedUpdateWithoutCalleeUserInput>
    create: XOR<UserMatchingCreateWithoutCalleeUserInput, UserMatchingUncheckedCreateWithoutCalleeUserInput>
  }

  export type UserMatchingUpdateWithWhereUniqueWithoutCalleeUserInput = {
    where: UserMatchingWhereUniqueInput
    data: XOR<UserMatchingUpdateWithoutCalleeUserInput, UserMatchingUncheckedUpdateWithoutCalleeUserInput>
  }

  export type UserMatchingUpdateManyWithWhereWithoutCalleeUserInput = {
    where: UserMatchingScalarWhereInput
    data: XOR<UserMatchingUpdateManyMutationInput, UserMatchingUncheckedUpdateManyWithoutCalleeUserInput>
  }

  export type AlcoholUpsertWithoutUserInput = {
    update: XOR<AlcoholUpdateWithoutUserInput, AlcoholUncheckedUpdateWithoutUserInput>
    create: XOR<AlcoholCreateWithoutUserInput, AlcoholUncheckedCreateWithoutUserInput>
    where?: AlcoholWhereInput
  }

  export type AlcoholUpdateToOneWithWhereWithoutUserInput = {
    where?: AlcoholWhereInput
    data: XOR<AlcoholUpdateWithoutUserInput, AlcoholUncheckedUpdateWithoutUserInput>
  }

  export type AlcoholUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlcoholUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UniversityUpsertWithoutUserInput = {
    update: XOR<UniversityUpdateWithoutUserInput, UniversityUncheckedUpdateWithoutUserInput>
    create: XOR<UniversityCreateWithoutUserInput, UniversityUncheckedCreateWithoutUserInput>
    where?: UniversityWhereInput
  }

  export type UniversityUpdateToOneWithWhereWithoutUserInput = {
    where?: UniversityWhereInput
    data: XOR<UniversityUpdateWithoutUserInput, UniversityUncheckedUpdateWithoutUserInput>
  }

  export type UniversityUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UniversityUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MbtiUpsertWithoutUserInput = {
    update: XOR<MbtiUpdateWithoutUserInput, MbtiUncheckedUpdateWithoutUserInput>
    create: XOR<MbtiCreateWithoutUserInput, MbtiUncheckedCreateWithoutUserInput>
    where?: MbtiWhereInput
  }

  export type MbtiUpdateToOneWithWhereWithoutUserInput = {
    where?: MbtiWhereInput
    data: XOR<MbtiUpdateWithoutUserInput, MbtiUncheckedUpdateWithoutUserInput>
  }

  export type MbtiUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MbtiUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutMbtiInput = {
    name: string
    major: string
    alcoholLevel?: number
    madCampStatus?: $Enums.MadCampStatus
    email: string
    sex?: $Enums.Sex
    classId: number
    imageUrl?: string | null
    leadershipLevel?: number
    refreshToken?: string | null
    birthday: Date | string
    registrationStatus?: $Enums.RegistrationStatus
    programmingLevel?: number
    programmingField: string
    programmingLanguage: string
    createdAt?: Date | string
    meeting?: MeetingCreateNestedManyWithoutHostInput
    meetingJoinUser?: MeetingJoinUserCreateNestedManyWithoutUserInput
    reply?: ReplyCreateNestedManyWithoutUserInput
    communityContent?: CommunityContentCreateNestedManyWithoutWritedUserInput
    callerUserMatching?: UserMatchingCreateNestedManyWithoutCallerUserInput
    calleeUserMatching?: UserMatchingCreateNestedManyWithoutCalleeUserInput
    preferredAlcohol?: AlcoholCreateNestedOneWithoutUserInput
    university: UniversityCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMbtiInput = {
    id?: number
    universityId: number
    name: string
    major: string
    alcoholLevel?: number
    madCampStatus?: $Enums.MadCampStatus
    email: string
    sex?: $Enums.Sex
    classId: number
    imageUrl?: string | null
    preferredAlcoholId?: number
    leadershipLevel?: number
    refreshToken?: string | null
    birthday: Date | string
    registrationStatus?: $Enums.RegistrationStatus
    programmingLevel?: number
    programmingField: string
    programmingLanguage: string
    createdAt?: Date | string
    meeting?: MeetingUncheckedCreateNestedManyWithoutHostInput
    meetingJoinUser?: MeetingJoinUserUncheckedCreateNestedManyWithoutUserInput
    reply?: ReplyUncheckedCreateNestedManyWithoutUserInput
    communityContent?: CommunityContentUncheckedCreateNestedManyWithoutWritedUserInput
    callerUserMatching?: UserMatchingUncheckedCreateNestedManyWithoutCallerUserInput
    calleeUserMatching?: UserMatchingUncheckedCreateNestedManyWithoutCalleeUserInput
  }

  export type UserCreateOrConnectWithoutMbtiInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMbtiInput, UserUncheckedCreateWithoutMbtiInput>
  }

  export type UserCreateManyMbtiInputEnvelope = {
    data: UserCreateManyMbtiInput | UserCreateManyMbtiInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutMbtiInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutMbtiInput, UserUncheckedUpdateWithoutMbtiInput>
    create: XOR<UserCreateWithoutMbtiInput, UserUncheckedCreateWithoutMbtiInput>
  }

  export type UserUpdateWithWhereUniqueWithoutMbtiInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutMbtiInput, UserUncheckedUpdateWithoutMbtiInput>
  }

  export type UserUpdateManyWithWhereWithoutMbtiInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutMbtiInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    universityId?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    major?: StringFilter<"User"> | string
    alcoholLevel?: IntFilter<"User"> | number
    madCampStatus?: EnumMadCampStatusFilter<"User"> | $Enums.MadCampStatus
    email?: StringFilter<"User"> | string
    sex?: EnumSexFilter<"User"> | $Enums.Sex
    mbtiId?: IntFilter<"User"> | number
    classId?: IntFilter<"User"> | number
    imageUrl?: StringNullableFilter<"User"> | string | null
    preferredAlcoholId?: IntFilter<"User"> | number
    leadershipLevel?: IntFilter<"User"> | number
    refreshToken?: StringNullableFilter<"User"> | string | null
    birthday?: DateTimeFilter<"User"> | Date | string
    registrationStatus?: EnumRegistrationStatusFilter<"User"> | $Enums.RegistrationStatus
    programmingLevel?: IntFilter<"User"> | number
    programmingField?: StringFilter<"User"> | string
    programmingLanguage?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
  }

  export type UserCreateWithoutPreferredAlcoholInput = {
    name: string
    major: string
    alcoholLevel?: number
    madCampStatus?: $Enums.MadCampStatus
    email: string
    sex?: $Enums.Sex
    classId: number
    imageUrl?: string | null
    leadershipLevel?: number
    refreshToken?: string | null
    birthday: Date | string
    registrationStatus?: $Enums.RegistrationStatus
    programmingLevel?: number
    programmingField: string
    programmingLanguage: string
    createdAt?: Date | string
    meeting?: MeetingCreateNestedManyWithoutHostInput
    meetingJoinUser?: MeetingJoinUserCreateNestedManyWithoutUserInput
    reply?: ReplyCreateNestedManyWithoutUserInput
    communityContent?: CommunityContentCreateNestedManyWithoutWritedUserInput
    callerUserMatching?: UserMatchingCreateNestedManyWithoutCallerUserInput
    calleeUserMatching?: UserMatchingCreateNestedManyWithoutCalleeUserInput
    university: UniversityCreateNestedOneWithoutUserInput
    mbti: MbtiCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPreferredAlcoholInput = {
    id?: number
    universityId: number
    name: string
    major: string
    alcoholLevel?: number
    madCampStatus?: $Enums.MadCampStatus
    email: string
    sex?: $Enums.Sex
    mbtiId: number
    classId: number
    imageUrl?: string | null
    leadershipLevel?: number
    refreshToken?: string | null
    birthday: Date | string
    registrationStatus?: $Enums.RegistrationStatus
    programmingLevel?: number
    programmingField: string
    programmingLanguage: string
    createdAt?: Date | string
    meeting?: MeetingUncheckedCreateNestedManyWithoutHostInput
    meetingJoinUser?: MeetingJoinUserUncheckedCreateNestedManyWithoutUserInput
    reply?: ReplyUncheckedCreateNestedManyWithoutUserInput
    communityContent?: CommunityContentUncheckedCreateNestedManyWithoutWritedUserInput
    callerUserMatching?: UserMatchingUncheckedCreateNestedManyWithoutCallerUserInput
    calleeUserMatching?: UserMatchingUncheckedCreateNestedManyWithoutCalleeUserInput
  }

  export type UserCreateOrConnectWithoutPreferredAlcoholInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPreferredAlcoholInput, UserUncheckedCreateWithoutPreferredAlcoholInput>
  }

  export type UserCreateManyPreferredAlcoholInputEnvelope = {
    data: UserCreateManyPreferredAlcoholInput | UserCreateManyPreferredAlcoholInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutPreferredAlcoholInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutPreferredAlcoholInput, UserUncheckedUpdateWithoutPreferredAlcoholInput>
    create: XOR<UserCreateWithoutPreferredAlcoholInput, UserUncheckedCreateWithoutPreferredAlcoholInput>
  }

  export type UserUpdateWithWhereUniqueWithoutPreferredAlcoholInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutPreferredAlcoholInput, UserUncheckedUpdateWithoutPreferredAlcoholInput>
  }

  export type UserUpdateManyWithWhereWithoutPreferredAlcoholInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutPreferredAlcoholInput>
  }

  export type UserCreateWithoutUniversityInput = {
    name: string
    major: string
    alcoholLevel?: number
    madCampStatus?: $Enums.MadCampStatus
    email: string
    sex?: $Enums.Sex
    classId: number
    imageUrl?: string | null
    leadershipLevel?: number
    refreshToken?: string | null
    birthday: Date | string
    registrationStatus?: $Enums.RegistrationStatus
    programmingLevel?: number
    programmingField: string
    programmingLanguage: string
    createdAt?: Date | string
    meeting?: MeetingCreateNestedManyWithoutHostInput
    meetingJoinUser?: MeetingJoinUserCreateNestedManyWithoutUserInput
    reply?: ReplyCreateNestedManyWithoutUserInput
    communityContent?: CommunityContentCreateNestedManyWithoutWritedUserInput
    callerUserMatching?: UserMatchingCreateNestedManyWithoutCallerUserInput
    calleeUserMatching?: UserMatchingCreateNestedManyWithoutCalleeUserInput
    preferredAlcohol?: AlcoholCreateNestedOneWithoutUserInput
    mbti: MbtiCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUniversityInput = {
    id?: number
    name: string
    major: string
    alcoholLevel?: number
    madCampStatus?: $Enums.MadCampStatus
    email: string
    sex?: $Enums.Sex
    mbtiId: number
    classId: number
    imageUrl?: string | null
    preferredAlcoholId?: number
    leadershipLevel?: number
    refreshToken?: string | null
    birthday: Date | string
    registrationStatus?: $Enums.RegistrationStatus
    programmingLevel?: number
    programmingField: string
    programmingLanguage: string
    createdAt?: Date | string
    meeting?: MeetingUncheckedCreateNestedManyWithoutHostInput
    meetingJoinUser?: MeetingJoinUserUncheckedCreateNestedManyWithoutUserInput
    reply?: ReplyUncheckedCreateNestedManyWithoutUserInput
    communityContent?: CommunityContentUncheckedCreateNestedManyWithoutWritedUserInput
    callerUserMatching?: UserMatchingUncheckedCreateNestedManyWithoutCallerUserInput
    calleeUserMatching?: UserMatchingUncheckedCreateNestedManyWithoutCalleeUserInput
  }

  export type UserCreateOrConnectWithoutUniversityInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUniversityInput, UserUncheckedCreateWithoutUniversityInput>
  }

  export type UserCreateManyUniversityInputEnvelope = {
    data: UserCreateManyUniversityInput | UserCreateManyUniversityInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutUniversityInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutUniversityInput, UserUncheckedUpdateWithoutUniversityInput>
    create: XOR<UserCreateWithoutUniversityInput, UserUncheckedCreateWithoutUniversityInput>
  }

  export type UserUpdateWithWhereUniqueWithoutUniversityInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutUniversityInput, UserUncheckedUpdateWithoutUniversityInput>
  }

  export type UserUpdateManyWithWhereWithoutUniversityInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUniversityInput>
  }

  export type UserCreateWithoutCallerUserMatchingInput = {
    name: string
    major: string
    alcoholLevel?: number
    madCampStatus?: $Enums.MadCampStatus
    email: string
    sex?: $Enums.Sex
    classId: number
    imageUrl?: string | null
    leadershipLevel?: number
    refreshToken?: string | null
    birthday: Date | string
    registrationStatus?: $Enums.RegistrationStatus
    programmingLevel?: number
    programmingField: string
    programmingLanguage: string
    createdAt?: Date | string
    meeting?: MeetingCreateNestedManyWithoutHostInput
    meetingJoinUser?: MeetingJoinUserCreateNestedManyWithoutUserInput
    reply?: ReplyCreateNestedManyWithoutUserInput
    communityContent?: CommunityContentCreateNestedManyWithoutWritedUserInput
    calleeUserMatching?: UserMatchingCreateNestedManyWithoutCalleeUserInput
    preferredAlcohol?: AlcoholCreateNestedOneWithoutUserInput
    university: UniversityCreateNestedOneWithoutUserInput
    mbti: MbtiCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCallerUserMatchingInput = {
    id?: number
    universityId: number
    name: string
    major: string
    alcoholLevel?: number
    madCampStatus?: $Enums.MadCampStatus
    email: string
    sex?: $Enums.Sex
    mbtiId: number
    classId: number
    imageUrl?: string | null
    preferredAlcoholId?: number
    leadershipLevel?: number
    refreshToken?: string | null
    birthday: Date | string
    registrationStatus?: $Enums.RegistrationStatus
    programmingLevel?: number
    programmingField: string
    programmingLanguage: string
    createdAt?: Date | string
    meeting?: MeetingUncheckedCreateNestedManyWithoutHostInput
    meetingJoinUser?: MeetingJoinUserUncheckedCreateNestedManyWithoutUserInput
    reply?: ReplyUncheckedCreateNestedManyWithoutUserInput
    communityContent?: CommunityContentUncheckedCreateNestedManyWithoutWritedUserInput
    calleeUserMatching?: UserMatchingUncheckedCreateNestedManyWithoutCalleeUserInput
  }

  export type UserCreateOrConnectWithoutCallerUserMatchingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCallerUserMatchingInput, UserUncheckedCreateWithoutCallerUserMatchingInput>
  }

  export type UserCreateWithoutCalleeUserMatchingInput = {
    name: string
    major: string
    alcoholLevel?: number
    madCampStatus?: $Enums.MadCampStatus
    email: string
    sex?: $Enums.Sex
    classId: number
    imageUrl?: string | null
    leadershipLevel?: number
    refreshToken?: string | null
    birthday: Date | string
    registrationStatus?: $Enums.RegistrationStatus
    programmingLevel?: number
    programmingField: string
    programmingLanguage: string
    createdAt?: Date | string
    meeting?: MeetingCreateNestedManyWithoutHostInput
    meetingJoinUser?: MeetingJoinUserCreateNestedManyWithoutUserInput
    reply?: ReplyCreateNestedManyWithoutUserInput
    communityContent?: CommunityContentCreateNestedManyWithoutWritedUserInput
    callerUserMatching?: UserMatchingCreateNestedManyWithoutCallerUserInput
    preferredAlcohol?: AlcoholCreateNestedOneWithoutUserInput
    university: UniversityCreateNestedOneWithoutUserInput
    mbti: MbtiCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCalleeUserMatchingInput = {
    id?: number
    universityId: number
    name: string
    major: string
    alcoholLevel?: number
    madCampStatus?: $Enums.MadCampStatus
    email: string
    sex?: $Enums.Sex
    mbtiId: number
    classId: number
    imageUrl?: string | null
    preferredAlcoholId?: number
    leadershipLevel?: number
    refreshToken?: string | null
    birthday: Date | string
    registrationStatus?: $Enums.RegistrationStatus
    programmingLevel?: number
    programmingField: string
    programmingLanguage: string
    createdAt?: Date | string
    meeting?: MeetingUncheckedCreateNestedManyWithoutHostInput
    meetingJoinUser?: MeetingJoinUserUncheckedCreateNestedManyWithoutUserInput
    reply?: ReplyUncheckedCreateNestedManyWithoutUserInput
    communityContent?: CommunityContentUncheckedCreateNestedManyWithoutWritedUserInput
    callerUserMatching?: UserMatchingUncheckedCreateNestedManyWithoutCallerUserInput
  }

  export type UserCreateOrConnectWithoutCalleeUserMatchingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCalleeUserMatchingInput, UserUncheckedCreateWithoutCalleeUserMatchingInput>
  }

  export type MatchingCategoryCreateWithoutUserInput = {
    name: string
    createdAt?: Date | string
  }

  export type MatchingCategoryUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    createdAt?: Date | string
  }

  export type MatchingCategoryCreateOrConnectWithoutUserInput = {
    where: MatchingCategoryWhereUniqueInput
    create: XOR<MatchingCategoryCreateWithoutUserInput, MatchingCategoryUncheckedCreateWithoutUserInput>
  }

  export type UserUpsertWithoutCallerUserMatchingInput = {
    update: XOR<UserUpdateWithoutCallerUserMatchingInput, UserUncheckedUpdateWithoutCallerUserMatchingInput>
    create: XOR<UserCreateWithoutCallerUserMatchingInput, UserUncheckedCreateWithoutCallerUserMatchingInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCallerUserMatchingInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCallerUserMatchingInput, UserUncheckedUpdateWithoutCallerUserMatchingInput>
  }

  export type UserUpdateWithoutCallerUserMatchingInput = {
    name?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    alcoholLevel?: IntFieldUpdateOperationsInput | number
    madCampStatus?: EnumMadCampStatusFieldUpdateOperationsInput | $Enums.MadCampStatus
    email?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    classId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipLevel?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationStatus?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    programmingLevel?: IntFieldUpdateOperationsInput | number
    programmingField?: StringFieldUpdateOperationsInput | string
    programmingLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meeting?: MeetingUpdateManyWithoutHostNestedInput
    meetingJoinUser?: MeetingJoinUserUpdateManyWithoutUserNestedInput
    reply?: ReplyUpdateManyWithoutUserNestedInput
    communityContent?: CommunityContentUpdateManyWithoutWritedUserNestedInput
    calleeUserMatching?: UserMatchingUpdateManyWithoutCalleeUserNestedInput
    preferredAlcohol?: AlcoholUpdateOneRequiredWithoutUserNestedInput
    university?: UniversityUpdateOneRequiredWithoutUserNestedInput
    mbti?: MbtiUpdateOneRequiredWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCallerUserMatchingInput = {
    id?: IntFieldUpdateOperationsInput | number
    universityId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    alcoholLevel?: IntFieldUpdateOperationsInput | number
    madCampStatus?: EnumMadCampStatusFieldUpdateOperationsInput | $Enums.MadCampStatus
    email?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    mbtiId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    preferredAlcoholId?: IntFieldUpdateOperationsInput | number
    leadershipLevel?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationStatus?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    programmingLevel?: IntFieldUpdateOperationsInput | number
    programmingField?: StringFieldUpdateOperationsInput | string
    programmingLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meeting?: MeetingUncheckedUpdateManyWithoutHostNestedInput
    meetingJoinUser?: MeetingJoinUserUncheckedUpdateManyWithoutUserNestedInput
    reply?: ReplyUncheckedUpdateManyWithoutUserNestedInput
    communityContent?: CommunityContentUncheckedUpdateManyWithoutWritedUserNestedInput
    calleeUserMatching?: UserMatchingUncheckedUpdateManyWithoutCalleeUserNestedInput
  }

  export type UserUpsertWithoutCalleeUserMatchingInput = {
    update: XOR<UserUpdateWithoutCalleeUserMatchingInput, UserUncheckedUpdateWithoutCalleeUserMatchingInput>
    create: XOR<UserCreateWithoutCalleeUserMatchingInput, UserUncheckedCreateWithoutCalleeUserMatchingInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCalleeUserMatchingInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCalleeUserMatchingInput, UserUncheckedUpdateWithoutCalleeUserMatchingInput>
  }

  export type UserUpdateWithoutCalleeUserMatchingInput = {
    name?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    alcoholLevel?: IntFieldUpdateOperationsInput | number
    madCampStatus?: EnumMadCampStatusFieldUpdateOperationsInput | $Enums.MadCampStatus
    email?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    classId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipLevel?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationStatus?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    programmingLevel?: IntFieldUpdateOperationsInput | number
    programmingField?: StringFieldUpdateOperationsInput | string
    programmingLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meeting?: MeetingUpdateManyWithoutHostNestedInput
    meetingJoinUser?: MeetingJoinUserUpdateManyWithoutUserNestedInput
    reply?: ReplyUpdateManyWithoutUserNestedInput
    communityContent?: CommunityContentUpdateManyWithoutWritedUserNestedInput
    callerUserMatching?: UserMatchingUpdateManyWithoutCallerUserNestedInput
    preferredAlcohol?: AlcoholUpdateOneRequiredWithoutUserNestedInput
    university?: UniversityUpdateOneRequiredWithoutUserNestedInput
    mbti?: MbtiUpdateOneRequiredWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCalleeUserMatchingInput = {
    id?: IntFieldUpdateOperationsInput | number
    universityId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    alcoholLevel?: IntFieldUpdateOperationsInput | number
    madCampStatus?: EnumMadCampStatusFieldUpdateOperationsInput | $Enums.MadCampStatus
    email?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    mbtiId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    preferredAlcoholId?: IntFieldUpdateOperationsInput | number
    leadershipLevel?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationStatus?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    programmingLevel?: IntFieldUpdateOperationsInput | number
    programmingField?: StringFieldUpdateOperationsInput | string
    programmingLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meeting?: MeetingUncheckedUpdateManyWithoutHostNestedInput
    meetingJoinUser?: MeetingJoinUserUncheckedUpdateManyWithoutUserNestedInput
    reply?: ReplyUncheckedUpdateManyWithoutUserNestedInput
    communityContent?: CommunityContentUncheckedUpdateManyWithoutWritedUserNestedInput
    callerUserMatching?: UserMatchingUncheckedUpdateManyWithoutCallerUserNestedInput
  }

  export type MatchingCategoryUpsertWithoutUserInput = {
    update: XOR<MatchingCategoryUpdateWithoutUserInput, MatchingCategoryUncheckedUpdateWithoutUserInput>
    create: XOR<MatchingCategoryCreateWithoutUserInput, MatchingCategoryUncheckedCreateWithoutUserInput>
    where?: MatchingCategoryWhereInput
  }

  export type MatchingCategoryUpdateToOneWithWhereWithoutUserInput = {
    where?: MatchingCategoryWhereInput
    data: XOR<MatchingCategoryUpdateWithoutUserInput, MatchingCategoryUncheckedUpdateWithoutUserInput>
  }

  export type MatchingCategoryUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchingCategoryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMatchingCreateWithoutMatchingCategoryInput = {
    comment: string
    createdAt?: Date | string
    callerUser: UserCreateNestedOneWithoutCallerUserMatchingInput
    calleeUser: UserCreateNestedOneWithoutCalleeUserMatchingInput
  }

  export type UserMatchingUncheckedCreateWithoutMatchingCategoryInput = {
    id?: number
    callerUserId: number
    calleeUserId: number
    comment: string
    createdAt?: Date | string
  }

  export type UserMatchingCreateOrConnectWithoutMatchingCategoryInput = {
    where: UserMatchingWhereUniqueInput
    create: XOR<UserMatchingCreateWithoutMatchingCategoryInput, UserMatchingUncheckedCreateWithoutMatchingCategoryInput>
  }

  export type UserMatchingCreateManyMatchingCategoryInputEnvelope = {
    data: UserMatchingCreateManyMatchingCategoryInput | UserMatchingCreateManyMatchingCategoryInput[]
    skipDuplicates?: boolean
  }

  export type UserMatchingUpsertWithWhereUniqueWithoutMatchingCategoryInput = {
    where: UserMatchingWhereUniqueInput
    update: XOR<UserMatchingUpdateWithoutMatchingCategoryInput, UserMatchingUncheckedUpdateWithoutMatchingCategoryInput>
    create: XOR<UserMatchingCreateWithoutMatchingCategoryInput, UserMatchingUncheckedCreateWithoutMatchingCategoryInput>
  }

  export type UserMatchingUpdateWithWhereUniqueWithoutMatchingCategoryInput = {
    where: UserMatchingWhereUniqueInput
    data: XOR<UserMatchingUpdateWithoutMatchingCategoryInput, UserMatchingUncheckedUpdateWithoutMatchingCategoryInput>
  }

  export type UserMatchingUpdateManyWithWhereWithoutMatchingCategoryInput = {
    where: UserMatchingScalarWhereInput
    data: XOR<UserMatchingUpdateManyMutationInput, UserMatchingUncheckedUpdateManyWithoutMatchingCategoryInput>
  }

  export type MeetingCreateWithoutCategoryInput = {
    meetingImageUrl?: string | null
    location: string
    title: string
    keyword: string
    description: string
    maxPeople: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    meetingJoinUser?: MeetingJoinUserCreateNestedManyWithoutMeetingInput
    host: UserCreateNestedOneWithoutMeetingInput
  }

  export type MeetingUncheckedCreateWithoutCategoryInput = {
    id?: number
    hostId: number
    meetingImageUrl?: string | null
    location: string
    title: string
    keyword: string
    description: string
    maxPeople: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    meetingJoinUser?: MeetingJoinUserUncheckedCreateNestedManyWithoutMeetingInput
  }

  export type MeetingCreateOrConnectWithoutCategoryInput = {
    where: MeetingWhereUniqueInput
    create: XOR<MeetingCreateWithoutCategoryInput, MeetingUncheckedCreateWithoutCategoryInput>
  }

  export type MeetingCreateManyCategoryInputEnvelope = {
    data: MeetingCreateManyCategoryInput | MeetingCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type MeetingUpsertWithWhereUniqueWithoutCategoryInput = {
    where: MeetingWhereUniqueInput
    update: XOR<MeetingUpdateWithoutCategoryInput, MeetingUncheckedUpdateWithoutCategoryInput>
    create: XOR<MeetingCreateWithoutCategoryInput, MeetingUncheckedCreateWithoutCategoryInput>
  }

  export type MeetingUpdateWithWhereUniqueWithoutCategoryInput = {
    where: MeetingWhereUniqueInput
    data: XOR<MeetingUpdateWithoutCategoryInput, MeetingUncheckedUpdateWithoutCategoryInput>
  }

  export type MeetingUpdateManyWithWhereWithoutCategoryInput = {
    where: MeetingScalarWhereInput
    data: XOR<MeetingUpdateManyMutationInput, MeetingUncheckedUpdateManyWithoutCategoryInput>
  }

  export type MeetingJoinUserCreateWithoutMeetingInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMeetingJoinUserInput
  }

  export type MeetingJoinUserUncheckedCreateWithoutMeetingInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingJoinUserCreateOrConnectWithoutMeetingInput = {
    where: MeetingJoinUserWhereUniqueInput
    create: XOR<MeetingJoinUserCreateWithoutMeetingInput, MeetingJoinUserUncheckedCreateWithoutMeetingInput>
  }

  export type MeetingJoinUserCreateManyMeetingInputEnvelope = {
    data: MeetingJoinUserCreateManyMeetingInput | MeetingJoinUserCreateManyMeetingInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutMeetingInput = {
    name: string
    major: string
    alcoholLevel?: number
    madCampStatus?: $Enums.MadCampStatus
    email: string
    sex?: $Enums.Sex
    classId: number
    imageUrl?: string | null
    leadershipLevel?: number
    refreshToken?: string | null
    birthday: Date | string
    registrationStatus?: $Enums.RegistrationStatus
    programmingLevel?: number
    programmingField: string
    programmingLanguage: string
    createdAt?: Date | string
    meetingJoinUser?: MeetingJoinUserCreateNestedManyWithoutUserInput
    reply?: ReplyCreateNestedManyWithoutUserInput
    communityContent?: CommunityContentCreateNestedManyWithoutWritedUserInput
    callerUserMatching?: UserMatchingCreateNestedManyWithoutCallerUserInput
    calleeUserMatching?: UserMatchingCreateNestedManyWithoutCalleeUserInput
    preferredAlcohol?: AlcoholCreateNestedOneWithoutUserInput
    university: UniversityCreateNestedOneWithoutUserInput
    mbti: MbtiCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMeetingInput = {
    id?: number
    universityId: number
    name: string
    major: string
    alcoholLevel?: number
    madCampStatus?: $Enums.MadCampStatus
    email: string
    sex?: $Enums.Sex
    mbtiId: number
    classId: number
    imageUrl?: string | null
    preferredAlcoholId?: number
    leadershipLevel?: number
    refreshToken?: string | null
    birthday: Date | string
    registrationStatus?: $Enums.RegistrationStatus
    programmingLevel?: number
    programmingField: string
    programmingLanguage: string
    createdAt?: Date | string
    meetingJoinUser?: MeetingJoinUserUncheckedCreateNestedManyWithoutUserInput
    reply?: ReplyUncheckedCreateNestedManyWithoutUserInput
    communityContent?: CommunityContentUncheckedCreateNestedManyWithoutWritedUserInput
    callerUserMatching?: UserMatchingUncheckedCreateNestedManyWithoutCallerUserInput
    calleeUserMatching?: UserMatchingUncheckedCreateNestedManyWithoutCalleeUserInput
  }

  export type UserCreateOrConnectWithoutMeetingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMeetingInput, UserUncheckedCreateWithoutMeetingInput>
  }

  export type CategoryCreateWithoutMeetingInput = {
    name: string
    createdAt?: Date | string
  }

  export type CategoryUncheckedCreateWithoutMeetingInput = {
    id?: number
    name: string
    createdAt?: Date | string
  }

  export type CategoryCreateOrConnectWithoutMeetingInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutMeetingInput, CategoryUncheckedCreateWithoutMeetingInput>
  }

  export type MeetingJoinUserUpsertWithWhereUniqueWithoutMeetingInput = {
    where: MeetingJoinUserWhereUniqueInput
    update: XOR<MeetingJoinUserUpdateWithoutMeetingInput, MeetingJoinUserUncheckedUpdateWithoutMeetingInput>
    create: XOR<MeetingJoinUserCreateWithoutMeetingInput, MeetingJoinUserUncheckedCreateWithoutMeetingInput>
  }

  export type MeetingJoinUserUpdateWithWhereUniqueWithoutMeetingInput = {
    where: MeetingJoinUserWhereUniqueInput
    data: XOR<MeetingJoinUserUpdateWithoutMeetingInput, MeetingJoinUserUncheckedUpdateWithoutMeetingInput>
  }

  export type MeetingJoinUserUpdateManyWithWhereWithoutMeetingInput = {
    where: MeetingJoinUserScalarWhereInput
    data: XOR<MeetingJoinUserUpdateManyMutationInput, MeetingJoinUserUncheckedUpdateManyWithoutMeetingInput>
  }

  export type UserUpsertWithoutMeetingInput = {
    update: XOR<UserUpdateWithoutMeetingInput, UserUncheckedUpdateWithoutMeetingInput>
    create: XOR<UserCreateWithoutMeetingInput, UserUncheckedCreateWithoutMeetingInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMeetingInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMeetingInput, UserUncheckedUpdateWithoutMeetingInput>
  }

  export type UserUpdateWithoutMeetingInput = {
    name?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    alcoholLevel?: IntFieldUpdateOperationsInput | number
    madCampStatus?: EnumMadCampStatusFieldUpdateOperationsInput | $Enums.MadCampStatus
    email?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    classId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipLevel?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationStatus?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    programmingLevel?: IntFieldUpdateOperationsInput | number
    programmingField?: StringFieldUpdateOperationsInput | string
    programmingLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingJoinUser?: MeetingJoinUserUpdateManyWithoutUserNestedInput
    reply?: ReplyUpdateManyWithoutUserNestedInput
    communityContent?: CommunityContentUpdateManyWithoutWritedUserNestedInput
    callerUserMatching?: UserMatchingUpdateManyWithoutCallerUserNestedInput
    calleeUserMatching?: UserMatchingUpdateManyWithoutCalleeUserNestedInput
    preferredAlcohol?: AlcoholUpdateOneRequiredWithoutUserNestedInput
    university?: UniversityUpdateOneRequiredWithoutUserNestedInput
    mbti?: MbtiUpdateOneRequiredWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMeetingInput = {
    id?: IntFieldUpdateOperationsInput | number
    universityId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    alcoholLevel?: IntFieldUpdateOperationsInput | number
    madCampStatus?: EnumMadCampStatusFieldUpdateOperationsInput | $Enums.MadCampStatus
    email?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    mbtiId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    preferredAlcoholId?: IntFieldUpdateOperationsInput | number
    leadershipLevel?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationStatus?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    programmingLevel?: IntFieldUpdateOperationsInput | number
    programmingField?: StringFieldUpdateOperationsInput | string
    programmingLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingJoinUser?: MeetingJoinUserUncheckedUpdateManyWithoutUserNestedInput
    reply?: ReplyUncheckedUpdateManyWithoutUserNestedInput
    communityContent?: CommunityContentUncheckedUpdateManyWithoutWritedUserNestedInput
    callerUserMatching?: UserMatchingUncheckedUpdateManyWithoutCallerUserNestedInput
    calleeUserMatching?: UserMatchingUncheckedUpdateManyWithoutCalleeUserNestedInput
  }

  export type CategoryUpsertWithoutMeetingInput = {
    update: XOR<CategoryUpdateWithoutMeetingInput, CategoryUncheckedUpdateWithoutMeetingInput>
    create: XOR<CategoryCreateWithoutMeetingInput, CategoryUncheckedCreateWithoutMeetingInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutMeetingInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutMeetingInput, CategoryUncheckedUpdateWithoutMeetingInput>
  }

  export type CategoryUpdateWithoutMeetingInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateWithoutMeetingInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingCreateWithoutMeetingJoinUserInput = {
    meetingImageUrl?: string | null
    location: string
    title: string
    keyword: string
    description: string
    maxPeople: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    host: UserCreateNestedOneWithoutMeetingInput
    category: CategoryCreateNestedOneWithoutMeetingInput
  }

  export type MeetingUncheckedCreateWithoutMeetingJoinUserInput = {
    id?: number
    hostId: number
    categoryId: number
    meetingImageUrl?: string | null
    location: string
    title: string
    keyword: string
    description: string
    maxPeople: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
  }

  export type MeetingCreateOrConnectWithoutMeetingJoinUserInput = {
    where: MeetingWhereUniqueInput
    create: XOR<MeetingCreateWithoutMeetingJoinUserInput, MeetingUncheckedCreateWithoutMeetingJoinUserInput>
  }

  export type UserCreateWithoutMeetingJoinUserInput = {
    name: string
    major: string
    alcoholLevel?: number
    madCampStatus?: $Enums.MadCampStatus
    email: string
    sex?: $Enums.Sex
    classId: number
    imageUrl?: string | null
    leadershipLevel?: number
    refreshToken?: string | null
    birthday: Date | string
    registrationStatus?: $Enums.RegistrationStatus
    programmingLevel?: number
    programmingField: string
    programmingLanguage: string
    createdAt?: Date | string
    meeting?: MeetingCreateNestedManyWithoutHostInput
    reply?: ReplyCreateNestedManyWithoutUserInput
    communityContent?: CommunityContentCreateNestedManyWithoutWritedUserInput
    callerUserMatching?: UserMatchingCreateNestedManyWithoutCallerUserInput
    calleeUserMatching?: UserMatchingCreateNestedManyWithoutCalleeUserInput
    preferredAlcohol?: AlcoholCreateNestedOneWithoutUserInput
    university: UniversityCreateNestedOneWithoutUserInput
    mbti: MbtiCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMeetingJoinUserInput = {
    id?: number
    universityId: number
    name: string
    major: string
    alcoholLevel?: number
    madCampStatus?: $Enums.MadCampStatus
    email: string
    sex?: $Enums.Sex
    mbtiId: number
    classId: number
    imageUrl?: string | null
    preferredAlcoholId?: number
    leadershipLevel?: number
    refreshToken?: string | null
    birthday: Date | string
    registrationStatus?: $Enums.RegistrationStatus
    programmingLevel?: number
    programmingField: string
    programmingLanguage: string
    createdAt?: Date | string
    meeting?: MeetingUncheckedCreateNestedManyWithoutHostInput
    reply?: ReplyUncheckedCreateNestedManyWithoutUserInput
    communityContent?: CommunityContentUncheckedCreateNestedManyWithoutWritedUserInput
    callerUserMatching?: UserMatchingUncheckedCreateNestedManyWithoutCallerUserInput
    calleeUserMatching?: UserMatchingUncheckedCreateNestedManyWithoutCalleeUserInput
  }

  export type UserCreateOrConnectWithoutMeetingJoinUserInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMeetingJoinUserInput, UserUncheckedCreateWithoutMeetingJoinUserInput>
  }

  export type MeetingUpsertWithoutMeetingJoinUserInput = {
    update: XOR<MeetingUpdateWithoutMeetingJoinUserInput, MeetingUncheckedUpdateWithoutMeetingJoinUserInput>
    create: XOR<MeetingCreateWithoutMeetingJoinUserInput, MeetingUncheckedCreateWithoutMeetingJoinUserInput>
    where?: MeetingWhereInput
  }

  export type MeetingUpdateToOneWithWhereWithoutMeetingJoinUserInput = {
    where?: MeetingWhereInput
    data: XOR<MeetingUpdateWithoutMeetingJoinUserInput, MeetingUncheckedUpdateWithoutMeetingJoinUserInput>
  }

  export type MeetingUpdateWithoutMeetingJoinUserInput = {
    meetingImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    keyword?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maxPeople?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    host?: UserUpdateOneRequiredWithoutMeetingNestedInput
    category?: CategoryUpdateOneRequiredWithoutMeetingNestedInput
  }

  export type MeetingUncheckedUpdateWithoutMeetingJoinUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    hostId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    meetingImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    keyword?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maxPeople?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutMeetingJoinUserInput = {
    update: XOR<UserUpdateWithoutMeetingJoinUserInput, UserUncheckedUpdateWithoutMeetingJoinUserInput>
    create: XOR<UserCreateWithoutMeetingJoinUserInput, UserUncheckedCreateWithoutMeetingJoinUserInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMeetingJoinUserInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMeetingJoinUserInput, UserUncheckedUpdateWithoutMeetingJoinUserInput>
  }

  export type UserUpdateWithoutMeetingJoinUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    alcoholLevel?: IntFieldUpdateOperationsInput | number
    madCampStatus?: EnumMadCampStatusFieldUpdateOperationsInput | $Enums.MadCampStatus
    email?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    classId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipLevel?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationStatus?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    programmingLevel?: IntFieldUpdateOperationsInput | number
    programmingField?: StringFieldUpdateOperationsInput | string
    programmingLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meeting?: MeetingUpdateManyWithoutHostNestedInput
    reply?: ReplyUpdateManyWithoutUserNestedInput
    communityContent?: CommunityContentUpdateManyWithoutWritedUserNestedInput
    callerUserMatching?: UserMatchingUpdateManyWithoutCallerUserNestedInput
    calleeUserMatching?: UserMatchingUpdateManyWithoutCalleeUserNestedInput
    preferredAlcohol?: AlcoholUpdateOneRequiredWithoutUserNestedInput
    university?: UniversityUpdateOneRequiredWithoutUserNestedInput
    mbti?: MbtiUpdateOneRequiredWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMeetingJoinUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    universityId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    alcoholLevel?: IntFieldUpdateOperationsInput | number
    madCampStatus?: EnumMadCampStatusFieldUpdateOperationsInput | $Enums.MadCampStatus
    email?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    mbtiId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    preferredAlcoholId?: IntFieldUpdateOperationsInput | number
    leadershipLevel?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationStatus?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    programmingLevel?: IntFieldUpdateOperationsInput | number
    programmingField?: StringFieldUpdateOperationsInput | string
    programmingLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meeting?: MeetingUncheckedUpdateManyWithoutHostNestedInput
    reply?: ReplyUncheckedUpdateManyWithoutUserNestedInput
    communityContent?: CommunityContentUncheckedUpdateManyWithoutWritedUserNestedInput
    callerUserMatching?: UserMatchingUncheckedUpdateManyWithoutCallerUserNestedInput
    calleeUserMatching?: UserMatchingUncheckedUpdateManyWithoutCalleeUserNestedInput
  }

  export type CommunityContentCreateWithoutCommunityInput = {
    title: string
    content: string
    likeCount?: number
    contentImageUrl?: string | null
    createdAt?: Date | string
    reply?: ReplyCreateNestedManyWithoutCommunityContentInput
    writedUser: UserCreateNestedOneWithoutCommunityContentInput
  }

  export type CommunityContentUncheckedCreateWithoutCommunityInput = {
    id?: number
    writedUserId: number
    title: string
    content: string
    likeCount?: number
    contentImageUrl?: string | null
    createdAt?: Date | string
    reply?: ReplyUncheckedCreateNestedManyWithoutCommunityContentInput
  }

  export type CommunityContentCreateOrConnectWithoutCommunityInput = {
    where: CommunityContentWhereUniqueInput
    create: XOR<CommunityContentCreateWithoutCommunityInput, CommunityContentUncheckedCreateWithoutCommunityInput>
  }

  export type CommunityContentCreateManyCommunityInputEnvelope = {
    data: CommunityContentCreateManyCommunityInput | CommunityContentCreateManyCommunityInput[]
    skipDuplicates?: boolean
  }

  export type CommunityContentUpsertWithWhereUniqueWithoutCommunityInput = {
    where: CommunityContentWhereUniqueInput
    update: XOR<CommunityContentUpdateWithoutCommunityInput, CommunityContentUncheckedUpdateWithoutCommunityInput>
    create: XOR<CommunityContentCreateWithoutCommunityInput, CommunityContentUncheckedCreateWithoutCommunityInput>
  }

  export type CommunityContentUpdateWithWhereUniqueWithoutCommunityInput = {
    where: CommunityContentWhereUniqueInput
    data: XOR<CommunityContentUpdateWithoutCommunityInput, CommunityContentUncheckedUpdateWithoutCommunityInput>
  }

  export type CommunityContentUpdateManyWithWhereWithoutCommunityInput = {
    where: CommunityContentScalarWhereInput
    data: XOR<CommunityContentUpdateManyMutationInput, CommunityContentUncheckedUpdateManyWithoutCommunityInput>
  }

  export type ReplyCreateWithoutCommunityContentInput = {
    content: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReplyInput
  }

  export type ReplyUncheckedCreateWithoutCommunityContentInput = {
    id?: number
    userId: number
    content: string
    createdAt?: Date | string
  }

  export type ReplyCreateOrConnectWithoutCommunityContentInput = {
    where: ReplyWhereUniqueInput
    create: XOR<ReplyCreateWithoutCommunityContentInput, ReplyUncheckedCreateWithoutCommunityContentInput>
  }

  export type ReplyCreateManyCommunityContentInputEnvelope = {
    data: ReplyCreateManyCommunityContentInput | ReplyCreateManyCommunityContentInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCommunityContentInput = {
    name: string
    major: string
    alcoholLevel?: number
    madCampStatus?: $Enums.MadCampStatus
    email: string
    sex?: $Enums.Sex
    classId: number
    imageUrl?: string | null
    leadershipLevel?: number
    refreshToken?: string | null
    birthday: Date | string
    registrationStatus?: $Enums.RegistrationStatus
    programmingLevel?: number
    programmingField: string
    programmingLanguage: string
    createdAt?: Date | string
    meeting?: MeetingCreateNestedManyWithoutHostInput
    meetingJoinUser?: MeetingJoinUserCreateNestedManyWithoutUserInput
    reply?: ReplyCreateNestedManyWithoutUserInput
    callerUserMatching?: UserMatchingCreateNestedManyWithoutCallerUserInput
    calleeUserMatching?: UserMatchingCreateNestedManyWithoutCalleeUserInput
    preferredAlcohol?: AlcoholCreateNestedOneWithoutUserInput
    university: UniversityCreateNestedOneWithoutUserInput
    mbti: MbtiCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommunityContentInput = {
    id?: number
    universityId: number
    name: string
    major: string
    alcoholLevel?: number
    madCampStatus?: $Enums.MadCampStatus
    email: string
    sex?: $Enums.Sex
    mbtiId: number
    classId: number
    imageUrl?: string | null
    preferredAlcoholId?: number
    leadershipLevel?: number
    refreshToken?: string | null
    birthday: Date | string
    registrationStatus?: $Enums.RegistrationStatus
    programmingLevel?: number
    programmingField: string
    programmingLanguage: string
    createdAt?: Date | string
    meeting?: MeetingUncheckedCreateNestedManyWithoutHostInput
    meetingJoinUser?: MeetingJoinUserUncheckedCreateNestedManyWithoutUserInput
    reply?: ReplyUncheckedCreateNestedManyWithoutUserInput
    callerUserMatching?: UserMatchingUncheckedCreateNestedManyWithoutCallerUserInput
    calleeUserMatching?: UserMatchingUncheckedCreateNestedManyWithoutCalleeUserInput
  }

  export type UserCreateOrConnectWithoutCommunityContentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommunityContentInput, UserUncheckedCreateWithoutCommunityContentInput>
  }

  export type CommunityCreateWithoutCommunityContentInput = {
    title: string
    createdAt?: Date | string
  }

  export type CommunityUncheckedCreateWithoutCommunityContentInput = {
    id?: number
    title: string
    createdAt?: Date | string
  }

  export type CommunityCreateOrConnectWithoutCommunityContentInput = {
    where: CommunityWhereUniqueInput
    create: XOR<CommunityCreateWithoutCommunityContentInput, CommunityUncheckedCreateWithoutCommunityContentInput>
  }

  export type ReplyUpsertWithWhereUniqueWithoutCommunityContentInput = {
    where: ReplyWhereUniqueInput
    update: XOR<ReplyUpdateWithoutCommunityContentInput, ReplyUncheckedUpdateWithoutCommunityContentInput>
    create: XOR<ReplyCreateWithoutCommunityContentInput, ReplyUncheckedCreateWithoutCommunityContentInput>
  }

  export type ReplyUpdateWithWhereUniqueWithoutCommunityContentInput = {
    where: ReplyWhereUniqueInput
    data: XOR<ReplyUpdateWithoutCommunityContentInput, ReplyUncheckedUpdateWithoutCommunityContentInput>
  }

  export type ReplyUpdateManyWithWhereWithoutCommunityContentInput = {
    where: ReplyScalarWhereInput
    data: XOR<ReplyUpdateManyMutationInput, ReplyUncheckedUpdateManyWithoutCommunityContentInput>
  }

  export type UserUpsertWithoutCommunityContentInput = {
    update: XOR<UserUpdateWithoutCommunityContentInput, UserUncheckedUpdateWithoutCommunityContentInput>
    create: XOR<UserCreateWithoutCommunityContentInput, UserUncheckedCreateWithoutCommunityContentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommunityContentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommunityContentInput, UserUncheckedUpdateWithoutCommunityContentInput>
  }

  export type UserUpdateWithoutCommunityContentInput = {
    name?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    alcoholLevel?: IntFieldUpdateOperationsInput | number
    madCampStatus?: EnumMadCampStatusFieldUpdateOperationsInput | $Enums.MadCampStatus
    email?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    classId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipLevel?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationStatus?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    programmingLevel?: IntFieldUpdateOperationsInput | number
    programmingField?: StringFieldUpdateOperationsInput | string
    programmingLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meeting?: MeetingUpdateManyWithoutHostNestedInput
    meetingJoinUser?: MeetingJoinUserUpdateManyWithoutUserNestedInput
    reply?: ReplyUpdateManyWithoutUserNestedInput
    callerUserMatching?: UserMatchingUpdateManyWithoutCallerUserNestedInput
    calleeUserMatching?: UserMatchingUpdateManyWithoutCalleeUserNestedInput
    preferredAlcohol?: AlcoholUpdateOneRequiredWithoutUserNestedInput
    university?: UniversityUpdateOneRequiredWithoutUserNestedInput
    mbti?: MbtiUpdateOneRequiredWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommunityContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    universityId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    alcoholLevel?: IntFieldUpdateOperationsInput | number
    madCampStatus?: EnumMadCampStatusFieldUpdateOperationsInput | $Enums.MadCampStatus
    email?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    mbtiId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    preferredAlcoholId?: IntFieldUpdateOperationsInput | number
    leadershipLevel?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationStatus?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    programmingLevel?: IntFieldUpdateOperationsInput | number
    programmingField?: StringFieldUpdateOperationsInput | string
    programmingLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meeting?: MeetingUncheckedUpdateManyWithoutHostNestedInput
    meetingJoinUser?: MeetingJoinUserUncheckedUpdateManyWithoutUserNestedInput
    reply?: ReplyUncheckedUpdateManyWithoutUserNestedInput
    callerUserMatching?: UserMatchingUncheckedUpdateManyWithoutCallerUserNestedInput
    calleeUserMatching?: UserMatchingUncheckedUpdateManyWithoutCalleeUserNestedInput
  }

  export type CommunityUpsertWithoutCommunityContentInput = {
    update: XOR<CommunityUpdateWithoutCommunityContentInput, CommunityUncheckedUpdateWithoutCommunityContentInput>
    create: XOR<CommunityCreateWithoutCommunityContentInput, CommunityUncheckedCreateWithoutCommunityContentInput>
    where?: CommunityWhereInput
  }

  export type CommunityUpdateToOneWithWhereWithoutCommunityContentInput = {
    where?: CommunityWhereInput
    data: XOR<CommunityUpdateWithoutCommunityContentInput, CommunityUncheckedUpdateWithoutCommunityContentInput>
  }

  export type CommunityUpdateWithoutCommunityContentInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityUncheckedUpdateWithoutCommunityContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityContentCreateWithoutReplyInput = {
    title: string
    content: string
    likeCount?: number
    contentImageUrl?: string | null
    createdAt?: Date | string
    writedUser: UserCreateNestedOneWithoutCommunityContentInput
    community: CommunityCreateNestedOneWithoutCommunityContentInput
  }

  export type CommunityContentUncheckedCreateWithoutReplyInput = {
    id?: number
    communityId: number
    writedUserId: number
    title: string
    content: string
    likeCount?: number
    contentImageUrl?: string | null
    createdAt?: Date | string
  }

  export type CommunityContentCreateOrConnectWithoutReplyInput = {
    where: CommunityContentWhereUniqueInput
    create: XOR<CommunityContentCreateWithoutReplyInput, CommunityContentUncheckedCreateWithoutReplyInput>
  }

  export type UserCreateWithoutReplyInput = {
    name: string
    major: string
    alcoholLevel?: number
    madCampStatus?: $Enums.MadCampStatus
    email: string
    sex?: $Enums.Sex
    classId: number
    imageUrl?: string | null
    leadershipLevel?: number
    refreshToken?: string | null
    birthday: Date | string
    registrationStatus?: $Enums.RegistrationStatus
    programmingLevel?: number
    programmingField: string
    programmingLanguage: string
    createdAt?: Date | string
    meeting?: MeetingCreateNestedManyWithoutHostInput
    meetingJoinUser?: MeetingJoinUserCreateNestedManyWithoutUserInput
    communityContent?: CommunityContentCreateNestedManyWithoutWritedUserInput
    callerUserMatching?: UserMatchingCreateNestedManyWithoutCallerUserInput
    calleeUserMatching?: UserMatchingCreateNestedManyWithoutCalleeUserInput
    preferredAlcohol?: AlcoholCreateNestedOneWithoutUserInput
    university: UniversityCreateNestedOneWithoutUserInput
    mbti: MbtiCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReplyInput = {
    id?: number
    universityId: number
    name: string
    major: string
    alcoholLevel?: number
    madCampStatus?: $Enums.MadCampStatus
    email: string
    sex?: $Enums.Sex
    mbtiId: number
    classId: number
    imageUrl?: string | null
    preferredAlcoholId?: number
    leadershipLevel?: number
    refreshToken?: string | null
    birthday: Date | string
    registrationStatus?: $Enums.RegistrationStatus
    programmingLevel?: number
    programmingField: string
    programmingLanguage: string
    createdAt?: Date | string
    meeting?: MeetingUncheckedCreateNestedManyWithoutHostInput
    meetingJoinUser?: MeetingJoinUserUncheckedCreateNestedManyWithoutUserInput
    communityContent?: CommunityContentUncheckedCreateNestedManyWithoutWritedUserInput
    callerUserMatching?: UserMatchingUncheckedCreateNestedManyWithoutCallerUserInput
    calleeUserMatching?: UserMatchingUncheckedCreateNestedManyWithoutCalleeUserInput
  }

  export type UserCreateOrConnectWithoutReplyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReplyInput, UserUncheckedCreateWithoutReplyInput>
  }

  export type CommunityContentUpsertWithoutReplyInput = {
    update: XOR<CommunityContentUpdateWithoutReplyInput, CommunityContentUncheckedUpdateWithoutReplyInput>
    create: XOR<CommunityContentCreateWithoutReplyInput, CommunityContentUncheckedCreateWithoutReplyInput>
    where?: CommunityContentWhereInput
  }

  export type CommunityContentUpdateToOneWithWhereWithoutReplyInput = {
    where?: CommunityContentWhereInput
    data: XOR<CommunityContentUpdateWithoutReplyInput, CommunityContentUncheckedUpdateWithoutReplyInput>
  }

  export type CommunityContentUpdateWithoutReplyInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    likeCount?: IntFieldUpdateOperationsInput | number
    contentImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    writedUser?: UserUpdateOneRequiredWithoutCommunityContentNestedInput
    community?: CommunityUpdateOneRequiredWithoutCommunityContentNestedInput
  }

  export type CommunityContentUncheckedUpdateWithoutReplyInput = {
    id?: IntFieldUpdateOperationsInput | number
    communityId?: IntFieldUpdateOperationsInput | number
    writedUserId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    likeCount?: IntFieldUpdateOperationsInput | number
    contentImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutReplyInput = {
    update: XOR<UserUpdateWithoutReplyInput, UserUncheckedUpdateWithoutReplyInput>
    create: XOR<UserCreateWithoutReplyInput, UserUncheckedCreateWithoutReplyInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReplyInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReplyInput, UserUncheckedUpdateWithoutReplyInput>
  }

  export type UserUpdateWithoutReplyInput = {
    name?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    alcoholLevel?: IntFieldUpdateOperationsInput | number
    madCampStatus?: EnumMadCampStatusFieldUpdateOperationsInput | $Enums.MadCampStatus
    email?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    classId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipLevel?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationStatus?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    programmingLevel?: IntFieldUpdateOperationsInput | number
    programmingField?: StringFieldUpdateOperationsInput | string
    programmingLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meeting?: MeetingUpdateManyWithoutHostNestedInput
    meetingJoinUser?: MeetingJoinUserUpdateManyWithoutUserNestedInput
    communityContent?: CommunityContentUpdateManyWithoutWritedUserNestedInput
    callerUserMatching?: UserMatchingUpdateManyWithoutCallerUserNestedInput
    calleeUserMatching?: UserMatchingUpdateManyWithoutCalleeUserNestedInput
    preferredAlcohol?: AlcoholUpdateOneRequiredWithoutUserNestedInput
    university?: UniversityUpdateOneRequiredWithoutUserNestedInput
    mbti?: MbtiUpdateOneRequiredWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReplyInput = {
    id?: IntFieldUpdateOperationsInput | number
    universityId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    alcoholLevel?: IntFieldUpdateOperationsInput | number
    madCampStatus?: EnumMadCampStatusFieldUpdateOperationsInput | $Enums.MadCampStatus
    email?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    mbtiId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    preferredAlcoholId?: IntFieldUpdateOperationsInput | number
    leadershipLevel?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationStatus?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    programmingLevel?: IntFieldUpdateOperationsInput | number
    programmingField?: StringFieldUpdateOperationsInput | string
    programmingLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meeting?: MeetingUncheckedUpdateManyWithoutHostNestedInput
    meetingJoinUser?: MeetingJoinUserUncheckedUpdateManyWithoutUserNestedInput
    communityContent?: CommunityContentUncheckedUpdateManyWithoutWritedUserNestedInput
    callerUserMatching?: UserMatchingUncheckedUpdateManyWithoutCallerUserNestedInput
    calleeUserMatching?: UserMatchingUncheckedUpdateManyWithoutCalleeUserNestedInput
  }

  export type MeetingCreateManyHostInput = {
    id?: number
    categoryId: number
    meetingImageUrl?: string | null
    location: string
    title: string
    keyword: string
    description: string
    maxPeople: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
  }

  export type MeetingJoinUserCreateManyUserInput = {
    id?: number
    meetingId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReplyCreateManyUserInput = {
    id?: number
    communityContentId: number
    content: string
    createdAt?: Date | string
  }

  export type CommunityContentCreateManyWritedUserInput = {
    id?: number
    communityId: number
    title: string
    content: string
    likeCount?: number
    contentImageUrl?: string | null
    createdAt?: Date | string
  }

  export type UserMatchingCreateManyCallerUserInput = {
    id?: number
    calleeUserId: number
    comment: string
    matchingCategoryId: number
    createdAt?: Date | string
  }

  export type UserMatchingCreateManyCalleeUserInput = {
    id?: number
    callerUserId: number
    comment: string
    matchingCategoryId: number
    createdAt?: Date | string
  }

  export type MeetingUpdateWithoutHostInput = {
    meetingImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    keyword?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maxPeople?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingJoinUser?: MeetingJoinUserUpdateManyWithoutMeetingNestedInput
    category?: CategoryUpdateOneRequiredWithoutMeetingNestedInput
  }

  export type MeetingUncheckedUpdateWithoutHostInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    meetingImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    keyword?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maxPeople?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingJoinUser?: MeetingJoinUserUncheckedUpdateManyWithoutMeetingNestedInput
  }

  export type MeetingUncheckedUpdateManyWithoutHostInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    meetingImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    keyword?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maxPeople?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingJoinUserUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meeting?: MeetingUpdateOneRequiredWithoutMeetingJoinUserNestedInput
  }

  export type MeetingJoinUserUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    meetingId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingJoinUserUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    meetingId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReplyUpdateWithoutUserInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    communityContent?: CommunityContentUpdateOneRequiredWithoutReplyNestedInput
  }

  export type ReplyUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    communityContentId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReplyUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    communityContentId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityContentUpdateWithoutWritedUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    likeCount?: IntFieldUpdateOperationsInput | number
    contentImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reply?: ReplyUpdateManyWithoutCommunityContentNestedInput
    community?: CommunityUpdateOneRequiredWithoutCommunityContentNestedInput
  }

  export type CommunityContentUncheckedUpdateWithoutWritedUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    communityId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    likeCount?: IntFieldUpdateOperationsInput | number
    contentImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reply?: ReplyUncheckedUpdateManyWithoutCommunityContentNestedInput
  }

  export type CommunityContentUncheckedUpdateManyWithoutWritedUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    communityId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    likeCount?: IntFieldUpdateOperationsInput | number
    contentImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMatchingUpdateWithoutCallerUserInput = {
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    calleeUser?: UserUpdateOneRequiredWithoutCalleeUserMatchingNestedInput
    matchingCategory?: MatchingCategoryUpdateOneRequiredWithoutUserNestedInput
  }

  export type UserMatchingUncheckedUpdateWithoutCallerUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    calleeUserId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    matchingCategoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMatchingUncheckedUpdateManyWithoutCallerUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    calleeUserId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    matchingCategoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMatchingUpdateWithoutCalleeUserInput = {
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    callerUser?: UserUpdateOneRequiredWithoutCallerUserMatchingNestedInput
    matchingCategory?: MatchingCategoryUpdateOneRequiredWithoutUserNestedInput
  }

  export type UserMatchingUncheckedUpdateWithoutCalleeUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    callerUserId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    matchingCategoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMatchingUncheckedUpdateManyWithoutCalleeUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    callerUserId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    matchingCategoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyMbtiInput = {
    id?: number
    universityId: number
    name: string
    major: string
    alcoholLevel?: number
    madCampStatus?: $Enums.MadCampStatus
    email: string
    sex?: $Enums.Sex
    classId: number
    imageUrl?: string | null
    preferredAlcoholId?: number
    leadershipLevel?: number
    refreshToken?: string | null
    birthday: Date | string
    registrationStatus?: $Enums.RegistrationStatus
    programmingLevel?: number
    programmingField: string
    programmingLanguage: string
    createdAt?: Date | string
  }

  export type UserUpdateWithoutMbtiInput = {
    name?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    alcoholLevel?: IntFieldUpdateOperationsInput | number
    madCampStatus?: EnumMadCampStatusFieldUpdateOperationsInput | $Enums.MadCampStatus
    email?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    classId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipLevel?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationStatus?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    programmingLevel?: IntFieldUpdateOperationsInput | number
    programmingField?: StringFieldUpdateOperationsInput | string
    programmingLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meeting?: MeetingUpdateManyWithoutHostNestedInput
    meetingJoinUser?: MeetingJoinUserUpdateManyWithoutUserNestedInput
    reply?: ReplyUpdateManyWithoutUserNestedInput
    communityContent?: CommunityContentUpdateManyWithoutWritedUserNestedInput
    callerUserMatching?: UserMatchingUpdateManyWithoutCallerUserNestedInput
    calleeUserMatching?: UserMatchingUpdateManyWithoutCalleeUserNestedInput
    preferredAlcohol?: AlcoholUpdateOneRequiredWithoutUserNestedInput
    university?: UniversityUpdateOneRequiredWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMbtiInput = {
    id?: IntFieldUpdateOperationsInput | number
    universityId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    alcoholLevel?: IntFieldUpdateOperationsInput | number
    madCampStatus?: EnumMadCampStatusFieldUpdateOperationsInput | $Enums.MadCampStatus
    email?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    classId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    preferredAlcoholId?: IntFieldUpdateOperationsInput | number
    leadershipLevel?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationStatus?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    programmingLevel?: IntFieldUpdateOperationsInput | number
    programmingField?: StringFieldUpdateOperationsInput | string
    programmingLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meeting?: MeetingUncheckedUpdateManyWithoutHostNestedInput
    meetingJoinUser?: MeetingJoinUserUncheckedUpdateManyWithoutUserNestedInput
    reply?: ReplyUncheckedUpdateManyWithoutUserNestedInput
    communityContent?: CommunityContentUncheckedUpdateManyWithoutWritedUserNestedInput
    callerUserMatching?: UserMatchingUncheckedUpdateManyWithoutCallerUserNestedInput
    calleeUserMatching?: UserMatchingUncheckedUpdateManyWithoutCalleeUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutMbtiInput = {
    id?: IntFieldUpdateOperationsInput | number
    universityId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    alcoholLevel?: IntFieldUpdateOperationsInput | number
    madCampStatus?: EnumMadCampStatusFieldUpdateOperationsInput | $Enums.MadCampStatus
    email?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    classId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    preferredAlcoholId?: IntFieldUpdateOperationsInput | number
    leadershipLevel?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationStatus?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    programmingLevel?: IntFieldUpdateOperationsInput | number
    programmingField?: StringFieldUpdateOperationsInput | string
    programmingLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyPreferredAlcoholInput = {
    id?: number
    universityId: number
    name: string
    major: string
    alcoholLevel?: number
    madCampStatus?: $Enums.MadCampStatus
    email: string
    sex?: $Enums.Sex
    mbtiId: number
    classId: number
    imageUrl?: string | null
    leadershipLevel?: number
    refreshToken?: string | null
    birthday: Date | string
    registrationStatus?: $Enums.RegistrationStatus
    programmingLevel?: number
    programmingField: string
    programmingLanguage: string
    createdAt?: Date | string
  }

  export type UserUpdateWithoutPreferredAlcoholInput = {
    name?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    alcoholLevel?: IntFieldUpdateOperationsInput | number
    madCampStatus?: EnumMadCampStatusFieldUpdateOperationsInput | $Enums.MadCampStatus
    email?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    classId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipLevel?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationStatus?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    programmingLevel?: IntFieldUpdateOperationsInput | number
    programmingField?: StringFieldUpdateOperationsInput | string
    programmingLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meeting?: MeetingUpdateManyWithoutHostNestedInput
    meetingJoinUser?: MeetingJoinUserUpdateManyWithoutUserNestedInput
    reply?: ReplyUpdateManyWithoutUserNestedInput
    communityContent?: CommunityContentUpdateManyWithoutWritedUserNestedInput
    callerUserMatching?: UserMatchingUpdateManyWithoutCallerUserNestedInput
    calleeUserMatching?: UserMatchingUpdateManyWithoutCalleeUserNestedInput
    university?: UniversityUpdateOneRequiredWithoutUserNestedInput
    mbti?: MbtiUpdateOneRequiredWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPreferredAlcoholInput = {
    id?: IntFieldUpdateOperationsInput | number
    universityId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    alcoholLevel?: IntFieldUpdateOperationsInput | number
    madCampStatus?: EnumMadCampStatusFieldUpdateOperationsInput | $Enums.MadCampStatus
    email?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    mbtiId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipLevel?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationStatus?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    programmingLevel?: IntFieldUpdateOperationsInput | number
    programmingField?: StringFieldUpdateOperationsInput | string
    programmingLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meeting?: MeetingUncheckedUpdateManyWithoutHostNestedInput
    meetingJoinUser?: MeetingJoinUserUncheckedUpdateManyWithoutUserNestedInput
    reply?: ReplyUncheckedUpdateManyWithoutUserNestedInput
    communityContent?: CommunityContentUncheckedUpdateManyWithoutWritedUserNestedInput
    callerUserMatching?: UserMatchingUncheckedUpdateManyWithoutCallerUserNestedInput
    calleeUserMatching?: UserMatchingUncheckedUpdateManyWithoutCalleeUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutPreferredAlcoholInput = {
    id?: IntFieldUpdateOperationsInput | number
    universityId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    alcoholLevel?: IntFieldUpdateOperationsInput | number
    madCampStatus?: EnumMadCampStatusFieldUpdateOperationsInput | $Enums.MadCampStatus
    email?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    mbtiId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipLevel?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationStatus?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    programmingLevel?: IntFieldUpdateOperationsInput | number
    programmingField?: StringFieldUpdateOperationsInput | string
    programmingLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyUniversityInput = {
    id?: number
    name: string
    major: string
    alcoholLevel?: number
    madCampStatus?: $Enums.MadCampStatus
    email: string
    sex?: $Enums.Sex
    mbtiId: number
    classId: number
    imageUrl?: string | null
    preferredAlcoholId?: number
    leadershipLevel?: number
    refreshToken?: string | null
    birthday: Date | string
    registrationStatus?: $Enums.RegistrationStatus
    programmingLevel?: number
    programmingField: string
    programmingLanguage: string
    createdAt?: Date | string
  }

  export type UserUpdateWithoutUniversityInput = {
    name?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    alcoholLevel?: IntFieldUpdateOperationsInput | number
    madCampStatus?: EnumMadCampStatusFieldUpdateOperationsInput | $Enums.MadCampStatus
    email?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    classId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipLevel?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationStatus?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    programmingLevel?: IntFieldUpdateOperationsInput | number
    programmingField?: StringFieldUpdateOperationsInput | string
    programmingLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meeting?: MeetingUpdateManyWithoutHostNestedInput
    meetingJoinUser?: MeetingJoinUserUpdateManyWithoutUserNestedInput
    reply?: ReplyUpdateManyWithoutUserNestedInput
    communityContent?: CommunityContentUpdateManyWithoutWritedUserNestedInput
    callerUserMatching?: UserMatchingUpdateManyWithoutCallerUserNestedInput
    calleeUserMatching?: UserMatchingUpdateManyWithoutCalleeUserNestedInput
    preferredAlcohol?: AlcoholUpdateOneRequiredWithoutUserNestedInput
    mbti?: MbtiUpdateOneRequiredWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUniversityInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    alcoholLevel?: IntFieldUpdateOperationsInput | number
    madCampStatus?: EnumMadCampStatusFieldUpdateOperationsInput | $Enums.MadCampStatus
    email?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    mbtiId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    preferredAlcoholId?: IntFieldUpdateOperationsInput | number
    leadershipLevel?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationStatus?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    programmingLevel?: IntFieldUpdateOperationsInput | number
    programmingField?: StringFieldUpdateOperationsInput | string
    programmingLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meeting?: MeetingUncheckedUpdateManyWithoutHostNestedInput
    meetingJoinUser?: MeetingJoinUserUncheckedUpdateManyWithoutUserNestedInput
    reply?: ReplyUncheckedUpdateManyWithoutUserNestedInput
    communityContent?: CommunityContentUncheckedUpdateManyWithoutWritedUserNestedInput
    callerUserMatching?: UserMatchingUncheckedUpdateManyWithoutCallerUserNestedInput
    calleeUserMatching?: UserMatchingUncheckedUpdateManyWithoutCalleeUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutUniversityInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    alcoholLevel?: IntFieldUpdateOperationsInput | number
    madCampStatus?: EnumMadCampStatusFieldUpdateOperationsInput | $Enums.MadCampStatus
    email?: StringFieldUpdateOperationsInput | string
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    mbtiId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    preferredAlcoholId?: IntFieldUpdateOperationsInput | number
    leadershipLevel?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationStatus?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    programmingLevel?: IntFieldUpdateOperationsInput | number
    programmingField?: StringFieldUpdateOperationsInput | string
    programmingLanguage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMatchingCreateManyMatchingCategoryInput = {
    id?: number
    callerUserId: number
    calleeUserId: number
    comment: string
    createdAt?: Date | string
  }

  export type UserMatchingUpdateWithoutMatchingCategoryInput = {
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    callerUser?: UserUpdateOneRequiredWithoutCallerUserMatchingNestedInput
    calleeUser?: UserUpdateOneRequiredWithoutCalleeUserMatchingNestedInput
  }

  export type UserMatchingUncheckedUpdateWithoutMatchingCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    callerUserId?: IntFieldUpdateOperationsInput | number
    calleeUserId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMatchingUncheckedUpdateManyWithoutMatchingCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    callerUserId?: IntFieldUpdateOperationsInput | number
    calleeUserId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingCreateManyCategoryInput = {
    id?: number
    hostId: number
    meetingImageUrl?: string | null
    location: string
    title: string
    keyword: string
    description: string
    maxPeople: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
  }

  export type MeetingUpdateWithoutCategoryInput = {
    meetingImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    keyword?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maxPeople?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingJoinUser?: MeetingJoinUserUpdateManyWithoutMeetingNestedInput
    host?: UserUpdateOneRequiredWithoutMeetingNestedInput
  }

  export type MeetingUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    hostId?: IntFieldUpdateOperationsInput | number
    meetingImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    keyword?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maxPeople?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingJoinUser?: MeetingJoinUserUncheckedUpdateManyWithoutMeetingNestedInput
  }

  export type MeetingUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    hostId?: IntFieldUpdateOperationsInput | number
    meetingImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    keyword?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maxPeople?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingJoinUserCreateManyMeetingInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingJoinUserUpdateWithoutMeetingInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMeetingJoinUserNestedInput
  }

  export type MeetingJoinUserUncheckedUpdateWithoutMeetingInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingJoinUserUncheckedUpdateManyWithoutMeetingInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityContentCreateManyCommunityInput = {
    id?: number
    writedUserId: number
    title: string
    content: string
    likeCount?: number
    contentImageUrl?: string | null
    createdAt?: Date | string
  }

  export type CommunityContentUpdateWithoutCommunityInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    likeCount?: IntFieldUpdateOperationsInput | number
    contentImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reply?: ReplyUpdateManyWithoutCommunityContentNestedInput
    writedUser?: UserUpdateOneRequiredWithoutCommunityContentNestedInput
  }

  export type CommunityContentUncheckedUpdateWithoutCommunityInput = {
    id?: IntFieldUpdateOperationsInput | number
    writedUserId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    likeCount?: IntFieldUpdateOperationsInput | number
    contentImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reply?: ReplyUncheckedUpdateManyWithoutCommunityContentNestedInput
  }

  export type CommunityContentUncheckedUpdateManyWithoutCommunityInput = {
    id?: IntFieldUpdateOperationsInput | number
    writedUserId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    likeCount?: IntFieldUpdateOperationsInput | number
    contentImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReplyCreateManyCommunityContentInput = {
    id?: number
    userId: number
    content: string
    createdAt?: Date | string
  }

  export type ReplyUpdateWithoutCommunityContentInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReplyNestedInput
  }

  export type ReplyUncheckedUpdateWithoutCommunityContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReplyUncheckedUpdateManyWithoutCommunityContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MbtiCountOutputTypeDefaultArgs instead
     */
    export type MbtiCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MbtiCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlcoholCountOutputTypeDefaultArgs instead
     */
    export type AlcoholCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlcoholCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UniversityCountOutputTypeDefaultArgs instead
     */
    export type UniversityCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UniversityCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MatchingCategoryCountOutputTypeDefaultArgs instead
     */
    export type MatchingCategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MatchingCategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MeetingCountOutputTypeDefaultArgs instead
     */
    export type MeetingCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MeetingCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommunityCountOutputTypeDefaultArgs instead
     */
    export type CommunityCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommunityCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommunityContentCountOutputTypeDefaultArgs instead
     */
    export type CommunityContentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommunityContentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MbtiDefaultArgs instead
     */
    export type MbtiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MbtiDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlcoholDefaultArgs instead
     */
    export type AlcoholArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlcoholDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UniversityDefaultArgs instead
     */
    export type UniversityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UniversityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserMatchingDefaultArgs instead
     */
    export type UserMatchingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserMatchingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MatchingCategoryDefaultArgs instead
     */
    export type MatchingCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MatchingCategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MeetingDefaultArgs instead
     */
    export type MeetingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MeetingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MeetingJoinUserDefaultArgs instead
     */
    export type MeetingJoinUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MeetingJoinUserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommunityDefaultArgs instead
     */
    export type CommunityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommunityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommunityContentDefaultArgs instead
     */
    export type CommunityContentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommunityContentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReplyDefaultArgs instead
     */
    export type ReplyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReplyDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}